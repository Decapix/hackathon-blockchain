import {
  HashMD
} from "./chunk-FL6YNZE4.js";
import {
  LruMap,
  checksumAddress,
  defineFormatter,
  hexToBigInt,
  hexToNumber,
  isHex,
  keccak256,
  numberToHex,
  toHex
} from "./chunk-7KCVA5CC.js";
import {
  rotl,
  wrapConstructor
} from "./chunk-FUPOJN5U.js";
import {
  Keypair,
  VersionedTransaction
} from "./chunk-RINWTAI6.js";
import {
  createChainSwitchMiddleware,
  createEthMiddleware,
  createJsonRpcClient
} from "./chunk-VURRWDOZ.js";
import "./chunk-YSY3MWDC.js";
import "./chunk-MAWB64PO.js";
import "./chunk-CSOJRYWY.js";
import "./chunk-M3PMW2TU.js";
import {
  require_lodash
} from "./chunk-WULWOCVO.js";
import {
  BaseProvider
} from "./chunk-RKFWAKTT.js";
import {
  ADAPTER_CATEGORY,
  ADAPTER_EVENTS,
  ADAPTER_NAMESPACES,
  ADAPTER_STATUS,
  BaseAdapter,
  CHAIN_NAMESPACES,
  JRPCEngine,
  WALLET_ADAPTERS,
  WalletInitializationError,
  WalletLoginError,
  Web3AuthError,
  _defineProperty,
  _objectSpread2,
  checkIfTokenIsExpired,
  clearToken,
  createAsyncMiddleware,
  createFetchMiddleware,
  getChainConfig,
  getED25519Key,
  getSavedToken,
  loglevel2 as loglevel,
  mergeMiddleware,
  normalizeWalletName,
  providerErrors,
  providerFromEngine,
  require_cjs,
  require_elliptic,
  require_events,
  require_nacl_fast,
  rpcErrors,
  saveToken,
  signChallenge,
  verifySignedChallenge
} from "./chunk-ECVAH7XL.js";
import "./chunk-3SKPES2V.js";
import "./chunk-ATDVI3CM.js";
import "./chunk-CFIX2DL5.js";
import {
  __commonJS,
  __esm,
  __export,
  __reExport,
  __toCommonJS,
  __toESM
} from "./chunk-256EKJAK.js";

// node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __read: () => __read,
  __rest: () => __rest,
  __spread: () => __spread,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d5, b4) {
  extendStatics(d5, b4);
  function __() {
    this.constructor = d5;
  }
  d5.prototype = b4 === null ? Object.create(b4) : (__.prototype = b4.prototype, new __());
}
function __rest(s3, e2) {
  var t = {};
  for (var p4 in s3) if (Object.prototype.hasOwnProperty.call(s3, p4) && e2.indexOf(p4) < 0)
    t[p4] = s3[p4];
  if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i4 = 0, p4 = Object.getOwnPropertySymbols(s3); i4 < p4.length; i4++) {
      if (e2.indexOf(p4[i4]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p4[i4]))
        t[p4[i4]] = s3[p4[i4]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c6 = arguments.length, r3 = c6 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d5;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r3 = Reflect.decorate(decorators, target, key, desc);
  else for (var i4 = decorators.length - 1; i4 >= 0; i4--) if (d5 = decorators[i4]) r3 = (c6 < 3 ? d5(r3) : c6 > 3 ? d5(target, key, r3) : d5(target, key)) || r3;
  return c6 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P4, generator) {
  function adopt(value) {
    return value instanceof P4 ? value : new P4(function(resolve) {
      resolve(value);
    });
  }
  return new (P4 || (P4 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _5 = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f6, y4, t, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n5) {
    return function(v5) {
      return step([n5, v5]);
    };
  }
  function step(op) {
    if (f6) throw new TypeError("Generator is already executing.");
    while (_5) try {
      if (f6 = 1, y4 && (t = op[0] & 2 ? y4["return"] : op[0] ? y4["throw"] || ((t = y4["return"]) && t.call(y4), 0) : y4.next) && !(t = t.call(y4, op[1])).done) return t;
      if (y4 = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _5.label++;
          return { value: op[1], done: false };
        case 5:
          _5.label++;
          y4 = op[1];
          op = [0];
          continue;
        case 7:
          op = _5.ops.pop();
          _5.trys.pop();
          continue;
        default:
          if (!(t = _5.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _5 = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _5.label = op[1];
            break;
          }
          if (op[0] === 6 && _5.label < t[1]) {
            _5.label = t[1];
            t = op;
            break;
          }
          if (t && _5.label < t[2]) {
            _5.label = t[2];
            _5.ops.push(op);
            break;
          }
          if (t[2]) _5.ops.pop();
          _5.trys.pop();
          continue;
      }
      op = body.call(thisArg, _5);
    } catch (e2) {
      op = [6, e2];
      y4 = 0;
    } finally {
      f6 = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding(o4, m3, k5, k22) {
  if (k22 === void 0) k22 = k5;
  o4[k22] = m3[k5];
}
function __exportStar(m3, exports) {
  for (var p4 in m3) if (p4 !== "default" && !exports.hasOwnProperty(p4)) exports[p4] = m3[p4];
}
function __values(o4) {
  var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o4[s3], i4 = 0;
  if (m3) return m3.call(o4);
  if (o4 && typeof o4.length === "number") return {
    next: function() {
      if (o4 && i4 >= o4.length) o4 = void 0;
      return { value: o4 && o4[i4++], done: !o4 };
    }
  };
  throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o4, n5) {
  var m3 = typeof Symbol === "function" && o4[Symbol.iterator];
  if (!m3) return o4;
  var i4 = m3.call(o4), r3, ar4 = [], e2;
  try {
    while ((n5 === void 0 || n5-- > 0) && !(r3 = i4.next()).done) ar4.push(r3.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m3 = i4["return"])) m3.call(i4);
    } finally {
      if (e2) throw e2.error;
    }
  }
  return ar4;
}
function __spread() {
  for (var ar4 = [], i4 = 0; i4 < arguments.length; i4++)
    ar4 = ar4.concat(__read(arguments[i4]));
  return ar4;
}
function __spreadArrays() {
  for (var s3 = 0, i4 = 0, il = arguments.length; i4 < il; i4++) s3 += arguments[i4].length;
  for (var r3 = Array(s3), k5 = 0, i4 = 0; i4 < il; i4++)
    for (var a3 = arguments[i4], j4 = 0, jl = a3.length; j4 < jl; j4++, k5++)
      r3[k5] = a3[j4];
  return r3;
}
function __await(v5) {
  return this instanceof __await ? (this.v = v5, this) : new __await(v5);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g3 = generator.apply(thisArg, _arguments || []), i4, q3 = [];
  return i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
    return this;
  }, i4;
  function verb(n5) {
    if (g3[n5]) i4[n5] = function(v5) {
      return new Promise(function(a3, b4) {
        q3.push([n5, v5, a3, b4]) > 1 || resume(n5, v5);
      });
    };
  }
  function resume(n5, v5) {
    try {
      step(g3[n5](v5));
    } catch (e2) {
      settle(q3[0][3], e2);
    }
  }
  function step(r3) {
    r3.value instanceof __await ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q3[0][2], r3);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f6, v5) {
    if (f6(v5), q3.shift(), q3.length) resume(q3[0][0], q3[0][1]);
  }
}
function __asyncDelegator(o4) {
  var i4, p4;
  return i4 = {}, verb("next"), verb("throw", function(e2) {
    throw e2;
  }), verb("return"), i4[Symbol.iterator] = function() {
    return this;
  }, i4;
  function verb(n5, f6) {
    i4[n5] = o4[n5] ? function(v5) {
      return (p4 = !p4) ? { value: __await(o4[n5](v5)), done: n5 === "return" } : f6 ? f6(v5) : v5;
    } : f6;
  }
}
function __asyncValues(o4) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m3 = o4[Symbol.asyncIterator], i4;
  return m3 ? m3.call(o4) : (o4 = typeof __values === "function" ? __values(o4) : o4[Symbol.iterator](), i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
    return this;
  }, i4);
  function verb(n5) {
    i4[n5] = o4[n5] && function(v5) {
      return new Promise(function(resolve, reject) {
        v5 = o4[n5](v5), settle(resolve, reject, v5.done, v5.value);
      });
    };
  }
  function settle(resolve, reject, d5, v5) {
    Promise.resolve(v5).then(function(v6) {
      resolve({ value: v6, done: d5 });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) {
    for (var k5 in mod) if (Object.hasOwnProperty.call(mod, k5)) result[k5] = mod[k5];
  }
  result.default = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics, __assign;
var init_tslib_es6 = __esm({
  "node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js"() {
    extendStatics = function(d5, b4) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d6, b5) {
        d6.__proto__ = b5;
      } || function(d6, b5) {
        for (var p4 in b5) if (b5.hasOwnProperty(p4)) d6[p4] = b5[p4];
      };
      return extendStatics(d5, b4);
    };
    __assign = function() {
      __assign = Object.assign || function __assign3(t) {
        for (var s3, i4 = 1, n5 = arguments.length; i4 < n5; i4++) {
          s3 = arguments[i4];
          for (var p4 in s3) if (Object.prototype.hasOwnProperty.call(s3, p4)) t[p4] = s3[p4];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/delay.js
var require_delay = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/delay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delay = void 0;
    function delay(timeout) {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve(true);
        }, timeout);
      });
    }
    exports.delay = delay;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/misc.js
var require_misc = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/misc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_THOUSAND = exports.ONE_HUNDRED = void 0;
    exports.ONE_HUNDRED = 100;
    exports.ONE_THOUSAND = 1e3;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/time.js
var require_time = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/time.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_YEAR = exports.FOUR_WEEKS = exports.THREE_WEEKS = exports.TWO_WEEKS = exports.ONE_WEEK = exports.THIRTY_DAYS = exports.SEVEN_DAYS = exports.FIVE_DAYS = exports.THREE_DAYS = exports.ONE_DAY = exports.TWENTY_FOUR_HOURS = exports.TWELVE_HOURS = exports.SIX_HOURS = exports.THREE_HOURS = exports.ONE_HOUR = exports.SIXTY_MINUTES = exports.THIRTY_MINUTES = exports.TEN_MINUTES = exports.FIVE_MINUTES = exports.ONE_MINUTE = exports.SIXTY_SECONDS = exports.THIRTY_SECONDS = exports.TEN_SECONDS = exports.FIVE_SECONDS = exports.ONE_SECOND = void 0;
    exports.ONE_SECOND = 1;
    exports.FIVE_SECONDS = 5;
    exports.TEN_SECONDS = 10;
    exports.THIRTY_SECONDS = 30;
    exports.SIXTY_SECONDS = 60;
    exports.ONE_MINUTE = exports.SIXTY_SECONDS;
    exports.FIVE_MINUTES = exports.ONE_MINUTE * 5;
    exports.TEN_MINUTES = exports.ONE_MINUTE * 10;
    exports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;
    exports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;
    exports.ONE_HOUR = exports.SIXTY_MINUTES;
    exports.THREE_HOURS = exports.ONE_HOUR * 3;
    exports.SIX_HOURS = exports.ONE_HOUR * 6;
    exports.TWELVE_HOURS = exports.ONE_HOUR * 12;
    exports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;
    exports.ONE_DAY = exports.TWENTY_FOUR_HOURS;
    exports.THREE_DAYS = exports.ONE_DAY * 3;
    exports.FIVE_DAYS = exports.ONE_DAY * 5;
    exports.SEVEN_DAYS = exports.ONE_DAY * 7;
    exports.THIRTY_DAYS = exports.ONE_DAY * 30;
    exports.ONE_WEEK = exports.SEVEN_DAYS;
    exports.TWO_WEEKS = exports.ONE_WEEK * 2;
    exports.THREE_WEEKS = exports.ONE_WEEK * 3;
    exports.FOUR_WEEKS = exports.ONE_WEEK * 4;
    exports.ONE_YEAR = exports.ONE_DAY * 365;
  }
});

// node_modules/@walletconnect/time/dist/cjs/constants/index.js
var require_constants = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/constants/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_misc(), exports);
    tslib_1.__exportStar(require_time(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/convert.js
var require_convert = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/convert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromMiliseconds = exports.toMiliseconds = void 0;
    var constants_1 = require_constants();
    function toMiliseconds(seconds) {
      return seconds * constants_1.ONE_THOUSAND;
    }
    exports.toMiliseconds = toMiliseconds;
    function fromMiliseconds(miliseconds) {
      return Math.floor(miliseconds / constants_1.ONE_THOUSAND);
    }
    exports.fromMiliseconds = fromMiliseconds;
  }
});

// node_modules/@walletconnect/time/dist/cjs/utils/index.js
var require_utils = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_delay(), exports);
    tslib_1.__exportStar(require_convert(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/watch.js
var require_watch = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Watch = void 0;
    var Watch = class {
      constructor() {
        this.timestamps = /* @__PURE__ */ new Map();
      }
      start(label) {
        if (this.timestamps.has(label)) {
          throw new Error(`Watch already started for label: ${label}`);
        }
        this.timestamps.set(label, { started: Date.now() });
      }
      stop(label) {
        const timestamp = this.get(label);
        if (typeof timestamp.elapsed !== "undefined") {
          throw new Error(`Watch already stopped for label: ${label}`);
        }
        const elapsed = Date.now() - timestamp.started;
        this.timestamps.set(label, { started: timestamp.started, elapsed });
      }
      get(label) {
        const timestamp = this.timestamps.get(label);
        if (typeof timestamp === "undefined") {
          throw new Error(`No timestamp found for label: ${label}`);
        }
        return timestamp;
      }
      elapsed(label) {
        const timestamp = this.get(label);
        const elapsed = timestamp.elapsed || Date.now() - timestamp.started;
        return elapsed;
      }
    };
    exports.Watch = Watch;
    exports.default = Watch;
  }
});

// node_modules/@walletconnect/time/dist/cjs/types/watch.js
var require_watch2 = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/types/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IWatch = void 0;
    var IWatch = class {
    };
    exports.IWatch = IWatch;
  }
});

// node_modules/@walletconnect/time/dist/cjs/types/index.js
var require_types = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/types/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_watch2(), exports);
  }
});

// node_modules/@walletconnect/time/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/@walletconnect/time/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_utils(), exports);
    tslib_1.__exportStar(require_watch(), exports);
    tslib_1.__exportStar(require_types(), exports);
    tslib_1.__exportStar(require_constants(), exports);
  }
});

// node_modules/quick-format-unescaped/index.js
var require_quick_format_unescaped = __commonJS({
  "node_modules/quick-format-unescaped/index.js"(exports, module) {
    "use strict";
    function tryStringify(o4) {
      try {
        return JSON.stringify(o4);
      } catch (e2) {
        return '"[Circular]"';
      }
    }
    module.exports = format;
    function format(f6, args, opts) {
      var ss2 = opts && opts.stringify || tryStringify;
      var offset = 1;
      if (typeof f6 === "object" && f6 !== null) {
        var len = args.length + offset;
        if (len === 1) return f6;
        var objects = new Array(len);
        objects[0] = ss2(f6);
        for (var index = 1; index < len; index++) {
          objects[index] = ss2(args[index]);
        }
        return objects.join(" ");
      }
      if (typeof f6 !== "string") {
        return f6;
      }
      var argLen = args.length;
      if (argLen === 0) return f6;
      var str = "";
      var a3 = 1 - offset;
      var lastPos = -1;
      var flen = f6 && f6.length || 0;
      for (var i4 = 0; i4 < flen; ) {
        if (f6.charCodeAt(i4) === 37 && i4 + 1 < flen) {
          lastPos = lastPos > -1 ? lastPos : 0;
          switch (f6.charCodeAt(i4 + 1)) {
            case 100:
            case 102:
              if (a3 >= argLen)
                break;
              if (args[a3] == null) break;
              if (lastPos < i4)
                str += f6.slice(lastPos, i4);
              str += Number(args[a3]);
              lastPos = i4 + 2;
              i4++;
              break;
            case 105:
              if (a3 >= argLen)
                break;
              if (args[a3] == null) break;
              if (lastPos < i4)
                str += f6.slice(lastPos, i4);
              str += Math.floor(Number(args[a3]));
              lastPos = i4 + 2;
              i4++;
              break;
            case 79:
            case 111:
            case 106:
              if (a3 >= argLen)
                break;
              if (args[a3] === void 0) break;
              if (lastPos < i4)
                str += f6.slice(lastPos, i4);
              var type = typeof args[a3];
              if (type === "string") {
                str += "'" + args[a3] + "'";
                lastPos = i4 + 2;
                i4++;
                break;
              }
              if (type === "function") {
                str += args[a3].name || "<anonymous>";
                lastPos = i4 + 2;
                i4++;
                break;
              }
              str += ss2(args[a3]);
              lastPos = i4 + 2;
              i4++;
              break;
            case 115:
              if (a3 >= argLen)
                break;
              if (lastPos < i4)
                str += f6.slice(lastPos, i4);
              str += String(args[a3]);
              lastPos = i4 + 2;
              i4++;
              break;
            case 37:
              if (lastPos < i4)
                str += f6.slice(lastPos, i4);
              str += "%";
              lastPos = i4 + 2;
              i4++;
              a3--;
              break;
          }
          ++a3;
        }
        ++i4;
      }
      if (lastPos === -1)
        return f6;
      else if (lastPos < flen) {
        str += f6.slice(lastPos);
      }
      return str;
    }
  }
});

// node_modules/pino/browser.js
var require_browser = __commonJS({
  "node_modules/pino/browser.js"(exports, module) {
    "use strict";
    var format = require_quick_format_unescaped();
    module.exports = pino;
    var _console = pfGlobalThisOrFallback().console || {};
    var stdSerializers = {
      mapHttpRequest: mock,
      mapHttpResponse: mock,
      wrapRequestSerializer: passthrough,
      wrapResponseSerializer: passthrough,
      wrapErrorSerializer: passthrough,
      req: mock,
      res: mock,
      err: asErrValue
    };
    function shouldSerialize(serialize, serializers) {
      if (Array.isArray(serialize)) {
        const hasToFilter = serialize.filter(function(k5) {
          return k5 !== "!stdSerializers.err";
        });
        return hasToFilter;
      } else if (serialize === true) {
        return Object.keys(serializers);
      }
      return false;
    }
    function pino(opts) {
      opts = opts || {};
      opts.browser = opts.browser || {};
      const transmit2 = opts.browser.transmit;
      if (transmit2 && typeof transmit2.send !== "function") {
        throw Error("pino: transmit option must have a send function");
      }
      const proto = opts.browser.write || _console;
      if (opts.browser.write) opts.browser.asObject = true;
      const serializers = opts.serializers || {};
      const serialize = shouldSerialize(opts.browser.serialize, serializers);
      let stdErrSerialize = opts.browser.serialize;
      if (Array.isArray(opts.browser.serialize) && opts.browser.serialize.indexOf("!stdSerializers.err") > -1) stdErrSerialize = false;
      const levels = ["error", "fatal", "warn", "info", "debug", "trace"];
      if (typeof proto === "function") {
        proto.error = proto.fatal = proto.warn = proto.info = proto.debug = proto.trace = proto;
      }
      if (opts.enabled === false) opts.level = "silent";
      const level = opts.level || "info";
      const logger = Object.create(proto);
      if (!logger.log) logger.log = noop;
      Object.defineProperty(logger, "levelVal", {
        get: getLevelVal
      });
      Object.defineProperty(logger, "level", {
        get: getLevel,
        set: setLevel
      });
      const setOpts = {
        transmit: transmit2,
        serialize,
        asObject: opts.browser.asObject,
        levels,
        timestamp: getTimeFunction(opts)
      };
      logger.levels = pino.levels;
      logger.level = level;
      logger.setMaxListeners = logger.getMaxListeners = logger.emit = logger.addListener = logger.on = logger.prependListener = logger.once = logger.prependOnceListener = logger.removeListener = logger.removeAllListeners = logger.listeners = logger.listenerCount = logger.eventNames = logger.write = logger.flush = noop;
      logger.serializers = serializers;
      logger._serialize = serialize;
      logger._stdErrSerialize = stdErrSerialize;
      logger.child = child;
      if (transmit2) logger._logEvent = createLogEventShape();
      function getLevelVal() {
        return this.level === "silent" ? Infinity : this.levels.values[this.level];
      }
      function getLevel() {
        return this._level;
      }
      function setLevel(level2) {
        if (level2 !== "silent" && !this.levels.values[level2]) {
          throw Error("unknown level " + level2);
        }
        this._level = level2;
        set2(setOpts, logger, "error", "log");
        set2(setOpts, logger, "fatal", "error");
        set2(setOpts, logger, "warn", "error");
        set2(setOpts, logger, "info", "log");
        set2(setOpts, logger, "debug", "log");
        set2(setOpts, logger, "trace", "log");
      }
      function child(bindings, childOptions) {
        if (!bindings) {
          throw new Error("missing bindings for child Pino");
        }
        childOptions = childOptions || {};
        if (serialize && bindings.serializers) {
          childOptions.serializers = bindings.serializers;
        }
        const childOptionsSerializers = childOptions.serializers;
        if (serialize && childOptionsSerializers) {
          var childSerializers = Object.assign({}, serializers, childOptionsSerializers);
          var childSerialize = opts.browser.serialize === true ? Object.keys(childSerializers) : serialize;
          delete bindings.serializers;
          applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize);
        }
        function Child(parent) {
          this._childLevel = (parent._childLevel | 0) + 1;
          this.error = bind(parent, bindings, "error");
          this.fatal = bind(parent, bindings, "fatal");
          this.warn = bind(parent, bindings, "warn");
          this.info = bind(parent, bindings, "info");
          this.debug = bind(parent, bindings, "debug");
          this.trace = bind(parent, bindings, "trace");
          if (childSerializers) {
            this.serializers = childSerializers;
            this._serialize = childSerialize;
          }
          if (transmit2) {
            this._logEvent = createLogEventShape(
              [].concat(parent._logEvent.bindings, bindings)
            );
          }
        }
        Child.prototype = this;
        return new Child(this);
      }
      return logger;
    }
    pino.levels = {
      values: {
        fatal: 60,
        error: 50,
        warn: 40,
        info: 30,
        debug: 20,
        trace: 10
      },
      labels: {
        10: "trace",
        20: "debug",
        30: "info",
        40: "warn",
        50: "error",
        60: "fatal"
      }
    };
    pino.stdSerializers = stdSerializers;
    pino.stdTimeFunctions = Object.assign({}, { nullTime, epochTime, unixTime, isoTime });
    function set2(opts, logger, level, fallback2) {
      const proto = Object.getPrototypeOf(logger);
      logger[level] = logger.levelVal > logger.levels.values[level] ? noop : proto[level] ? proto[level] : _console[level] || _console[fallback2] || noop;
      wrap(opts, logger, level);
    }
    function wrap(opts, logger, level) {
      if (!opts.transmit && logger[level] === noop) return;
      logger[level] = /* @__PURE__ */ function(write) {
        return function LOG() {
          const ts2 = opts.timestamp();
          const args = new Array(arguments.length);
          const proto = Object.getPrototypeOf && Object.getPrototypeOf(this) === _console ? _console : this;
          for (var i4 = 0; i4 < args.length; i4++) args[i4] = arguments[i4];
          if (opts.serialize && !opts.asObject) {
            applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize);
          }
          if (opts.asObject) write.call(proto, asObject(this, level, args, ts2));
          else write.apply(proto, args);
          if (opts.transmit) {
            const transmitLevel = opts.transmit.level || logger.level;
            const transmitValue = pino.levels.values[transmitLevel];
            const methodValue = pino.levels.values[level];
            if (methodValue < transmitValue) return;
            transmit(this, {
              ts: ts2,
              methodLevel: level,
              methodValue,
              transmitLevel,
              transmitValue: pino.levels.values[opts.transmit.level || logger.level],
              send: opts.transmit.send,
              val: logger.levelVal
            }, args);
          }
        };
      }(logger[level]);
    }
    function asObject(logger, level, args, ts2) {
      if (logger._serialize) applySerializers(args, logger._serialize, logger.serializers, logger._stdErrSerialize);
      const argsCloned = args.slice();
      let msg = argsCloned[0];
      const o4 = {};
      if (ts2) {
        o4.time = ts2;
      }
      o4.level = pino.levels.values[level];
      let lvl = (logger._childLevel | 0) + 1;
      if (lvl < 1) lvl = 1;
      if (msg !== null && typeof msg === "object") {
        while (lvl-- && typeof argsCloned[0] === "object") {
          Object.assign(o4, argsCloned.shift());
        }
        msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : void 0;
      } else if (typeof msg === "string") msg = format(argsCloned.shift(), argsCloned);
      if (msg !== void 0) o4.msg = msg;
      return o4;
    }
    function applySerializers(args, serialize, serializers, stdErrSerialize) {
      for (const i4 in args) {
        if (stdErrSerialize && args[i4] instanceof Error) {
          args[i4] = pino.stdSerializers.err(args[i4]);
        } else if (typeof args[i4] === "object" && !Array.isArray(args[i4])) {
          for (const k5 in args[i4]) {
            if (serialize && serialize.indexOf(k5) > -1 && k5 in serializers) {
              args[i4][k5] = serializers[k5](args[i4][k5]);
            }
          }
        }
      }
    }
    function bind(parent, bindings, level) {
      return function() {
        const args = new Array(1 + arguments.length);
        args[0] = bindings;
        for (var i4 = 1; i4 < args.length; i4++) {
          args[i4] = arguments[i4 - 1];
        }
        return parent[level].apply(this, args);
      };
    }
    function transmit(logger, opts, args) {
      const send = opts.send;
      const ts2 = opts.ts;
      const methodLevel = opts.methodLevel;
      const methodValue = opts.methodValue;
      const val = opts.val;
      const bindings = logger._logEvent.bindings;
      applySerializers(
        args,
        logger._serialize || Object.keys(logger.serializers),
        logger.serializers,
        logger._stdErrSerialize === void 0 ? true : logger._stdErrSerialize
      );
      logger._logEvent.ts = ts2;
      logger._logEvent.messages = args.filter(function(arg) {
        return bindings.indexOf(arg) === -1;
      });
      logger._logEvent.level.label = methodLevel;
      logger._logEvent.level.value = methodValue;
      send(methodLevel, logger._logEvent, val);
      logger._logEvent = createLogEventShape(bindings);
    }
    function createLogEventShape(bindings) {
      return {
        ts: 0,
        messages: [],
        bindings: bindings || [],
        level: { label: "", value: 0 }
      };
    }
    function asErrValue(err) {
      const obj = {
        type: err.constructor.name,
        msg: err.message,
        stack: err.stack
      };
      for (const key in err) {
        if (obj[key] === void 0) {
          obj[key] = err[key];
        }
      }
      return obj;
    }
    function getTimeFunction(opts) {
      if (typeof opts.timestamp === "function") {
        return opts.timestamp;
      }
      if (opts.timestamp === false) {
        return nullTime;
      }
      return epochTime;
    }
    function mock() {
      return {};
    }
    function passthrough(a3) {
      return a3;
    }
    function noop() {
    }
    function nullTime() {
      return false;
    }
    function epochTime() {
      return Date.now();
    }
    function unixTime() {
      return Math.round(Date.now() / 1e3);
    }
    function isoTime() {
      return new Date(Date.now()).toISOString();
    }
    function pfGlobalThisOrFallback() {
      function defd(o4) {
        return typeof o4 !== "undefined" && o4;
      }
      try {
        if (typeof globalThis !== "undefined") return globalThis;
        Object.defineProperty(Object.prototype, "globalThis", {
          get: function() {
            delete Object.prototype.globalThis;
            return this.globalThis = this;
          },
          configurable: true
        });
        return globalThis;
      } catch (e2) {
        return defd(self) || defd(window) || defd(this) || {};
      }
    }
  }
});

// node_modules/@walletconnect/window-getters/dist/cjs/index.js
var require_cjs3 = __commonJS({
  "node_modules/@walletconnect/window-getters/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
    function getFromWindow(name2) {
      let res = void 0;
      if (typeof window !== "undefined" && typeof window[name2] !== "undefined") {
        res = window[name2];
      }
      return res;
    }
    exports.getFromWindow = getFromWindow;
    function getFromWindowOrThrow(name2) {
      const res = getFromWindow(name2);
      if (!res) {
        throw new Error(`${name2} is not defined in Window`);
      }
      return res;
    }
    exports.getFromWindowOrThrow = getFromWindowOrThrow;
    function getDocumentOrThrow() {
      return getFromWindowOrThrow("document");
    }
    exports.getDocumentOrThrow = getDocumentOrThrow;
    function getDocument() {
      return getFromWindow("document");
    }
    exports.getDocument = getDocument;
    function getNavigatorOrThrow() {
      return getFromWindowOrThrow("navigator");
    }
    exports.getNavigatorOrThrow = getNavigatorOrThrow;
    function getNavigator() {
      return getFromWindow("navigator");
    }
    exports.getNavigator = getNavigator;
    function getLocationOrThrow() {
      return getFromWindowOrThrow("location");
    }
    exports.getLocationOrThrow = getLocationOrThrow;
    function getLocation() {
      return getFromWindow("location");
    }
    exports.getLocation = getLocation;
    function getCryptoOrThrow() {
      return getFromWindowOrThrow("crypto");
    }
    exports.getCryptoOrThrow = getCryptoOrThrow;
    function getCrypto() {
      return getFromWindow("crypto");
    }
    exports.getCrypto = getCrypto;
    function getLocalStorageOrThrow() {
      return getFromWindowOrThrow("localStorage");
    }
    exports.getLocalStorageOrThrow = getLocalStorageOrThrow;
    function getLocalStorage() {
      return getFromWindow("localStorage");
    }
    exports.getLocalStorage = getLocalStorage;
  }
});

// node_modules/@walletconnect/window-metadata/dist/cjs/index.js
var require_cjs4 = __commonJS({
  "node_modules/@walletconnect/window-metadata/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWindowMetadata = void 0;
    var window_getters_1 = require_cjs3();
    function getWindowMetadata() {
      let doc;
      let loc;
      try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
      } catch (e2) {
        return null;
      }
      function getIcons() {
        const links = doc.getElementsByTagName("link");
        const icons2 = [];
        for (let i4 = 0; i4 < links.length; i4++) {
          const link = links[i4];
          const rel = link.getAttribute("rel");
          if (rel) {
            if (rel.toLowerCase().indexOf("icon") > -1) {
              const href = link.getAttribute("href");
              if (href) {
                if (href.toLowerCase().indexOf("https:") === -1 && href.toLowerCase().indexOf("http:") === -1 && href.indexOf("//") !== 0) {
                  let absoluteHref = loc.protocol + "//" + loc.host;
                  if (href.indexOf("/") === 0) {
                    absoluteHref += href;
                  } else {
                    const path = loc.pathname.split("/");
                    path.pop();
                    const finalPath = path.join("/");
                    absoluteHref += finalPath + "/" + href;
                  }
                  icons2.push(absoluteHref);
                } else if (href.indexOf("//") === 0) {
                  const absoluteUrl = loc.protocol + href;
                  icons2.push(absoluteUrl);
                } else {
                  icons2.push(href);
                }
              }
            }
          }
        }
        return icons2;
      }
      function getWindowMetadataOfAny(...args) {
        const metaTags = doc.getElementsByTagName("meta");
        for (let i4 = 0; i4 < metaTags.length; i4++) {
          const tag = metaTags[i4];
          const attributes = ["itemprop", "property", "name"].map((target) => tag.getAttribute(target)).filter((attr) => {
            if (attr) {
              return args.includes(attr);
            }
            return false;
          });
          if (attributes.length && attributes) {
            const content = tag.getAttribute("content");
            if (content) {
              return content;
            }
          }
        }
        return "";
      }
      function getName() {
        let name3 = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
        if (!name3) {
          name3 = doc.title;
        }
        return name3;
      }
      function getDescription() {
        const description2 = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
        return description2;
      }
      const name2 = getName();
      const description = getDescription();
      const url = loc.origin;
      const icons = getIcons();
      const meta = {
        description,
        url,
        icons,
        name: name2
      };
      return meta;
    }
    exports.getWindowMetadata = getWindowMetadata;
  }
});

// node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js
var tslib_es6_exports2 = {};
__export(tslib_es6_exports2, {
  __assign: () => __assign2,
  __asyncDelegator: () => __asyncDelegator2,
  __asyncGenerator: () => __asyncGenerator2,
  __asyncValues: () => __asyncValues2,
  __await: () => __await2,
  __awaiter: () => __awaiter2,
  __classPrivateFieldGet: () => __classPrivateFieldGet2,
  __classPrivateFieldSet: () => __classPrivateFieldSet2,
  __createBinding: () => __createBinding2,
  __decorate: () => __decorate2,
  __exportStar: () => __exportStar2,
  __extends: () => __extends2,
  __generator: () => __generator2,
  __importDefault: () => __importDefault2,
  __importStar: () => __importStar2,
  __makeTemplateObject: () => __makeTemplateObject2,
  __metadata: () => __metadata2,
  __param: () => __param2,
  __read: () => __read2,
  __rest: () => __rest2,
  __spread: () => __spread2,
  __spreadArrays: () => __spreadArrays2,
  __values: () => __values2
});
function __extends2(d5, b4) {
  extendStatics2(d5, b4);
  function __() {
    this.constructor = d5;
  }
  d5.prototype = b4 === null ? Object.create(b4) : (__.prototype = b4.prototype, new __());
}
function __rest2(s3, e2) {
  var t = {};
  for (var p4 in s3) if (Object.prototype.hasOwnProperty.call(s3, p4) && e2.indexOf(p4) < 0)
    t[p4] = s3[p4];
  if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i4 = 0, p4 = Object.getOwnPropertySymbols(s3); i4 < p4.length; i4++) {
      if (e2.indexOf(p4[i4]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p4[i4]))
        t[p4[i4]] = s3[p4[i4]];
    }
  return t;
}
function __decorate2(decorators, target, key, desc) {
  var c6 = arguments.length, r3 = c6 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d5;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r3 = Reflect.decorate(decorators, target, key, desc);
  else for (var i4 = decorators.length - 1; i4 >= 0; i4--) if (d5 = decorators[i4]) r3 = (c6 < 3 ? d5(r3) : c6 > 3 ? d5(target, key, r3) : d5(target, key)) || r3;
  return c6 > 3 && r3 && Object.defineProperty(target, key, r3), r3;
}
function __param2(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata2(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter2(thisArg, _arguments, P4, generator) {
  function adopt(value) {
    return value instanceof P4 ? value : new P4(function(resolve) {
      resolve(value);
    });
  }
  return new (P4 || (P4 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator2(thisArg, body) {
  var _5 = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f6, y4, t, g3;
  return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
    return this;
  }), g3;
  function verb(n5) {
    return function(v5) {
      return step([n5, v5]);
    };
  }
  function step(op) {
    if (f6) throw new TypeError("Generator is already executing.");
    while (_5) try {
      if (f6 = 1, y4 && (t = op[0] & 2 ? y4["return"] : op[0] ? y4["throw"] || ((t = y4["return"]) && t.call(y4), 0) : y4.next) && !(t = t.call(y4, op[1])).done) return t;
      if (y4 = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _5.label++;
          return { value: op[1], done: false };
        case 5:
          _5.label++;
          y4 = op[1];
          op = [0];
          continue;
        case 7:
          op = _5.ops.pop();
          _5.trys.pop();
          continue;
        default:
          if (!(t = _5.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _5 = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _5.label = op[1];
            break;
          }
          if (op[0] === 6 && _5.label < t[1]) {
            _5.label = t[1];
            t = op;
            break;
          }
          if (t && _5.label < t[2]) {
            _5.label = t[2];
            _5.ops.push(op);
            break;
          }
          if (t[2]) _5.ops.pop();
          _5.trys.pop();
          continue;
      }
      op = body.call(thisArg, _5);
    } catch (e2) {
      op = [6, e2];
      y4 = 0;
    } finally {
      f6 = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding2(o4, m3, k5, k22) {
  if (k22 === void 0) k22 = k5;
  o4[k22] = m3[k5];
}
function __exportStar2(m3, exports) {
  for (var p4 in m3) if (p4 !== "default" && !exports.hasOwnProperty(p4)) exports[p4] = m3[p4];
}
function __values2(o4) {
  var s3 = typeof Symbol === "function" && Symbol.iterator, m3 = s3 && o4[s3], i4 = 0;
  if (m3) return m3.call(o4);
  if (o4 && typeof o4.length === "number") return {
    next: function() {
      if (o4 && i4 >= o4.length) o4 = void 0;
      return { value: o4 && o4[i4++], done: !o4 };
    }
  };
  throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read2(o4, n5) {
  var m3 = typeof Symbol === "function" && o4[Symbol.iterator];
  if (!m3) return o4;
  var i4 = m3.call(o4), r3, ar4 = [], e2;
  try {
    while ((n5 === void 0 || n5-- > 0) && !(r3 = i4.next()).done) ar4.push(r3.value);
  } catch (error) {
    e2 = { error };
  } finally {
    try {
      if (r3 && !r3.done && (m3 = i4["return"])) m3.call(i4);
    } finally {
      if (e2) throw e2.error;
    }
  }
  return ar4;
}
function __spread2() {
  for (var ar4 = [], i4 = 0; i4 < arguments.length; i4++)
    ar4 = ar4.concat(__read2(arguments[i4]));
  return ar4;
}
function __spreadArrays2() {
  for (var s3 = 0, i4 = 0, il = arguments.length; i4 < il; i4++) s3 += arguments[i4].length;
  for (var r3 = Array(s3), k5 = 0, i4 = 0; i4 < il; i4++)
    for (var a3 = arguments[i4], j4 = 0, jl = a3.length; j4 < jl; j4++, k5++)
      r3[k5] = a3[j4];
  return r3;
}
function __await2(v5) {
  return this instanceof __await2 ? (this.v = v5, this) : new __await2(v5);
}
function __asyncGenerator2(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g3 = generator.apply(thisArg, _arguments || []), i4, q3 = [];
  return i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
    return this;
  }, i4;
  function verb(n5) {
    if (g3[n5]) i4[n5] = function(v5) {
      return new Promise(function(a3, b4) {
        q3.push([n5, v5, a3, b4]) > 1 || resume(n5, v5);
      });
    };
  }
  function resume(n5, v5) {
    try {
      step(g3[n5](v5));
    } catch (e2) {
      settle(q3[0][3], e2);
    }
  }
  function step(r3) {
    r3.value instanceof __await2 ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q3[0][2], r3);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f6, v5) {
    if (f6(v5), q3.shift(), q3.length) resume(q3[0][0], q3[0][1]);
  }
}
function __asyncDelegator2(o4) {
  var i4, p4;
  return i4 = {}, verb("next"), verb("throw", function(e2) {
    throw e2;
  }), verb("return"), i4[Symbol.iterator] = function() {
    return this;
  }, i4;
  function verb(n5, f6) {
    i4[n5] = o4[n5] ? function(v5) {
      return (p4 = !p4) ? { value: __await2(o4[n5](v5)), done: n5 === "return" } : f6 ? f6(v5) : v5;
    } : f6;
  }
}
function __asyncValues2(o4) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m3 = o4[Symbol.asyncIterator], i4;
  return m3 ? m3.call(o4) : (o4 = typeof __values2 === "function" ? __values2(o4) : o4[Symbol.iterator](), i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
    return this;
  }, i4);
  function verb(n5) {
    i4[n5] = o4[n5] && function(v5) {
      return new Promise(function(resolve, reject) {
        v5 = o4[n5](v5), settle(resolve, reject, v5.done, v5.value);
      });
    };
  }
  function settle(resolve, reject, d5, v5) {
    Promise.resolve(v5).then(function(v6) {
      resolve({ value: v6, done: d5 });
    }, reject);
  }
}
function __makeTemplateObject2(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar2(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) {
    for (var k5 in mod) if (Object.hasOwnProperty.call(mod, k5)) result[k5] = mod[k5];
  }
  result.default = mod;
  return result;
}
function __importDefault2(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet2(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet2(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics2, __assign2;
var init_tslib_es62 = __esm({
  "node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js"() {
    extendStatics2 = function(d5, b4) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d6, b5) {
        d6.__proto__ = b5;
      } || function(d6, b5) {
        for (var p4 in b5) if (b5.hasOwnProperty(p4)) d6[p4] = b5[p4];
      };
      return extendStatics2(d5, b4);
    };
    __assign2 = function() {
      __assign2 = Object.assign || function __assign3(t) {
        for (var s3, i4 = 1, n5 = arguments.length; i4 < n5; i4++) {
          s3 = arguments[i4];
          for (var p4 in s3) if (Object.prototype.hasOwnProperty.call(s3, p4)) t[p4] = s3[p4];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
  }
});

// node_modules/@walletconnect/environment/dist/cjs/crypto.js
var require_crypto = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;
    function getBrowerCrypto() {
      return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};
    }
    exports.getBrowerCrypto = getBrowerCrypto;
    function getSubtleCrypto() {
      const browserCrypto = getBrowerCrypto();
      return browserCrypto.subtle || browserCrypto.webkitSubtle;
    }
    exports.getSubtleCrypto = getSubtleCrypto;
    function isBrowserCryptoAvailable() {
      return !!getBrowerCrypto() && !!getSubtleCrypto();
    }
    exports.isBrowserCryptoAvailable = isBrowserCryptoAvailable;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/env.js
var require_env = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/env.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowser = exports.isNode = exports.isReactNative = void 0;
    function isReactNative() {
      return typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative";
    }
    exports.isReactNative = isReactNative;
    function isNode2() {
      return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    }
    exports.isNode = isNode2;
    function isBrowser() {
      return !isReactNative() && !isNode2();
    }
    exports.isBrowser = isBrowser;
  }
});

// node_modules/@walletconnect/environment/dist/cjs/index.js
var require_cjs5 = __commonJS({
  "node_modules/@walletconnect/environment/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es62(), __toCommonJS(tslib_es6_exports2));
    tslib_1.__exportStar(require_crypto(), exports);
    tslib_1.__exportStar(require_env(), exports);
  }
});

// node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/browser.js
var require_browser2 = __commonJS({
  "node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/browser.js"(exports, module) {
    "use strict";
    module.exports = function() {
      throw new Error(
        "ws does not work in the browser. Browser clients must use the native WebSocket object"
      );
    };
  }
});

// node_modules/@web3auth/wallet-connect-v2-adapter/node_modules/base-x/src/index.js
var require_src = __commonJS({
  "node_modules/@web3auth/wallet-connect-v2-adapter/node_modules/base-x/src/index.js"(exports, module) {
    "use strict";
    function base3(ALPHABET) {
      if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
      }
      var BASE_MAP = new Uint8Array(256);
      for (var j4 = 0; j4 < BASE_MAP.length; j4++) {
        BASE_MAP[j4] = 255;
      }
      for (var i4 = 0; i4 < ALPHABET.length; i4++) {
        var x7 = ALPHABET.charAt(i4);
        var xc = x7.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
          throw new TypeError(x7 + " is ambiguous");
        }
        BASE_MAP[xc] = i4;
      }
      var BASE = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256);
      var iFACTOR = Math.log(256) / Math.log(BASE);
      function encode6(source) {
        if (source instanceof Uint8Array) {
        } else if (ArrayBuffer.isView(source)) {
          source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        } else if (Array.isArray(source)) {
          source = Uint8Array.from(source);
        }
        if (!(source instanceof Uint8Array)) {
          throw new TypeError("Expected Uint8Array");
        }
        if (source.length === 0) {
          return "";
        }
        var zeroes = 0;
        var length2 = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
        var size2 = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size2);
        while (pbegin !== pend) {
          var carry = source[pbegin];
          var i5 = 0;
          for (var it1 = size2 - 1; (carry !== 0 || i5 < length2) && it1 !== -1; it1--, i5++) {
            carry += 256 * b58[it1] >>> 0;
            b58[it1] = carry % BASE >>> 0;
            carry = carry / BASE >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length2 = i5;
          pbegin++;
        }
        var it22 = size2 - length2;
        while (it22 !== size2 && b58[it22] === 0) {
          it22++;
        }
        var str = LEADER.repeat(zeroes);
        for (; it22 < size2; ++it22) {
          str += ALPHABET.charAt(b58[it22]);
        }
        return str;
      }
      function decodeUnsafe(source) {
        if (typeof source !== "string") {
          throw new TypeError("Expected String");
        }
        if (source.length === 0) {
          return new Uint8Array();
        }
        var psz = 0;
        var zeroes = 0;
        var length2 = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
        var size2 = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size2);
        while (source[psz]) {
          var carry = BASE_MAP[source.charCodeAt(psz)];
          if (carry === 255) {
            return;
          }
          var i5 = 0;
          for (var it3 = size2 - 1; (carry !== 0 || i5 < length2) && it3 !== -1; it3--, i5++) {
            carry += BASE * b256[it3] >>> 0;
            b256[it3] = carry % 256 >>> 0;
            carry = carry / 256 >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length2 = i5;
          psz++;
        }
        var it4 = size2 - length2;
        while (it4 !== size2 && b256[it4] === 0) {
          it4++;
        }
        var vch = new Uint8Array(zeroes + (size2 - it4));
        var j5 = zeroes;
        while (it4 !== size2) {
          vch[j5++] = b256[it4++];
        }
        return vch;
      }
      function decode6(string2) {
        var buffer = decodeUnsafe(string2);
        if (buffer) {
          return buffer;
        }
        throw new Error("Non-base" + BASE + " character");
      }
      return {
        encode: encode6,
        decodeUnsafe,
        decode: decode6
      };
    }
    module.exports = base3;
  }
});

// node_modules/@web3auth/wallet-connect-v2-adapter/node_modules/bs58/index.js
var require_bs58 = __commonJS({
  "node_modules/@web3auth/wallet-connect-v2-adapter/node_modules/bs58/index.js"(exports, module) {
    var basex = require_src();
    var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    module.exports = basex(ALPHABET);
  }
});

// node_modules/@web3auth/solana-provider/node_modules/base-x/src/index.js
var require_src2 = __commonJS({
  "node_modules/@web3auth/solana-provider/node_modules/base-x/src/index.js"(exports, module) {
    "use strict";
    function base3(ALPHABET) {
      if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
      }
      var BASE_MAP = new Uint8Array(256);
      for (var j4 = 0; j4 < BASE_MAP.length; j4++) {
        BASE_MAP[j4] = 255;
      }
      for (var i4 = 0; i4 < ALPHABET.length; i4++) {
        var x7 = ALPHABET.charAt(i4);
        var xc = x7.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
          throw new TypeError(x7 + " is ambiguous");
        }
        BASE_MAP[xc] = i4;
      }
      var BASE = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256);
      var iFACTOR = Math.log(256) / Math.log(BASE);
      function encode6(source) {
        if (source instanceof Uint8Array) {
        } else if (ArrayBuffer.isView(source)) {
          source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        } else if (Array.isArray(source)) {
          source = Uint8Array.from(source);
        }
        if (!(source instanceof Uint8Array)) {
          throw new TypeError("Expected Uint8Array");
        }
        if (source.length === 0) {
          return "";
        }
        var zeroes = 0;
        var length2 = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
        var size2 = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size2);
        while (pbegin !== pend) {
          var carry = source[pbegin];
          var i5 = 0;
          for (var it1 = size2 - 1; (carry !== 0 || i5 < length2) && it1 !== -1; it1--, i5++) {
            carry += 256 * b58[it1] >>> 0;
            b58[it1] = carry % BASE >>> 0;
            carry = carry / BASE >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length2 = i5;
          pbegin++;
        }
        var it22 = size2 - length2;
        while (it22 !== size2 && b58[it22] === 0) {
          it22++;
        }
        var str = LEADER.repeat(zeroes);
        for (; it22 < size2; ++it22) {
          str += ALPHABET.charAt(b58[it22]);
        }
        return str;
      }
      function decodeUnsafe(source) {
        if (typeof source !== "string") {
          throw new TypeError("Expected String");
        }
        if (source.length === 0) {
          return new Uint8Array();
        }
        var psz = 0;
        var zeroes = 0;
        var length2 = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
        var size2 = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size2);
        while (source[psz]) {
          var carry = BASE_MAP[source.charCodeAt(psz)];
          if (carry === 255) {
            return;
          }
          var i5 = 0;
          for (var it3 = size2 - 1; (carry !== 0 || i5 < length2) && it3 !== -1; it3--, i5++) {
            carry += BASE * b256[it3] >>> 0;
            b256[it3] = carry % 256 >>> 0;
            carry = carry / 256 >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length2 = i5;
          psz++;
        }
        var it4 = size2 - length2;
        while (it4 !== size2 && b256[it4] === 0) {
          it4++;
        }
        var vch = new Uint8Array(zeroes + (size2 - it4));
        var j5 = zeroes;
        while (it4 !== size2) {
          vch[j5++] = b256[it4++];
        }
        return vch;
      }
      function decode6(string2) {
        var buffer = decodeUnsafe(string2);
        if (buffer) {
          return buffer;
        }
        throw new Error("Non-base" + BASE + " character");
      }
      return {
        encode: encode6,
        decodeUnsafe,
        decode: decode6
      };
    }
    module.exports = base3;
  }
});

// node_modules/@web3auth/solana-provider/node_modules/bs58/index.js
var require_bs582 = __commonJS({
  "node_modules/@web3auth/solana-provider/node_modules/bs58/index.js"(exports, module) {
    var basex = require_src2();
    var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    module.exports = basex(ALPHABET);
  }
});

// node_modules/@web3auth/wallet-connect-v2-adapter/dist/lib.esm/config.js
var DEFAULT_EIP155_METHODS = function(DEFAULT_EIP155_METHODS2) {
  DEFAULT_EIP155_METHODS2["ETH_SEND_TRANSACTION"] = "eth_sendTransaction";
  DEFAULT_EIP155_METHODS2["ETH_SIGN_TRANSACTION"] = "eth_signTransaction";
  DEFAULT_EIP155_METHODS2["ETH_SIGN"] = "eth_sign";
  DEFAULT_EIP155_METHODS2["PERSONAL_SIGN"] = "personal_sign";
  DEFAULT_EIP155_METHODS2["ETH_SIGN_TYPED_DATA"] = "eth_signTypedData";
  DEFAULT_EIP155_METHODS2["ETH_SIGN_TYPED_DATA_V3"] = "eth_signTypedData_v3";
  DEFAULT_EIP155_METHODS2["ETH_SIGN_TYPED_DATA_V4"] = "eth_signTypedData_v4";
  DEFAULT_EIP155_METHODS2["ADD_ETHEREUM_CHAIN"] = "wallet_addEthereumChain";
  DEFAULT_EIP155_METHODS2["SWITCH_ETHEREUM_CHAIN"] = "wallet_switchEthereumChain";
  return DEFAULT_EIP155_METHODS2;
}({});
var DEFAULT_SOLANA_METHODS = function(DEFAULT_SOLANA_METHODS2) {
  DEFAULT_SOLANA_METHODS2["SIGN_TRANSACTION"] = "solana_signTransaction";
  DEFAULT_SOLANA_METHODS2["SIGN_MESSAGE"] = "solana_signMessage";
  return DEFAULT_SOLANA_METHODS2;
}({});
var DEFAULT_EIP_155_EVENTS = function(DEFAULT_EIP_155_EVENTS2) {
  DEFAULT_EIP_155_EVENTS2["ETH_CHAIN_CHANGED"] = "chainChanged";
  DEFAULT_EIP_155_EVENTS2["ETH_ACCOUNTS_CHANGED"] = "accountsChanged";
  return DEFAULT_EIP_155_EVENTS2;
}({});
var DEFAULT_SOLANA_EVENTS = function(DEFAULT_SOLANA_EVENTS2) {
  DEFAULT_SOLANA_EVENTS2["SOL_CHAIN_CHANGED"] = "chainChanged";
  DEFAULT_SOLANA_EVENTS2["SOL_ACCOUNTS_CHANGED"] = "accountsChanged";
  return DEFAULT_SOLANA_EVENTS2;
}({});
var SOLANA_CAIP_CHAIN_MAP = {
  "0x65": "5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp",
  "0x66": "4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z",
  "0x67": "EtWTRABZaYq6iMfeYKouRu166VU2xqa1"
};
var getSiteName = (window2) => {
  const {
    document: document2
  } = window2;
  const siteName = document2.querySelector('head > meta[property="og:site_name"]');
  if (siteName) {
    return siteName.content;
  }
  const metaTitle = document2.querySelector('head > meta[name="title"]');
  if (metaTitle) {
    return metaTitle.content;
  }
  if (document2.title && document2.title.length > 0) {
    return document2.title;
  }
  return window2.location.hostname;
};
function imgExists(url) {
  return new Promise((resolve, reject) => {
    try {
      const img = document.createElement("img");
      img.onload = () => resolve(true);
      img.onerror = () => resolve(false);
      img.src = url;
    } catch (e2) {
      reject(e2);
    }
  });
}
async function getSiteIcon(window2) {
  const {
    document: document2
  } = window2;
  let icon = document2.querySelector('head > link[rel="shortcut icon"]');
  if (icon && await imgExists(icon.href)) {
    return icon.href;
  }
  icon = Array.from(document2.querySelectorAll('head > link[rel="icon"]')).find((_icon) => Boolean(_icon.href)) || null;
  if (icon && await imgExists(icon.href)) {
    return icon.href;
  }
  return null;
}
var getSiteMetadata = async () => ({
  name: getSiteName(window),
  icon: await getSiteIcon(window)
});
var getNamespacesFromChains = (chains) => {
  const supportedNamespaces = [];
  chains.forEach((chainId) => {
    const [namespace] = chainId.split(":");
    if (!supportedNamespaces.includes(namespace)) {
      supportedNamespaces.push(namespace);
    }
  });
  return supportedNamespaces;
};
var getSupportedMethodsByNamespace = (namespace) => {
  switch (namespace) {
    case CHAIN_NAMESPACES.EIP155:
      return Object.values(DEFAULT_EIP155_METHODS);
    case CHAIN_NAMESPACES.SOLANA:
      return Object.values(DEFAULT_SOLANA_METHODS);
    default:
      throw new Error(`No default methods for namespace: ${namespace}`);
  }
};
var getSupportedEventsByNamespace = (namespace) => {
  switch (namespace) {
    case CHAIN_NAMESPACES.EIP155:
      return Object.values(DEFAULT_EIP_155_EVENTS);
    case CHAIN_NAMESPACES.SOLANA:
      return Object.values(DEFAULT_SOLANA_EVENTS);
    default:
      throw new Error(`No default events for namespace: ${namespace}`);
  }
};
var getRequiredNamespaces = (chains) => {
  const selectedNamespaces = getNamespacesFromChains(chains);
  return Object.fromEntries(selectedNamespaces.map((namespace) => [namespace, {
    methods: getSupportedMethodsByNamespace(namespace),
    chains: chains.filter((chain) => chain.startsWith(namespace)),
    events: getSupportedEventsByNamespace(namespace)
  }]));
};
var getWalletConnectV2Settings = async (namespace, chainIds, projectID) => {
  if (namespace === CHAIN_NAMESPACES.EIP155 || namespace === CHAIN_NAMESPACES.SOLANA) {
    const appMetadata = await getSiteMetadata();
    const adapterSettings = {
      walletConnectInitOptions: {
        projectId: projectID,
        relayUrl: "wss://relay.walletconnect.com",
        metadata: {
          name: appMetadata.name,
          description: appMetadata.name,
          url: window.location.origin,
          icons: [appMetadata.icon || ""]
        }
      }
    };
    const chainNamespaces = chainIds.map((chainId) => {
      return `${namespace}:${namespace === CHAIN_NAMESPACES.SOLANA ? SOLANA_CAIP_CHAIN_MAP[chainId] : parseInt(chainId, 16)}`;
    });
    const loginSettings = {
      optionalNamespaces: getRequiredNamespaces(chainNamespaces)
    };
    return {
      adapterSettings,
      loginSettings
    };
  }
  throw new Error(`Unsupported chain namespace: ${namespace}`);
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_events7 = __toESM(require_events());

// node_modules/@walletconnect/heartbeat/dist/index.es.js
var import_events = __toESM(require_events());
var import_time = __toESM(require_cjs2());

// node_modules/@walletconnect/events/dist/esm/events.js
var IEvents = class {
};

// node_modules/@walletconnect/heartbeat/dist/index.es.js
var n = class extends IEvents {
  constructor(e2) {
    super();
  }
};
var s = import_time.FIVE_SECONDS;
var r = { pulse: "heartbeat_pulse" };
var i = class _i2 extends n {
  constructor(e2) {
    super(e2), this.events = new import_events.EventEmitter(), this.interval = s, this.interval = (e2 == null ? void 0 : e2.interval) || s;
  }
  static async init(e2) {
    const t = new _i2(e2);
    return await t.init(), t;
  }
  async init() {
    await this.initialize();
  }
  stop() {
    clearInterval(this.intervalRef);
  }
  on(e2, t) {
    this.events.on(e2, t);
  }
  once(e2, t) {
    this.events.once(e2, t);
  }
  off(e2, t) {
    this.events.off(e2, t);
  }
  removeListener(e2, t) {
    this.events.removeListener(e2, t);
  }
  async initialize() {
    this.intervalRef = setInterval(() => this.pulse(), (0, import_time.toMiliseconds)(this.interval));
  }
  pulse() {
    this.events.emit(r.pulse);
  }
};

// node_modules/destr/dist/index.mjs
var suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/;
var suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
var JsonSigRx = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
function jsonParseTransform(key, value) {
  if (key === "__proto__" || key === "constructor" && value && typeof value === "object" && "prototype" in value) {
    warnKeyDropped(key);
    return;
  }
  return value;
}
function warnKeyDropped(key) {
  console.warn(`[destr] Dropping "${key}" key to prevent prototype pollution.`);
}
function destr(value, options = {}) {
  if (typeof value !== "string") {
    return value;
  }
  const _value = value.trim();
  if (
    // eslint-disable-next-line unicorn/prefer-at
    value[0] === '"' && value.endsWith('"') && !value.includes("\\")
  ) {
    return _value.slice(1, -1);
  }
  if (_value.length <= 9) {
    const _lval = _value.toLowerCase();
    if (_lval === "true") {
      return true;
    }
    if (_lval === "false") {
      return false;
    }
    if (_lval === "undefined") {
      return void 0;
    }
    if (_lval === "null") {
      return null;
    }
    if (_lval === "nan") {
      return Number.NaN;
    }
    if (_lval === "infinity") {
      return Number.POSITIVE_INFINITY;
    }
    if (_lval === "-infinity") {
      return Number.NEGATIVE_INFINITY;
    }
  }
  if (!JsonSigRx.test(value)) {
    if (options.strict) {
      throw new SyntaxError("[destr] Invalid JSON");
    }
    return value;
  }
  try {
    if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {
      if (options.strict) {
        throw new Error("[destr] Possible prototype pollution");
      }
      return JSON.parse(value, jsonParseTransform);
    }
    return JSON.parse(value);
  } catch (error) {
    if (options.strict) {
      throw error;
    }
    return value;
  }
}

// node_modules/unstorage/dist/shared/unstorage.d569726e.mjs
function wrapToPromise(value) {
  if (!value || typeof value.then !== "function") {
    return Promise.resolve(value);
  }
  return value;
}
function asyncCall(function_, ...arguments_) {
  try {
    return wrapToPromise(function_(...arguments_));
  } catch (error) {
    return Promise.reject(error);
  }
}
function isPrimitive(value) {
  const type = typeof value;
  return value === null || type !== "object" && type !== "function";
}
function isPureObject(value) {
  const proto = Object.getPrototypeOf(value);
  return !proto || proto.isPrototypeOf(Object);
}
function stringify(value) {
  if (isPrimitive(value)) {
    return String(value);
  }
  if (isPureObject(value) || Array.isArray(value)) {
    return JSON.stringify(value);
  }
  if (typeof value.toJSON === "function") {
    return stringify(value.toJSON());
  }
  throw new Error("[unstorage] Cannot stringify value!");
}
function checkBufferSupport() {
  if (typeof Buffer === "undefined") {
    throw new TypeError("[unstorage] Buffer is not supported!");
  }
}
var BASE64_PREFIX = "base64:";
function serializeRaw(value) {
  if (typeof value === "string") {
    return value;
  }
  checkBufferSupport();
  const base642 = Buffer.from(value).toString("base64");
  return BASE64_PREFIX + base642;
}
function deserializeRaw(value) {
  if (typeof value !== "string") {
    return value;
  }
  if (!value.startsWith(BASE64_PREFIX)) {
    return value;
  }
  checkBufferSupport();
  return Buffer.from(value.slice(BASE64_PREFIX.length), "base64");
}
function normalizeKey(key) {
  if (!key) {
    return "";
  }
  return key.split("?")[0].replace(/[/\\]/g, ":").replace(/:+/g, ":").replace(/^:|:$/g, "");
}
function joinKeys(...keys2) {
  return normalizeKey(keys2.join(":"));
}
function normalizeBaseKey(base3) {
  base3 = normalizeKey(base3);
  return base3 ? base3 + ":" : "";
}

// node_modules/unstorage/dist/index.mjs
function defineDriver(factory) {
  return factory;
}
var DRIVER_NAME = "memory";
var memory = defineDriver(() => {
  const data = /* @__PURE__ */ new Map();
  return {
    name: DRIVER_NAME,
    getInstance: () => data,
    hasItem(key) {
      return data.has(key);
    },
    getItem(key) {
      return data.get(key) ?? null;
    },
    getItemRaw(key) {
      return data.get(key) ?? null;
    },
    setItem(key, value) {
      data.set(key, value);
    },
    setItemRaw(key, value) {
      data.set(key, value);
    },
    removeItem(key) {
      data.delete(key);
    },
    getKeys() {
      return [...data.keys()];
    },
    clear() {
      data.clear();
    },
    dispose() {
      data.clear();
    }
  };
});
function createStorage(options = {}) {
  const context = {
    mounts: { "": options.driver || memory() },
    mountpoints: [""],
    watching: false,
    watchListeners: [],
    unwatch: {}
  };
  const getMount = (key) => {
    for (const base3 of context.mountpoints) {
      if (key.startsWith(base3)) {
        return {
          base: base3,
          relativeKey: key.slice(base3.length),
          driver: context.mounts[base3]
        };
      }
    }
    return {
      base: "",
      relativeKey: key,
      driver: context.mounts[""]
    };
  };
  const getMounts = (base3, includeParent) => {
    return context.mountpoints.filter(
      (mountpoint) => mountpoint.startsWith(base3) || includeParent && base3.startsWith(mountpoint)
    ).map((mountpoint) => ({
      relativeBase: base3.length > mountpoint.length ? base3.slice(mountpoint.length) : void 0,
      mountpoint,
      driver: context.mounts[mountpoint]
    }));
  };
  const onChange = (event, key) => {
    if (!context.watching) {
      return;
    }
    key = normalizeKey(key);
    for (const listener of context.watchListeners) {
      listener(event, key);
    }
  };
  const startWatch = async () => {
    if (context.watching) {
      return;
    }
    context.watching = true;
    for (const mountpoint in context.mounts) {
      context.unwatch[mountpoint] = await watch(
        context.mounts[mountpoint],
        onChange,
        mountpoint
      );
    }
  };
  const stopWatch = async () => {
    if (!context.watching) {
      return;
    }
    for (const mountpoint in context.unwatch) {
      await context.unwatch[mountpoint]();
    }
    context.unwatch = {};
    context.watching = false;
  };
  const runBatch = (items, commonOptions, cb) => {
    const batches = /* @__PURE__ */ new Map();
    const getBatch = (mount) => {
      let batch = batches.get(mount.base);
      if (!batch) {
        batch = {
          driver: mount.driver,
          base: mount.base,
          items: []
        };
        batches.set(mount.base, batch);
      }
      return batch;
    };
    for (const item of items) {
      const isStringItem = typeof item === "string";
      const key = normalizeKey(isStringItem ? item : item.key);
      const value = isStringItem ? void 0 : item.value;
      const options2 = isStringItem || !item.options ? commonOptions : { ...commonOptions, ...item.options };
      const mount = getMount(key);
      getBatch(mount).items.push({
        key,
        value,
        relativeKey: mount.relativeKey,
        options: options2
      });
    }
    return Promise.all([...batches.values()].map((batch) => cb(batch))).then(
      (r3) => r3.flat()
    );
  };
  const storage = {
    // Item
    hasItem(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      return asyncCall(driver.hasItem, relativeKey, opts);
    },
    getItem(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => destr(value)
      );
    },
    getItems(items, commonOptions) {
      return runBatch(items, commonOptions, (batch) => {
        if (batch.driver.getItems) {
          return asyncCall(
            batch.driver.getItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              options: item.options
            })),
            commonOptions
          ).then(
            (r3) => r3.map((item) => ({
              key: joinKeys(batch.base, item.key),
              value: destr(item.value)
            }))
          );
        }
        return Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.getItem,
              item.relativeKey,
              item.options
            ).then((value) => ({
              key: item.key,
              value: destr(value)
            }));
          })
        );
      });
    },
    getItemRaw(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (driver.getItemRaw) {
        return asyncCall(driver.getItemRaw, relativeKey, opts);
      }
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => deserializeRaw(value)
      );
    },
    async setItem(key, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key);
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (!driver.setItem) {
        return;
      }
      await asyncCall(driver.setItem, relativeKey, stringify(value), opts);
      if (!driver.watch) {
        onChange("update", key);
      }
    },
    async setItems(items, commonOptions) {
      await runBatch(items, commonOptions, async (batch) => {
        if (batch.driver.setItems) {
          return asyncCall(
            batch.driver.setItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              value: stringify(item.value),
              options: item.options
            })),
            commonOptions
          );
        }
        if (!batch.driver.setItem) {
          return;
        }
        await Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.setItem,
              item.relativeKey,
              stringify(item.value),
              item.options
            );
          })
        );
      });
    },
    async setItemRaw(key, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key, opts);
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (driver.setItemRaw) {
        await asyncCall(driver.setItemRaw, relativeKey, value, opts);
      } else if (driver.setItem) {
        await asyncCall(driver.setItem, relativeKey, serializeRaw(value), opts);
      } else {
        return;
      }
      if (!driver.watch) {
        onChange("update", key);
      }
    },
    async removeItem(key, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { removeMeta: opts };
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (!driver.removeItem) {
        return;
      }
      await asyncCall(driver.removeItem, relativeKey, opts);
      if (opts.removeMeta || opts.removeMata) {
        await asyncCall(driver.removeItem, relativeKey + "$", opts);
      }
      if (!driver.watch) {
        onChange("remove", key);
      }
    },
    // Meta
    async getMeta(key, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { nativeOnly: opts };
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      const meta = /* @__PURE__ */ Object.create(null);
      if (driver.getMeta) {
        Object.assign(meta, await asyncCall(driver.getMeta, relativeKey, opts));
      }
      if (!opts.nativeOnly) {
        const value = await asyncCall(
          driver.getItem,
          relativeKey + "$",
          opts
        ).then((value_) => destr(value_));
        if (value && typeof value === "object") {
          if (typeof value.atime === "string") {
            value.atime = new Date(value.atime);
          }
          if (typeof value.mtime === "string") {
            value.mtime = new Date(value.mtime);
          }
          Object.assign(meta, value);
        }
      }
      return meta;
    },
    setMeta(key, value, opts = {}) {
      return this.setItem(key + "$", value, opts);
    },
    removeMeta(key, opts = {}) {
      return this.removeItem(key + "$", opts);
    },
    // Keys
    async getKeys(base3, opts = {}) {
      base3 = normalizeBaseKey(base3);
      const mounts = getMounts(base3, true);
      let maskedMounts = [];
      const allKeys = [];
      for (const mount of mounts) {
        const rawKeys = await asyncCall(
          mount.driver.getKeys,
          mount.relativeBase,
          opts
        );
        for (const key of rawKeys) {
          const fullKey = mount.mountpoint + normalizeKey(key);
          if (!maskedMounts.some((p4) => fullKey.startsWith(p4))) {
            allKeys.push(fullKey);
          }
        }
        maskedMounts = [
          mount.mountpoint,
          ...maskedMounts.filter((p4) => !p4.startsWith(mount.mountpoint))
        ];
      }
      return base3 ? allKeys.filter(
        (key) => key.startsWith(base3) && key[key.length - 1] !== "$"
      ) : allKeys.filter((key) => key[key.length - 1] !== "$");
    },
    // Utils
    async clear(base3, opts = {}) {
      base3 = normalizeBaseKey(base3);
      await Promise.all(
        getMounts(base3, false).map(async (m3) => {
          if (m3.driver.clear) {
            return asyncCall(m3.driver.clear, m3.relativeBase, opts);
          }
          if (m3.driver.removeItem) {
            const keys2 = await m3.driver.getKeys(m3.relativeBase || "", opts);
            return Promise.all(
              keys2.map((key) => m3.driver.removeItem(key, opts))
            );
          }
        })
      );
    },
    async dispose() {
      await Promise.all(
        Object.values(context.mounts).map((driver) => dispose(driver))
      );
    },
    async watch(callback) {
      await startWatch();
      context.watchListeners.push(callback);
      return async () => {
        context.watchListeners = context.watchListeners.filter(
          (listener) => listener !== callback
        );
        if (context.watchListeners.length === 0) {
          await stopWatch();
        }
      };
    },
    async unwatch() {
      context.watchListeners = [];
      await stopWatch();
    },
    // Mount
    mount(base3, driver) {
      base3 = normalizeBaseKey(base3);
      if (base3 && context.mounts[base3]) {
        throw new Error(`already mounted at ${base3}`);
      }
      if (base3) {
        context.mountpoints.push(base3);
        context.mountpoints.sort((a3, b4) => b4.length - a3.length);
      }
      context.mounts[base3] = driver;
      if (context.watching) {
        Promise.resolve(watch(driver, onChange, base3)).then((unwatcher) => {
          context.unwatch[base3] = unwatcher;
        }).catch(console.error);
      }
      return storage;
    },
    async unmount(base3, _dispose = true) {
      base3 = normalizeBaseKey(base3);
      if (!base3 || !context.mounts[base3]) {
        return;
      }
      if (context.watching && base3 in context.unwatch) {
        context.unwatch[base3]();
        delete context.unwatch[base3];
      }
      if (_dispose) {
        await dispose(context.mounts[base3]);
      }
      context.mountpoints = context.mountpoints.filter((key) => key !== base3);
      delete context.mounts[base3];
    },
    getMount(key = "") {
      key = normalizeKey(key) + ":";
      const m3 = getMount(key);
      return {
        driver: m3.driver,
        base: m3.base
      };
    },
    getMounts(base3 = "", opts = {}) {
      base3 = normalizeKey(base3);
      const mounts = getMounts(base3, opts.parents);
      return mounts.map((m3) => ({
        driver: m3.driver,
        base: m3.mountpoint
      }));
    },
    // Aliases
    keys: (base3, opts = {}) => storage.getKeys(base3, opts),
    get: (key, opts = {}) => storage.getItem(key, opts),
    set: (key, value, opts = {}) => storage.setItem(key, value, opts),
    has: (key, opts = {}) => storage.hasItem(key, opts),
    del: (key, opts = {}) => storage.removeItem(key, opts),
    remove: (key, opts = {}) => storage.removeItem(key, opts)
  };
  return storage;
}
function watch(driver, onChange, base3) {
  return driver.watch ? driver.watch((event, key) => onChange(event, base3 + key)) : () => {
  };
}
async function dispose(driver) {
  if (typeof driver.dispose === "function") {
    await asyncCall(driver.dispose);
  }
}

// node_modules/idb-keyval/dist/index.js
function promisifyRequest(request) {
  return new Promise((resolve, reject) => {
    request.oncomplete = request.onsuccess = () => resolve(request.result);
    request.onabort = request.onerror = () => reject(request.error);
  });
}
function createStore(dbName, storeName) {
  const request = indexedDB.open(dbName);
  request.onupgradeneeded = () => request.result.createObjectStore(storeName);
  const dbp = promisifyRequest(request);
  return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
}
var defaultGetStoreFunc;
function defaultGetStore() {
  if (!defaultGetStoreFunc) {
    defaultGetStoreFunc = createStore("keyval-store", "keyval");
  }
  return defaultGetStoreFunc;
}
function get(key, customStore = defaultGetStore()) {
  return customStore("readonly", (store) => promisifyRequest(store.get(key)));
}
function set(key, value, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.put(value, key);
    return promisifyRequest(store.transaction);
  });
}
function del(key, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.delete(key);
    return promisifyRequest(store.transaction);
  });
}
function clear(customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.clear();
    return promisifyRequest(store.transaction);
  });
}
function eachCursor(store, callback) {
  store.openCursor().onsuccess = function() {
    if (!this.result)
      return;
    callback(this.result);
    this.result.continue();
  };
  return promisifyRequest(store.transaction);
}
function keys(customStore = defaultGetStore()) {
  return customStore("readonly", (store) => {
    if (store.getAllKeys) {
      return promisifyRequest(store.getAllKeys());
    }
    const items = [];
    return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);
  });
}

// node_modules/@walletconnect/safe-json/dist/esm/index.js
var JSONStringify = (data) => JSON.stringify(data, (_5, value) => typeof value === "bigint" ? value.toString() + "n" : value);
var JSONParse = (json) => {
  const numbersBiggerThanMaxInt = /([\[:])?(\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\}\]])/g;
  const serializedData = json.replace(numbersBiggerThanMaxInt, '$1"$2n"$3');
  return JSON.parse(serializedData, (_5, value) => {
    const isCustomFormatBigInt = typeof value === "string" && value.match(/^\d+n$/);
    if (isCustomFormatBigInt)
      return BigInt(value.substring(0, value.length - 1));
    return value;
  });
};
function safeJsonParse(value) {
  if (typeof value !== "string") {
    throw new Error(`Cannot safe json parse value of type ${typeof value}`);
  }
  try {
    return JSONParse(value);
  } catch (_a) {
    return value;
  }
}
function safeJsonStringify(value) {
  return typeof value === "string" ? value : JSONStringify(value) || "";
}

// node_modules/@walletconnect/keyvaluestorage/dist/index.es.js
var x = "idb-keyval";
var z = (i4 = {}) => {
  const t = i4.base && i4.base.length > 0 ? `${i4.base}:` : "", e2 = (s3) => t + s3;
  let n5;
  return i4.dbName && i4.storeName && (n5 = createStore(i4.dbName, i4.storeName)), { name: x, options: i4, async hasItem(s3) {
    return !(typeof await get(e2(s3), n5) > "u");
  }, async getItem(s3) {
    return await get(e2(s3), n5) ?? null;
  }, setItem(s3, a3) {
    return set(e2(s3), a3, n5);
  }, removeItem(s3) {
    return del(e2(s3), n5);
  }, getKeys() {
    return keys(n5);
  }, clear() {
    return clear(n5);
  } };
};
var D = "WALLET_CONNECT_V2_INDEXED_DB";
var E = "keyvaluestorage";
var _ = class {
  constructor() {
    this.indexedDb = createStorage({ driver: z({ dbName: D, storeName: E }) });
  }
  async getKeys() {
    return this.indexedDb.getKeys();
  }
  async getEntries() {
    return (await this.indexedDb.getItems(await this.indexedDb.getKeys())).map((t) => [t.key, t.value]);
  }
  async getItem(t) {
    const e2 = await this.indexedDb.getItem(t);
    if (e2 !== null) return e2;
  }
  async setItem(t, e2) {
    await this.indexedDb.setItem(t, safeJsonStringify(e2));
  }
  async removeItem(t) {
    await this.indexedDb.removeItem(t);
  }
};
var l2 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
var c = { exports: {} };
(function() {
  let i4;
  function t() {
  }
  i4 = t, i4.prototype.getItem = function(e2) {
    return this.hasOwnProperty(e2) ? String(this[e2]) : null;
  }, i4.prototype.setItem = function(e2, n5) {
    this[e2] = String(n5);
  }, i4.prototype.removeItem = function(e2) {
    delete this[e2];
  }, i4.prototype.clear = function() {
    const e2 = this;
    Object.keys(e2).forEach(function(n5) {
      e2[n5] = void 0, delete e2[n5];
    });
  }, i4.prototype.key = function(e2) {
    return e2 = e2 || 0, Object.keys(this)[e2];
  }, i4.prototype.__defineGetter__("length", function() {
    return Object.keys(this).length;
  }), typeof l2 < "u" && l2.localStorage ? c.exports = l2.localStorage : typeof window < "u" && window.localStorage ? c.exports = window.localStorage : c.exports = new t();
})();
function k(i4) {
  var t;
  return [i4[0], safeJsonParse((t = i4[1]) != null ? t : "")];
}
var K = class {
  constructor() {
    this.localStorage = c.exports;
  }
  async getKeys() {
    return Object.keys(this.localStorage);
  }
  async getEntries() {
    return Object.entries(this.localStorage).map(k);
  }
  async getItem(t) {
    const e2 = this.localStorage.getItem(t);
    if (e2 !== null) return safeJsonParse(e2);
  }
  async setItem(t, e2) {
    this.localStorage.setItem(t, safeJsonStringify(e2));
  }
  async removeItem(t) {
    this.localStorage.removeItem(t);
  }
};
var N = "wc_storage_version";
var y = 1;
var O = async (i4, t, e2) => {
  const n5 = N, s3 = await t.getItem(n5);
  if (s3 && s3 >= y) {
    e2(t);
    return;
  }
  const a3 = await i4.getKeys();
  if (!a3.length) {
    e2(t);
    return;
  }
  const m3 = [];
  for (; a3.length; ) {
    const r3 = a3.shift();
    if (!r3) continue;
    const o4 = r3.toLowerCase();
    if (o4.includes("wc@") || o4.includes("walletconnect") || o4.includes("wc_") || o4.includes("wallet_connect")) {
      const f6 = await i4.getItem(r3);
      await t.setItem(r3, f6), m3.push(r3);
    }
  }
  await t.setItem(n5, y), e2(t), j(i4, m3);
};
var j = async (i4, t) => {
  t.length && t.forEach(async (e2) => {
    await i4.removeItem(e2);
  });
};
var h = class {
  constructor() {
    this.initialized = false, this.setInitialized = (e2) => {
      this.storage = e2, this.initialized = true;
    };
    const t = new K();
    this.storage = t;
    try {
      const e2 = new _();
      O(t, e2, this.setInitialized);
    } catch {
      this.initialized = true;
    }
  }
  async getKeys() {
    return await this.initialize(), this.storage.getKeys();
  }
  async getEntries() {
    return await this.initialize(), this.storage.getEntries();
  }
  async getItem(t) {
    return await this.initialize(), this.storage.getItem(t);
  }
  async setItem(t, e2) {
    return await this.initialize(), this.storage.setItem(t, e2);
  }
  async removeItem(t) {
    return await this.initialize(), this.storage.removeItem(t);
  }
  async initialize() {
    this.initialized || await new Promise((t) => {
      const e2 = setInterval(() => {
        this.initialized && (clearInterval(e2), t());
      }, 20);
    });
  }
};

// node_modules/@walletconnect/logger/dist/index.es.js
var import_pino = __toESM(require_browser());
var import_pino2 = __toESM(require_browser());
var c2 = { level: "info" };
var n2 = "custom_context";
var l3 = 1e3 * 1024;
var O2 = class {
  constructor(e2) {
    this.nodeValue = e2, this.sizeInBytes = new TextEncoder().encode(this.nodeValue).length, this.next = null;
  }
  get value() {
    return this.nodeValue;
  }
  get size() {
    return this.sizeInBytes;
  }
};
var d = class {
  constructor(e2) {
    this.head = null, this.tail = null, this.lengthInNodes = 0, this.maxSizeInBytes = e2, this.sizeInBytes = 0;
  }
  append(e2) {
    const t = new O2(e2);
    if (t.size > this.maxSizeInBytes) throw new Error(`[LinkedList] Value too big to insert into list: ${e2} with size ${t.size}`);
    for (; this.size + t.size > this.maxSizeInBytes; ) this.shift();
    this.head ? (this.tail && (this.tail.next = t), this.tail = t) : (this.head = t, this.tail = t), this.lengthInNodes++, this.sizeInBytes += t.size;
  }
  shift() {
    if (!this.head) return;
    const e2 = this.head;
    this.head = this.head.next, this.head || (this.tail = null), this.lengthInNodes--, this.sizeInBytes -= e2.size;
  }
  toArray() {
    const e2 = [];
    let t = this.head;
    for (; t !== null; ) e2.push(t.value), t = t.next;
    return e2;
  }
  get length() {
    return this.lengthInNodes;
  }
  get size() {
    return this.sizeInBytes;
  }
  toOrderedArray() {
    return Array.from(this);
  }
  [Symbol.iterator]() {
    let e2 = this.head;
    return { next: () => {
      if (!e2) return { done: true, value: null };
      const t = e2.value;
      return e2 = e2.next, { done: false, value: t };
    } };
  }
};
var L = class {
  constructor(e2, t = l3) {
    this.level = e2 ?? "error", this.levelValue = import_pino.levels.values[this.level], this.MAX_LOG_SIZE_IN_BYTES = t, this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);
  }
  forwardToConsole(e2, t) {
    t === import_pino.levels.values.error ? console.error(e2) : t === import_pino.levels.values.warn ? console.warn(e2) : t === import_pino.levels.values.debug ? console.debug(e2) : t === import_pino.levels.values.trace ? console.trace(e2) : console.log(e2);
  }
  appendToLogs(e2) {
    this.logs.append(safeJsonStringify({ timestamp: (/* @__PURE__ */ new Date()).toISOString(), log: e2 }));
    const t = typeof e2 == "string" ? JSON.parse(e2).level : e2.level;
    t >= this.levelValue && this.forwardToConsole(e2, t);
  }
  getLogs() {
    return this.logs;
  }
  clearLogs() {
    this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);
  }
  getLogArray() {
    return Array.from(this.logs);
  }
  logsToBlob(e2) {
    const t = this.getLogArray();
    return t.push(safeJsonStringify({ extraMetadata: e2 })), new Blob(t, { type: "application/json" });
  }
};
var m = class {
  constructor(e2, t = l3) {
    this.baseChunkLogger = new L(e2, t);
  }
  write(e2) {
    this.baseChunkLogger.appendToLogs(e2);
  }
  getLogs() {
    return this.baseChunkLogger.getLogs();
  }
  clearLogs() {
    this.baseChunkLogger.clearLogs();
  }
  getLogArray() {
    return this.baseChunkLogger.getLogArray();
  }
  logsToBlob(e2) {
    return this.baseChunkLogger.logsToBlob(e2);
  }
  downloadLogsBlobInBrowser(e2) {
    const t = URL.createObjectURL(this.logsToBlob(e2)), o4 = document.createElement("a");
    o4.href = t, o4.download = `walletconnect-logs-${(/* @__PURE__ */ new Date()).toISOString()}.txt`, document.body.appendChild(o4), o4.click(), document.body.removeChild(o4), URL.revokeObjectURL(t);
  }
};
var B = class {
  constructor(e2, t = l3) {
    this.baseChunkLogger = new L(e2, t);
  }
  write(e2) {
    this.baseChunkLogger.appendToLogs(e2);
  }
  getLogs() {
    return this.baseChunkLogger.getLogs();
  }
  clearLogs() {
    this.baseChunkLogger.clearLogs();
  }
  getLogArray() {
    return this.baseChunkLogger.getLogArray();
  }
  logsToBlob(e2) {
    return this.baseChunkLogger.logsToBlob(e2);
  }
};
var x2 = Object.defineProperty;
var S = Object.defineProperties;
var _2 = Object.getOwnPropertyDescriptors;
var p = Object.getOwnPropertySymbols;
var T = Object.prototype.hasOwnProperty;
var z2 = Object.prototype.propertyIsEnumerable;
var f = (r3, e2, t) => e2 in r3 ? x2(r3, e2, { enumerable: true, configurable: true, writable: true, value: t }) : r3[e2] = t;
var i2 = (r3, e2) => {
  for (var t in e2 || (e2 = {})) T.call(e2, t) && f(r3, t, e2[t]);
  if (p) for (var t of p(e2)) z2.call(e2, t) && f(r3, t, e2[t]);
  return r3;
};
var g = (r3, e2) => S(r3, _2(e2));
function k2(r3) {
  return g(i2({}, r3), { level: (r3 == null ? void 0 : r3.level) || c2.level });
}
function v(r3, e2 = n2) {
  return r3[e2] || "";
}
function b(r3, e2, t = n2) {
  return r3[t] = e2, r3;
}
function y2(r3, e2 = n2) {
  let t = "";
  return typeof r3.bindings > "u" ? t = v(r3, e2) : t = r3.bindings().context || "", t;
}
function w(r3, e2, t = n2) {
  const o4 = y2(r3, t);
  return o4.trim() ? `${o4}/${e2}` : e2;
}
function E2(r3, e2, t = n2) {
  const o4 = w(r3, e2, t), a3 = r3.child({ context: o4 });
  return b(a3, o4, t);
}
function C(r3) {
  var e2, t;
  const o4 = new m((e2 = r3.opts) == null ? void 0 : e2.level, r3.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g(i2({}, r3.opts), { level: "trace", browser: g(i2({}, (t = r3.opts) == null ? void 0 : t.browser), { write: (a3) => o4.write(a3) }) })), chunkLoggerController: o4 };
}
function I(r3) {
  var e2;
  const t = new B((e2 = r3.opts) == null ? void 0 : e2.level, r3.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g(i2({}, r3.opts), { level: "trace" }), t), chunkLoggerController: t };
}
function A(r3) {
  return typeof r3.loggerOverride < "u" && typeof r3.loggerOverride != "string" ? { logger: r3.loggerOverride, chunkLoggerController: null } : typeof window < "u" ? C(r3) : I(r3);
}

// node_modules/@walletconnect/types/dist/index.es.js
var import_events4 = __toESM(require_events());
var a2 = Object.defineProperty;
var u = (e2, s3, r3) => s3 in e2 ? a2(e2, s3, { enumerable: true, configurable: true, writable: true, value: r3 }) : e2[s3] = r3;
var c3 = (e2, s3, r3) => u(e2, typeof s3 != "symbol" ? s3 + "" : s3, r3);
var h3 = class extends IEvents {
  constructor(s3) {
    super(), this.opts = s3, c3(this, "protocol", "wc"), c3(this, "version", 2);
  }
};
var p2 = Object.defineProperty;
var b2 = (e2, s3, r3) => s3 in e2 ? p2(e2, s3, { enumerable: true, configurable: true, writable: true, value: r3 }) : e2[s3] = r3;
var v2 = (e2, s3, r3) => b2(e2, typeof s3 != "symbol" ? s3 + "" : s3, r3);
var I2 = class extends IEvents {
  constructor(s3, r3) {
    super(), this.core = s3, this.logger = r3, v2(this, "records", /* @__PURE__ */ new Map());
  }
};
var y3 = class {
  constructor(s3, r3) {
    this.logger = s3, this.core = r3;
  }
};
var m2 = class extends IEvents {
  constructor(s3, r3) {
    super(), this.relayer = s3, this.logger = r3;
  }
};
var d2 = class extends IEvents {
  constructor(s3) {
    super();
  }
};
var f2 = class {
  constructor(s3, r3, t, q3) {
    this.core = s3, this.logger = r3, this.name = t;
  }
};
var P = class extends IEvents {
  constructor(s3, r3) {
    super(), this.relayer = s3, this.logger = r3;
  }
};
var S2 = class extends IEvents {
  constructor(s3, r3) {
    super(), this.core = s3, this.logger = r3;
  }
};
var M = class {
  constructor(s3, r3, t) {
    this.core = s3, this.logger = r3, this.store = t;
  }
};
var O3 = class {
  constructor(s3, r3) {
    this.projectId = s3, this.logger = r3;
  }
};
var R = class {
  constructor(s3, r3, t) {
    this.core = s3, this.logger = r3, this.telemetryEnabled = t;
  }
};
var T2 = Object.defineProperty;
var k3 = (e2, s3, r3) => s3 in e2 ? T2(e2, s3, { enumerable: true, configurable: true, writable: true, value: r3 }) : e2[s3] = r3;
var i3 = (e2, s3, r3) => k3(e2, typeof s3 != "symbol" ? s3 + "" : s3, r3);
var J = class {
  constructor(s3) {
    this.opts = s3, i3(this, "protocol", "wc"), i3(this, "version", 2);
  }
};
var V = class {
  constructor(s3) {
    this.client = s3;
  }
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_time4 = __toESM(require_cjs2());

// node_modules/@walletconnect/relay-auth/dist/index.es.js
var import_time2 = __toESM(require_cjs2());
function En(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function fe(t, ...e2) {
  if (!En(t)) throw new Error("Uint8Array expected");
  if (e2.length > 0 && !e2.includes(t.length)) throw new Error("Uint8Array expected of length " + e2 + ", got length=" + t.length);
}
function De(t, e2 = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e2 && t.finished) throw new Error("Hash#digest() has already been called");
}
function gn(t, e2) {
  fe(t);
  const n5 = e2.outputLen;
  if (t.length < n5) throw new Error("digestInto() expects output buffer of length at least " + n5);
}
var it = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
var _t = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength);
function yn(t) {
  if (typeof t != "string") throw new Error("utf8ToBytes expected string, got " + typeof t);
  return new Uint8Array(new TextEncoder().encode(t));
}
function de(t) {
  return typeof t == "string" && (t = yn(t)), fe(t), t;
}
var xn = class {
  clone() {
    return this._cloneInto();
  }
};
function Bn(t) {
  const e2 = (r3) => t().update(de(r3)).digest(), n5 = t();
  return e2.outputLen = n5.outputLen, e2.blockLen = n5.blockLen, e2.create = () => t(), e2;
}
function he(t = 32) {
  if (it && typeof it.getRandomValues == "function") return it.getRandomValues(new Uint8Array(t));
  if (it && typeof it.randomBytes == "function") return it.randomBytes(t);
  throw new Error("crypto.getRandomValues must be defined");
}
function Cn(t, e2, n5, r3) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e2, n5, r3);
  const o4 = BigInt(32), s3 = BigInt(4294967295), a3 = Number(n5 >> o4 & s3), u2 = Number(n5 & s3), i4 = r3 ? 4 : 0, D3 = r3 ? 0 : 4;
  t.setUint32(e2 + i4, a3, r3), t.setUint32(e2 + D3, u2, r3);
}
var An = class extends xn {
  constructor(e2, n5, r3, o4) {
    super(), this.blockLen = e2, this.outputLen = n5, this.padOffset = r3, this.isLE = o4, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(e2), this.view = _t(this.buffer);
  }
  update(e2) {
    De(this);
    const { view: n5, buffer: r3, blockLen: o4 } = this;
    e2 = de(e2);
    const s3 = e2.length;
    for (let a3 = 0; a3 < s3; ) {
      const u2 = Math.min(o4 - this.pos, s3 - a3);
      if (u2 === o4) {
        const i4 = _t(e2);
        for (; o4 <= s3 - a3; a3 += o4) this.process(i4, a3);
        continue;
      }
      r3.set(e2.subarray(a3, a3 + u2), this.pos), this.pos += u2, a3 += u2, this.pos === o4 && (this.process(n5, 0), this.pos = 0);
    }
    return this.length += e2.length, this.roundClean(), this;
  }
  digestInto(e2) {
    De(this), gn(e2, this), this.finished = true;
    const { buffer: n5, view: r3, blockLen: o4, isLE: s3 } = this;
    let { pos: a3 } = this;
    n5[a3++] = 128, this.buffer.subarray(a3).fill(0), this.padOffset > o4 - a3 && (this.process(r3, 0), a3 = 0);
    for (let l6 = a3; l6 < o4; l6++) n5[l6] = 0;
    Cn(r3, o4 - 8, BigInt(this.length * 8), s3), this.process(r3, 0);
    const u2 = _t(e2), i4 = this.outputLen;
    if (i4 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const D3 = i4 / 4, c6 = this.get();
    if (D3 > c6.length) throw new Error("_sha2: outputLen bigger than state");
    for (let l6 = 0; l6 < D3; l6++) u2.setUint32(4 * l6, c6[l6], s3);
  }
  digest() {
    const { buffer: e2, outputLen: n5 } = this;
    this.digestInto(e2);
    const r3 = e2.slice(0, n5);
    return this.destroy(), r3;
  }
  _cloneInto(e2) {
    e2 || (e2 = new this.constructor()), e2.set(...this.get());
    const { blockLen: n5, buffer: r3, length: o4, finished: s3, destroyed: a3, pos: u2 } = this;
    return e2.length = o4, e2.pos = u2, e2.finished = s3, e2.destroyed = a3, o4 % n5 && e2.buffer.set(r3), e2;
  }
};
var wt = BigInt(2 ** 32 - 1);
var St = BigInt(32);
function le(t, e2 = false) {
  return e2 ? { h: Number(t & wt), l: Number(t >> St & wt) } : { h: Number(t >> St & wt) | 0, l: Number(t & wt) | 0 };
}
function mn(t, e2 = false) {
  let n5 = new Uint32Array(t.length), r3 = new Uint32Array(t.length);
  for (let o4 = 0; o4 < t.length; o4++) {
    const { h: s3, l: a3 } = le(t[o4], e2);
    [n5[o4], r3[o4]] = [s3, a3];
  }
  return [n5, r3];
}
var _n = (t, e2) => BigInt(t >>> 0) << St | BigInt(e2 >>> 0);
var Sn = (t, e2, n5) => t >>> n5;
var vn = (t, e2, n5) => t << 32 - n5 | e2 >>> n5;
var In = (t, e2, n5) => t >>> n5 | e2 << 32 - n5;
var Un = (t, e2, n5) => t << 32 - n5 | e2 >>> n5;
var Tn = (t, e2, n5) => t << 64 - n5 | e2 >>> n5 - 32;
var Fn = (t, e2, n5) => t >>> n5 - 32 | e2 << 64 - n5;
var Nn = (t, e2) => e2;
var Ln = (t, e2) => t;
var On = (t, e2, n5) => t << n5 | e2 >>> 32 - n5;
var Hn = (t, e2, n5) => e2 << n5 | t >>> 32 - n5;
var zn = (t, e2, n5) => e2 << n5 - 32 | t >>> 64 - n5;
var Mn = (t, e2, n5) => t << n5 - 32 | e2 >>> 64 - n5;
function qn(t, e2, n5, r3) {
  const o4 = (e2 >>> 0) + (r3 >>> 0);
  return { h: t + n5 + (o4 / 2 ** 32 | 0) | 0, l: o4 | 0 };
}
var $n = (t, e2, n5) => (t >>> 0) + (e2 >>> 0) + (n5 >>> 0);
var kn = (t, e2, n5, r3) => e2 + n5 + r3 + (t / 2 ** 32 | 0) | 0;
var Rn = (t, e2, n5, r3) => (t >>> 0) + (e2 >>> 0) + (n5 >>> 0) + (r3 >>> 0);
var jn = (t, e2, n5, r3, o4) => e2 + n5 + r3 + o4 + (t / 2 ** 32 | 0) | 0;
var Zn = (t, e2, n5, r3, o4) => (t >>> 0) + (e2 >>> 0) + (n5 >>> 0) + (r3 >>> 0) + (o4 >>> 0);
var Gn = (t, e2, n5, r3, o4, s3) => e2 + n5 + r3 + o4 + s3 + (t / 2 ** 32 | 0) | 0;
var x3 = { fromBig: le, split: mn, toBig: _n, shrSH: Sn, shrSL: vn, rotrSH: In, rotrSL: Un, rotrBH: Tn, rotrBL: Fn, rotr32H: Nn, rotr32L: Ln, rotlSH: On, rotlSL: Hn, rotlBH: zn, rotlBL: Mn, add: qn, add3L: $n, add3H: kn, add4L: Rn, add4H: jn, add5H: Gn, add5L: Zn };
var [Vn, Yn] = (() => x3.split(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t) => BigInt(t))))();
var P2 = new Uint32Array(80);
var Q = new Uint32Array(80);
var Jn = class extends An {
  constructor() {
    super(128, 64, 16, false), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  get() {
    const { Ah: e2, Al: n5, Bh: r3, Bl: o4, Ch: s3, Cl: a3, Dh: u2, Dl: i4, Eh: D3, El: c6, Fh: l6, Fl: p4, Gh: w3, Gl: h5, Hh: g3, Hl: S4 } = this;
    return [e2, n5, r3, o4, s3, a3, u2, i4, D3, c6, l6, p4, w3, h5, g3, S4];
  }
  set(e2, n5, r3, o4, s3, a3, u2, i4, D3, c6, l6, p4, w3, h5, g3, S4) {
    this.Ah = e2 | 0, this.Al = n5 | 0, this.Bh = r3 | 0, this.Bl = o4 | 0, this.Ch = s3 | 0, this.Cl = a3 | 0, this.Dh = u2 | 0, this.Dl = i4 | 0, this.Eh = D3 | 0, this.El = c6 | 0, this.Fh = l6 | 0, this.Fl = p4 | 0, this.Gh = w3 | 0, this.Gl = h5 | 0, this.Hh = g3 | 0, this.Hl = S4 | 0;
  }
  process(e2, n5) {
    for (let d5 = 0; d5 < 16; d5++, n5 += 4) P2[d5] = e2.getUint32(n5), Q[d5] = e2.getUint32(n5 += 4);
    for (let d5 = 16; d5 < 80; d5++) {
      const m3 = P2[d5 - 15] | 0, F3 = Q[d5 - 15] | 0, q3 = x3.rotrSH(m3, F3, 1) ^ x3.rotrSH(m3, F3, 8) ^ x3.shrSH(m3, F3, 7), z5 = x3.rotrSL(m3, F3, 1) ^ x3.rotrSL(m3, F3, 8) ^ x3.shrSL(m3, F3, 7), I3 = P2[d5 - 2] | 0, O4 = Q[d5 - 2] | 0, ot2 = x3.rotrSH(I3, O4, 19) ^ x3.rotrBH(I3, O4, 61) ^ x3.shrSH(I3, O4, 6), tt2 = x3.rotrSL(I3, O4, 19) ^ x3.rotrBL(I3, O4, 61) ^ x3.shrSL(I3, O4, 6), st2 = x3.add4L(z5, tt2, Q[d5 - 7], Q[d5 - 16]), at2 = x3.add4H(st2, q3, ot2, P2[d5 - 7], P2[d5 - 16]);
      P2[d5] = at2 | 0, Q[d5] = st2 | 0;
    }
    let { Ah: r3, Al: o4, Bh: s3, Bl: a3, Ch: u2, Cl: i4, Dh: D3, Dl: c6, Eh: l6, El: p4, Fh: w3, Fl: h5, Gh: g3, Gl: S4, Hh: v5, Hl: L3 } = this;
    for (let d5 = 0; d5 < 80; d5++) {
      const m3 = x3.rotrSH(l6, p4, 14) ^ x3.rotrSH(l6, p4, 18) ^ x3.rotrBH(l6, p4, 41), F3 = x3.rotrSL(l6, p4, 14) ^ x3.rotrSL(l6, p4, 18) ^ x3.rotrBL(l6, p4, 41), q3 = l6 & w3 ^ ~l6 & g3, z5 = p4 & h5 ^ ~p4 & S4, I3 = x3.add5L(L3, F3, z5, Yn[d5], Q[d5]), O4 = x3.add5H(I3, v5, m3, q3, Vn[d5], P2[d5]), ot2 = I3 | 0, tt2 = x3.rotrSH(r3, o4, 28) ^ x3.rotrBH(r3, o4, 34) ^ x3.rotrBH(r3, o4, 39), st2 = x3.rotrSL(r3, o4, 28) ^ x3.rotrBL(r3, o4, 34) ^ x3.rotrBL(r3, o4, 39), at2 = r3 & s3 ^ r3 & u2 ^ s3 & u2, Ct3 = o4 & a3 ^ o4 & i4 ^ a3 & i4;
      v5 = g3 | 0, L3 = S4 | 0, g3 = w3 | 0, S4 = h5 | 0, w3 = l6 | 0, h5 = p4 | 0, { h: l6, l: p4 } = x3.add(D3 | 0, c6 | 0, O4 | 0, ot2 | 0), D3 = u2 | 0, c6 = i4 | 0, u2 = s3 | 0, i4 = a3 | 0, s3 = r3 | 0, a3 = o4 | 0;
      const At3 = x3.add3L(ot2, st2, Ct3);
      r3 = x3.add3H(At3, O4, tt2, at2), o4 = At3 | 0;
    }
    ({ h: r3, l: o4 } = x3.add(this.Ah | 0, this.Al | 0, r3 | 0, o4 | 0)), { h: s3, l: a3 } = x3.add(this.Bh | 0, this.Bl | 0, s3 | 0, a3 | 0), { h: u2, l: i4 } = x3.add(this.Ch | 0, this.Cl | 0, u2 | 0, i4 | 0), { h: D3, l: c6 } = x3.add(this.Dh | 0, this.Dl | 0, D3 | 0, c6 | 0), { h: l6, l: p4 } = x3.add(this.Eh | 0, this.El | 0, l6 | 0, p4 | 0), { h: w3, l: h5 } = x3.add(this.Fh | 0, this.Fl | 0, w3 | 0, h5 | 0), { h: g3, l: S4 } = x3.add(this.Gh | 0, this.Gl | 0, g3 | 0, S4 | 0), { h: v5, l: L3 } = x3.add(this.Hh | 0, this.Hl | 0, v5 | 0, L3 | 0), this.set(r3, o4, s3, a3, u2, i4, D3, c6, l6, p4, w3, h5, g3, S4, v5, L3);
  }
  roundClean() {
    P2.fill(0), Q.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Kn = Bn(() => new Jn());
var vt = BigInt(0);
var be = BigInt(1);
var Wn = BigInt(2);
function It(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function Ut(t) {
  if (!It(t)) throw new Error("Uint8Array expected");
}
function Tt(t, e2) {
  if (typeof e2 != "boolean") throw new Error(t + " boolean expected, got " + e2);
}
var Xn = Array.from({ length: 256 }, (t, e2) => e2.toString(16).padStart(2, "0"));
function Ft(t) {
  Ut(t);
  let e2 = "";
  for (let n5 = 0; n5 < t.length; n5++) e2 += Xn[t[n5]];
  return e2;
}
function pe(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  return t === "" ? vt : BigInt("0x" + t);
}
var K2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function we(t) {
  if (t >= K2._0 && t <= K2._9) return t - K2._0;
  if (t >= K2.A && t <= K2.F) return t - (K2.A - 10);
  if (t >= K2.a && t <= K2.f) return t - (K2.a - 10);
}
function Ee(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  const e2 = t.length, n5 = e2 / 2;
  if (e2 % 2) throw new Error("hex string expected, got unpadded hex of length " + e2);
  const r3 = new Uint8Array(n5);
  for (let o4 = 0, s3 = 0; o4 < n5; o4++, s3 += 2) {
    const a3 = we(t.charCodeAt(s3)), u2 = we(t.charCodeAt(s3 + 1));
    if (a3 === void 0 || u2 === void 0) {
      const i4 = t[s3] + t[s3 + 1];
      throw new Error('hex string expected, got non-hex character "' + i4 + '" at index ' + s3);
    }
    r3[o4] = a3 * 16 + u2;
  }
  return r3;
}
function Pn(t) {
  return pe(Ft(t));
}
function Et(t) {
  return Ut(t), pe(Ft(Uint8Array.from(t).reverse()));
}
function ge(t, e2) {
  return Ee(t.toString(16).padStart(e2 * 2, "0"));
}
function Nt(t, e2) {
  return ge(t, e2).reverse();
}
function W(t, e2, n5) {
  let r3;
  if (typeof e2 == "string") try {
    r3 = Ee(e2);
  } catch (s3) {
    throw new Error(t + " must be hex string or Uint8Array, cause: " + s3);
  }
  else if (It(e2)) r3 = Uint8Array.from(e2);
  else throw new Error(t + " must be hex string or Uint8Array");
  const o4 = r3.length;
  if (typeof n5 == "number" && o4 !== n5) throw new Error(t + " of length " + n5 + " expected, got " + o4);
  return r3;
}
function ye(...t) {
  let e2 = 0;
  for (let r3 = 0; r3 < t.length; r3++) {
    const o4 = t[r3];
    Ut(o4), e2 += o4.length;
  }
  const n5 = new Uint8Array(e2);
  for (let r3 = 0, o4 = 0; r3 < t.length; r3++) {
    const s3 = t[r3];
    n5.set(s3, o4), o4 += s3.length;
  }
  return n5;
}
var Lt = (t) => typeof t == "bigint" && vt <= t;
function Qn(t, e2, n5) {
  return Lt(t) && Lt(e2) && Lt(n5) && e2 <= t && t < n5;
}
function ft(t, e2, n5, r3) {
  if (!Qn(e2, n5, r3)) throw new Error("expected valid " + t + ": " + n5 + " <= n < " + r3 + ", got " + e2);
}
function tr(t) {
  let e2;
  for (e2 = 0; t > vt; t >>= be, e2 += 1) ;
  return e2;
}
var er = (t) => (Wn << BigInt(t - 1)) - be;
var nr = { bigint: (t) => typeof t == "bigint", function: (t) => typeof t == "function", boolean: (t) => typeof t == "boolean", string: (t) => typeof t == "string", stringOrUint8Array: (t) => typeof t == "string" || It(t), isSafeInteger: (t) => Number.isSafeInteger(t), array: (t) => Array.isArray(t), field: (t, e2) => e2.Fp.isValid(t), hash: (t) => typeof t == "function" && Number.isSafeInteger(t.outputLen) };
function Ot(t, e2, n5 = {}) {
  const r3 = (o4, s3, a3) => {
    const u2 = nr[s3];
    if (typeof u2 != "function") throw new Error("invalid validator function");
    const i4 = t[o4];
    if (!(a3 && i4 === void 0) && !u2(i4, t)) throw new Error("param " + String(o4) + " is invalid. Expected " + s3 + ", got " + i4);
  };
  for (const [o4, s3] of Object.entries(e2)) r3(o4, s3, false);
  for (const [o4, s3] of Object.entries(n5)) r3(o4, s3, true);
  return t;
}
function xe(t) {
  const e2 = /* @__PURE__ */ new WeakMap();
  return (n5, ...r3) => {
    const o4 = e2.get(n5);
    if (o4 !== void 0) return o4;
    const s3 = t(n5, ...r3);
    return e2.set(n5, s3), s3;
  };
}
var M2 = BigInt(0);
var N2 = BigInt(1);
var nt = BigInt(2);
var rr = BigInt(3);
var Ht = BigInt(4);
var Be = BigInt(5);
var Ce = BigInt(8);
function H(t, e2) {
  const n5 = t % e2;
  return n5 >= M2 ? n5 : e2 + n5;
}
function or(t, e2, n5) {
  if (e2 < M2) throw new Error("invalid exponent, negatives unsupported");
  if (n5 <= M2) throw new Error("invalid modulus");
  if (n5 === N2) return M2;
  let r3 = N2;
  for (; e2 > M2; ) e2 & N2 && (r3 = r3 * t % n5), t = t * t % n5, e2 >>= N2;
  return r3;
}
function J2(t, e2, n5) {
  let r3 = t;
  for (; e2-- > M2; ) r3 *= r3, r3 %= n5;
  return r3;
}
function Ae(t, e2) {
  if (t === M2) throw new Error("invert: expected non-zero number");
  if (e2 <= M2) throw new Error("invert: expected positive modulus, got " + e2);
  let n5 = H(t, e2), r3 = e2, o4 = M2, s3 = N2;
  for (; n5 !== M2; ) {
    const u2 = r3 / n5, i4 = r3 % n5, D3 = o4 - s3 * u2;
    r3 = n5, n5 = i4, o4 = s3, s3 = D3;
  }
  if (r3 !== N2) throw new Error("invert: does not exist");
  return H(o4, e2);
}
function sr(t) {
  const e2 = (t - N2) / nt;
  let n5, r3, o4;
  for (n5 = t - N2, r3 = 0; n5 % nt === M2; n5 /= nt, r3++) ;
  for (o4 = nt; o4 < t && or(o4, e2, t) !== t - N2; o4++) if (o4 > 1e3) throw new Error("Cannot find square root: likely non-prime P");
  if (r3 === 1) {
    const a3 = (t + N2) / Ht;
    return function(i4, D3) {
      const c6 = i4.pow(D3, a3);
      if (!i4.eql(i4.sqr(c6), D3)) throw new Error("Cannot find square root");
      return c6;
    };
  }
  const s3 = (n5 + N2) / nt;
  return function(u2, i4) {
    if (u2.pow(i4, e2) === u2.neg(u2.ONE)) throw new Error("Cannot find square root");
    let D3 = r3, c6 = u2.pow(u2.mul(u2.ONE, o4), n5), l6 = u2.pow(i4, s3), p4 = u2.pow(i4, n5);
    for (; !u2.eql(p4, u2.ONE); ) {
      if (u2.eql(p4, u2.ZERO)) return u2.ZERO;
      let w3 = 1;
      for (let g3 = u2.sqr(p4); w3 < D3 && !u2.eql(g3, u2.ONE); w3++) g3 = u2.sqr(g3);
      const h5 = u2.pow(c6, N2 << BigInt(D3 - w3 - 1));
      c6 = u2.sqr(h5), l6 = u2.mul(l6, h5), p4 = u2.mul(p4, c6), D3 = w3;
    }
    return l6;
  };
}
function ir(t) {
  if (t % Ht === rr) {
    const e2 = (t + N2) / Ht;
    return function(r3, o4) {
      const s3 = r3.pow(o4, e2);
      if (!r3.eql(r3.sqr(s3), o4)) throw new Error("Cannot find square root");
      return s3;
    };
  }
  if (t % Ce === Be) {
    const e2 = (t - Be) / Ce;
    return function(r3, o4) {
      const s3 = r3.mul(o4, nt), a3 = r3.pow(s3, e2), u2 = r3.mul(o4, a3), i4 = r3.mul(r3.mul(u2, nt), a3), D3 = r3.mul(u2, r3.sub(i4, r3.ONE));
      if (!r3.eql(r3.sqr(D3), o4)) throw new Error("Cannot find square root");
      return D3;
    };
  }
  return sr(t);
}
var ur = (t, e2) => (H(t, e2) & N2) === N2;
var cr = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function ar(t) {
  const e2 = { ORDER: "bigint", MASK: "bigint", BYTES: "isSafeInteger", BITS: "isSafeInteger" }, n5 = cr.reduce((r3, o4) => (r3[o4] = "function", r3), e2);
  return Ot(t, n5);
}
function fr(t, e2, n5) {
  if (n5 < M2) throw new Error("invalid exponent, negatives unsupported");
  if (n5 === M2) return t.ONE;
  if (n5 === N2) return e2;
  let r3 = t.ONE, o4 = e2;
  for (; n5 > M2; ) n5 & N2 && (r3 = t.mul(r3, o4)), o4 = t.sqr(o4), n5 >>= N2;
  return r3;
}
function Dr(t, e2) {
  const n5 = new Array(e2.length), r3 = e2.reduce((s3, a3, u2) => t.is0(a3) ? s3 : (n5[u2] = s3, t.mul(s3, a3)), t.ONE), o4 = t.inv(r3);
  return e2.reduceRight((s3, a3, u2) => t.is0(a3) ? s3 : (n5[u2] = t.mul(s3, n5[u2]), t.mul(s3, a3)), o4), n5;
}
function me(t, e2) {
  const n5 = e2 !== void 0 ? e2 : t.toString(2).length, r3 = Math.ceil(n5 / 8);
  return { nBitLength: n5, nByteLength: r3 };
}
function _e(t, e2, n5 = false, r3 = {}) {
  if (t <= M2) throw new Error("invalid field: expected ORDER > 0, got " + t);
  const { nBitLength: o4, nByteLength: s3 } = me(t, e2);
  if (s3 > 2048) throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a3;
  const u2 = Object.freeze({ ORDER: t, isLE: n5, BITS: o4, BYTES: s3, MASK: er(o4), ZERO: M2, ONE: N2, create: (i4) => H(i4, t), isValid: (i4) => {
    if (typeof i4 != "bigint") throw new Error("invalid field element: expected bigint, got " + typeof i4);
    return M2 <= i4 && i4 < t;
  }, is0: (i4) => i4 === M2, isOdd: (i4) => (i4 & N2) === N2, neg: (i4) => H(-i4, t), eql: (i4, D3) => i4 === D3, sqr: (i4) => H(i4 * i4, t), add: (i4, D3) => H(i4 + D3, t), sub: (i4, D3) => H(i4 - D3, t), mul: (i4, D3) => H(i4 * D3, t), pow: (i4, D3) => fr(u2, i4, D3), div: (i4, D3) => H(i4 * Ae(D3, t), t), sqrN: (i4) => i4 * i4, addN: (i4, D3) => i4 + D3, subN: (i4, D3) => i4 - D3, mulN: (i4, D3) => i4 * D3, inv: (i4) => Ae(i4, t), sqrt: r3.sqrt || ((i4) => (a3 || (a3 = ir(t)), a3(u2, i4))), invertBatch: (i4) => Dr(u2, i4), cmov: (i4, D3, c6) => c6 ? D3 : i4, toBytes: (i4) => n5 ? Nt(i4, s3) : ge(i4, s3), fromBytes: (i4) => {
    if (i4.length !== s3) throw new Error("Field.fromBytes: expected " + s3 + " bytes, got " + i4.length);
    return n5 ? Et(i4) : Pn(i4);
  } });
  return Object.freeze(u2);
}
var Se = BigInt(0);
var gt = BigInt(1);
function zt(t, e2) {
  const n5 = e2.negate();
  return t ? n5 : e2;
}
function ve(t, e2) {
  if (!Number.isSafeInteger(t) || t <= 0 || t > e2) throw new Error("invalid window size, expected [1.." + e2 + "], got W=" + t);
}
function Mt(t, e2) {
  ve(t, e2);
  const n5 = Math.ceil(e2 / t) + 1, r3 = 2 ** (t - 1);
  return { windows: n5, windowSize: r3 };
}
function dr(t, e2) {
  if (!Array.isArray(t)) throw new Error("array expected");
  t.forEach((n5, r3) => {
    if (!(n5 instanceof e2)) throw new Error("invalid point at index " + r3);
  });
}
function hr(t, e2) {
  if (!Array.isArray(t)) throw new Error("array of scalars expected");
  t.forEach((n5, r3) => {
    if (!e2.isValid(n5)) throw new Error("invalid scalar at index " + r3);
  });
}
var qt = /* @__PURE__ */ new WeakMap();
var Ie = /* @__PURE__ */ new WeakMap();
function $t(t) {
  return Ie.get(t) || 1;
}
function lr(t, e2) {
  return { constTimeNegate: zt, hasPrecomputes(n5) {
    return $t(n5) !== 1;
  }, unsafeLadder(n5, r3, o4 = t.ZERO) {
    let s3 = n5;
    for (; r3 > Se; ) r3 & gt && (o4 = o4.add(s3)), s3 = s3.double(), r3 >>= gt;
    return o4;
  }, precomputeWindow(n5, r3) {
    const { windows: o4, windowSize: s3 } = Mt(r3, e2), a3 = [];
    let u2 = n5, i4 = u2;
    for (let D3 = 0; D3 < o4; D3++) {
      i4 = u2, a3.push(i4);
      for (let c6 = 1; c6 < s3; c6++) i4 = i4.add(u2), a3.push(i4);
      u2 = i4.double();
    }
    return a3;
  }, wNAF(n5, r3, o4) {
    const { windows: s3, windowSize: a3 } = Mt(n5, e2);
    let u2 = t.ZERO, i4 = t.BASE;
    const D3 = BigInt(2 ** n5 - 1), c6 = 2 ** n5, l6 = BigInt(n5);
    for (let p4 = 0; p4 < s3; p4++) {
      const w3 = p4 * a3;
      let h5 = Number(o4 & D3);
      o4 >>= l6, h5 > a3 && (h5 -= c6, o4 += gt);
      const g3 = w3, S4 = w3 + Math.abs(h5) - 1, v5 = p4 % 2 !== 0, L3 = h5 < 0;
      h5 === 0 ? i4 = i4.add(zt(v5, r3[g3])) : u2 = u2.add(zt(L3, r3[S4]));
    }
    return { p: u2, f: i4 };
  }, wNAFUnsafe(n5, r3, o4, s3 = t.ZERO) {
    const { windows: a3, windowSize: u2 } = Mt(n5, e2), i4 = BigInt(2 ** n5 - 1), D3 = 2 ** n5, c6 = BigInt(n5);
    for (let l6 = 0; l6 < a3; l6++) {
      const p4 = l6 * u2;
      if (o4 === Se) break;
      let w3 = Number(o4 & i4);
      if (o4 >>= c6, w3 > u2 && (w3 -= D3, o4 += gt), w3 === 0) continue;
      let h5 = r3[p4 + Math.abs(w3) - 1];
      w3 < 0 && (h5 = h5.negate()), s3 = s3.add(h5);
    }
    return s3;
  }, getPrecomputes(n5, r3, o4) {
    let s3 = qt.get(r3);
    return s3 || (s3 = this.precomputeWindow(r3, n5), n5 !== 1 && qt.set(r3, o4(s3))), s3;
  }, wNAFCached(n5, r3, o4) {
    const s3 = $t(n5);
    return this.wNAF(s3, this.getPrecomputes(s3, n5, o4), r3);
  }, wNAFCachedUnsafe(n5, r3, o4, s3) {
    const a3 = $t(n5);
    return a3 === 1 ? this.unsafeLadder(n5, r3, s3) : this.wNAFUnsafe(a3, this.getPrecomputes(a3, n5, o4), r3, s3);
  }, setWindowSize(n5, r3) {
    ve(r3, e2), Ie.set(n5, r3), qt.delete(n5);
  } };
}
function br(t, e2, n5, r3) {
  if (dr(n5, t), hr(r3, e2), n5.length !== r3.length) throw new Error("arrays of points and scalars must have equal length");
  const o4 = t.ZERO, s3 = tr(BigInt(n5.length)), a3 = s3 > 12 ? s3 - 3 : s3 > 4 ? s3 - 2 : s3 ? 2 : 1, u2 = (1 << a3) - 1, i4 = new Array(u2 + 1).fill(o4), D3 = Math.floor((e2.BITS - 1) / a3) * a3;
  let c6 = o4;
  for (let l6 = D3; l6 >= 0; l6 -= a3) {
    i4.fill(o4);
    for (let w3 = 0; w3 < r3.length; w3++) {
      const h5 = r3[w3], g3 = Number(h5 >> BigInt(l6) & BigInt(u2));
      i4[g3] = i4[g3].add(n5[w3]);
    }
    let p4 = o4;
    for (let w3 = i4.length - 1, h5 = o4; w3 > 0; w3--) h5 = h5.add(i4[w3]), p4 = p4.add(h5);
    if (c6 = c6.add(p4), l6 !== 0) for (let w3 = 0; w3 < a3; w3++) c6 = c6.double();
  }
  return c6;
}
function pr(t) {
  return ar(t.Fp), Ot(t, { n: "bigint", h: "bigint", Gx: "field", Gy: "field" }, { nBitLength: "isSafeInteger", nByteLength: "isSafeInteger" }), Object.freeze({ ...me(t.n, t.nBitLength), ...t, p: t.Fp.ORDER });
}
var G = BigInt(0);
var j2 = BigInt(1);
var yt = BigInt(2);
var wr = BigInt(8);
var Er = { zip215: true };
function gr(t) {
  const e2 = pr(t);
  return Ot(t, { hash: "function", a: "bigint", d: "bigint", randomBytes: "function" }, { adjustScalarBytes: "function", domain: "function", uvRatio: "function", mapToCurve: "function" }), Object.freeze({ ...e2 });
}
function yr(t) {
  const e2 = gr(t), { Fp: n5, n: r3, prehash: o4, hash: s3, randomBytes: a3, nByteLength: u2, h: i4 } = e2, D3 = yt << BigInt(u2 * 8) - j2, c6 = n5.create, l6 = _e(e2.n, e2.nBitLength), p4 = e2.uvRatio || ((y4, f6) => {
    try {
      return { isValid: true, value: n5.sqrt(y4 * n5.inv(f6)) };
    } catch {
      return { isValid: false, value: G };
    }
  }), w3 = e2.adjustScalarBytes || ((y4) => y4), h5 = e2.domain || ((y4, f6, b4) => {
    if (Tt("phflag", b4), f6.length || b4) throw new Error("Contexts/pre-hash are not supported");
    return y4;
  });
  function g3(y4, f6) {
    ft("coordinate " + y4, f6, G, D3);
  }
  function S4(y4) {
    if (!(y4 instanceof d5)) throw new Error("ExtendedPoint expected");
  }
  const v5 = xe((y4, f6) => {
    const { ex: b4, ey: E4, ez: B3 } = y4, C4 = y4.is0();
    f6 == null && (f6 = C4 ? wr : n5.inv(B3));
    const A3 = c6(b4 * f6), U2 = c6(E4 * f6), _5 = c6(B3 * f6);
    if (C4) return { x: G, y: j2 };
    if (_5 !== j2) throw new Error("invZ was invalid");
    return { x: A3, y: U2 };
  }), L3 = xe((y4) => {
    const { a: f6, d: b4 } = e2;
    if (y4.is0()) throw new Error("bad point: ZERO");
    const { ex: E4, ey: B3, ez: C4, et: A3 } = y4, U2 = c6(E4 * E4), _5 = c6(B3 * B3), T4 = c6(C4 * C4), $3 = c6(T4 * T4), R3 = c6(U2 * f6), V3 = c6(T4 * c6(R3 + _5)), Y3 = c6($3 + c6(b4 * c6(U2 * _5)));
    if (V3 !== Y3) throw new Error("bad point: equation left != right (1)");
    const Z2 = c6(E4 * B3), X = c6(C4 * A3);
    if (Z2 !== X) throw new Error("bad point: equation left != right (2)");
    return true;
  });
  class d5 {
    constructor(f6, b4, E4, B3) {
      this.ex = f6, this.ey = b4, this.ez = E4, this.et = B3, g3("x", f6), g3("y", b4), g3("z", E4), g3("t", B3), Object.freeze(this);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(f6) {
      if (f6 instanceof d5) throw new Error("extended point not allowed");
      const { x: b4, y: E4 } = f6 || {};
      return g3("x", b4), g3("y", E4), new d5(b4, E4, j2, c6(b4 * E4));
    }
    static normalizeZ(f6) {
      const b4 = n5.invertBatch(f6.map((E4) => E4.ez));
      return f6.map((E4, B3) => E4.toAffine(b4[B3])).map(d5.fromAffine);
    }
    static msm(f6, b4) {
      return br(d5, l6, f6, b4);
    }
    _setWindowSize(f6) {
      q3.setWindowSize(this, f6);
    }
    assertValidity() {
      L3(this);
    }
    equals(f6) {
      S4(f6);
      const { ex: b4, ey: E4, ez: B3 } = this, { ex: C4, ey: A3, ez: U2 } = f6, _5 = c6(b4 * U2), T4 = c6(C4 * B3), $3 = c6(E4 * U2), R3 = c6(A3 * B3);
      return _5 === T4 && $3 === R3;
    }
    is0() {
      return this.equals(d5.ZERO);
    }
    negate() {
      return new d5(c6(-this.ex), this.ey, this.ez, c6(-this.et));
    }
    double() {
      const { a: f6 } = e2, { ex: b4, ey: E4, ez: B3 } = this, C4 = c6(b4 * b4), A3 = c6(E4 * E4), U2 = c6(yt * c6(B3 * B3)), _5 = c6(f6 * C4), T4 = b4 + E4, $3 = c6(c6(T4 * T4) - C4 - A3), R3 = _5 + A3, V3 = R3 - U2, Y3 = _5 - A3, Z2 = c6($3 * V3), X = c6(R3 * Y3), et2 = c6($3 * Y3), pt3 = c6(V3 * R3);
      return new d5(Z2, X, pt3, et2);
    }
    add(f6) {
      S4(f6);
      const { a: b4, d: E4 } = e2, { ex: B3, ey: C4, ez: A3, et: U2 } = this, { ex: _5, ey: T4, ez: $3, et: R3 } = f6;
      if (b4 === BigInt(-1)) {
        const re3 = c6((C4 - B3) * (T4 + _5)), oe2 = c6((C4 + B3) * (T4 - _5)), mt4 = c6(oe2 - re3);
        if (mt4 === G) return this.double();
        const se3 = c6(A3 * yt * R3), ie3 = c6(U2 * yt * $3), ue3 = ie3 + se3, ce3 = oe2 + re3, ae2 = ie3 - se3, Dn3 = c6(ue3 * mt4), dn3 = c6(ce3 * ae2), hn3 = c6(ue3 * ae2), ln3 = c6(mt4 * ce3);
        return new d5(Dn3, dn3, ln3, hn3);
      }
      const V3 = c6(B3 * _5), Y3 = c6(C4 * T4), Z2 = c6(U2 * E4 * R3), X = c6(A3 * $3), et2 = c6((B3 + C4) * (_5 + T4) - V3 - Y3), pt3 = X - Z2, ee3 = X + Z2, ne2 = c6(Y3 - b4 * V3), un3 = c6(et2 * pt3), cn3 = c6(ee3 * ne2), an3 = c6(et2 * ne2), fn3 = c6(pt3 * ee3);
      return new d5(un3, cn3, fn3, an3);
    }
    subtract(f6) {
      return this.add(f6.negate());
    }
    wNAF(f6) {
      return q3.wNAFCached(this, f6, d5.normalizeZ);
    }
    multiply(f6) {
      const b4 = f6;
      ft("scalar", b4, j2, r3);
      const { p: E4, f: B3 } = this.wNAF(b4);
      return d5.normalizeZ([E4, B3])[0];
    }
    multiplyUnsafe(f6, b4 = d5.ZERO) {
      const E4 = f6;
      return ft("scalar", E4, G, r3), E4 === G ? F3 : this.is0() || E4 === j2 ? this : q3.wNAFCachedUnsafe(this, E4, d5.normalizeZ, b4);
    }
    isSmallOrder() {
      return this.multiplyUnsafe(i4).is0();
    }
    isTorsionFree() {
      return q3.unsafeLadder(this, r3).is0();
    }
    toAffine(f6) {
      return v5(this, f6);
    }
    clearCofactor() {
      const { h: f6 } = e2;
      return f6 === j2 ? this : this.multiplyUnsafe(f6);
    }
    static fromHex(f6, b4 = false) {
      const { d: E4, a: B3 } = e2, C4 = n5.BYTES;
      f6 = W("pointHex", f6, C4), Tt("zip215", b4);
      const A3 = f6.slice(), U2 = f6[C4 - 1];
      A3[C4 - 1] = U2 & -129;
      const _5 = Et(A3), T4 = b4 ? D3 : n5.ORDER;
      ft("pointHex.y", _5, G, T4);
      const $3 = c6(_5 * _5), R3 = c6($3 - j2), V3 = c6(E4 * $3 - B3);
      let { isValid: Y3, value: Z2 } = p4(R3, V3);
      if (!Y3) throw new Error("Point.fromHex: invalid y coordinate");
      const X = (Z2 & j2) === j2, et2 = (U2 & 128) !== 0;
      if (!b4 && Z2 === G && et2) throw new Error("Point.fromHex: x=0 and x_0=1");
      return et2 !== X && (Z2 = c6(-Z2)), d5.fromAffine({ x: Z2, y: _5 });
    }
    static fromPrivateKey(f6) {
      return O4(f6).point;
    }
    toRawBytes() {
      const { x: f6, y: b4 } = this.toAffine(), E4 = Nt(b4, n5.BYTES);
      return E4[E4.length - 1] |= f6 & j2 ? 128 : 0, E4;
    }
    toHex() {
      return Ft(this.toRawBytes());
    }
  }
  d5.BASE = new d5(e2.Gx, e2.Gy, j2, c6(e2.Gx * e2.Gy)), d5.ZERO = new d5(G, j2, j2, G);
  const { BASE: m3, ZERO: F3 } = d5, q3 = lr(d5, u2 * 8);
  function z5(y4) {
    return H(y4, r3);
  }
  function I3(y4) {
    return z5(Et(y4));
  }
  function O4(y4) {
    const f6 = n5.BYTES;
    y4 = W("private key", y4, f6);
    const b4 = W("hashed private key", s3(y4), 2 * f6), E4 = w3(b4.slice(0, f6)), B3 = b4.slice(f6, 2 * f6), C4 = I3(E4), A3 = m3.multiply(C4), U2 = A3.toRawBytes();
    return { head: E4, prefix: B3, scalar: C4, point: A3, pointBytes: U2 };
  }
  function ot2(y4) {
    return O4(y4).pointBytes;
  }
  function tt2(y4 = new Uint8Array(), ...f6) {
    const b4 = ye(...f6);
    return I3(s3(h5(b4, W("context", y4), !!o4)));
  }
  function st2(y4, f6, b4 = {}) {
    y4 = W("message", y4), o4 && (y4 = o4(y4));
    const { prefix: E4, scalar: B3, pointBytes: C4 } = O4(f6), A3 = tt2(b4.context, E4, y4), U2 = m3.multiply(A3).toRawBytes(), _5 = tt2(b4.context, U2, C4, y4), T4 = z5(A3 + _5 * B3);
    ft("signature.s", T4, G, r3);
    const $3 = ye(U2, Nt(T4, n5.BYTES));
    return W("result", $3, n5.BYTES * 2);
  }
  const at2 = Er;
  function Ct3(y4, f6, b4, E4 = at2) {
    const { context: B3, zip215: C4 } = E4, A3 = n5.BYTES;
    y4 = W("signature", y4, 2 * A3), f6 = W("message", f6), b4 = W("publicKey", b4, A3), C4 !== void 0 && Tt("zip215", C4), o4 && (f6 = o4(f6));
    const U2 = Et(y4.slice(A3, 2 * A3));
    let _5, T4, $3;
    try {
      _5 = d5.fromHex(b4, C4), T4 = d5.fromHex(y4.slice(0, A3), C4), $3 = m3.multiplyUnsafe(U2);
    } catch {
      return false;
    }
    if (!C4 && _5.isSmallOrder()) return false;
    const R3 = tt2(B3, T4.toRawBytes(), _5.toRawBytes(), f6);
    return T4.add(_5.multiplyUnsafe(R3)).subtract($3).clearCofactor().equals(d5.ZERO);
  }
  return m3._setWindowSize(8), { CURVE: e2, getPublicKey: ot2, sign: st2, verify: Ct3, ExtendedPoint: d5, utils: { getExtendedPublicKey: O4, randomPrivateKey: () => a3(n5.BYTES), precompute(y4 = 8, f6 = d5.BASE) {
    return f6._setWindowSize(y4), f6.multiply(BigInt(3)), f6;
  } } };
}
BigInt(0), BigInt(1);
var kt = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
var Ue = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
BigInt(0);
var xr = BigInt(1);
var Te = BigInt(2);
BigInt(3);
var Br = BigInt(5);
var Cr = BigInt(8);
function Ar(t) {
  const e2 = BigInt(10), n5 = BigInt(20), r3 = BigInt(40), o4 = BigInt(80), s3 = kt, u2 = t * t % s3 * t % s3, i4 = J2(u2, Te, s3) * u2 % s3, D3 = J2(i4, xr, s3) * t % s3, c6 = J2(D3, Br, s3) * D3 % s3, l6 = J2(c6, e2, s3) * c6 % s3, p4 = J2(l6, n5, s3) * l6 % s3, w3 = J2(p4, r3, s3) * p4 % s3, h5 = J2(w3, o4, s3) * w3 % s3, g3 = J2(h5, o4, s3) * w3 % s3, S4 = J2(g3, e2, s3) * c6 % s3;
  return { pow_p_5_8: J2(S4, Te, s3) * t % s3, b2: u2 };
}
function mr(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
function _r(t, e2) {
  const n5 = kt, r3 = H(e2 * e2 * e2, n5), o4 = H(r3 * r3 * e2, n5), s3 = Ar(t * o4).pow_p_5_8;
  let a3 = H(t * r3 * s3, n5);
  const u2 = H(e2 * a3 * a3, n5), i4 = a3, D3 = H(a3 * Ue, n5), c6 = u2 === t, l6 = u2 === H(-t, n5), p4 = u2 === H(-t * Ue, n5);
  return c6 && (a3 = i4), (l6 || p4) && (a3 = D3), ur(a3, n5) && (a3 = H(-a3, n5)), { isValid: c6 || l6, value: a3 };
}
var Sr = (() => _e(kt, void 0, true))();
var vr = (() => ({ a: BigInt(-1), d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"), Fp: Sr, n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"), h: Cr, Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"), Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"), hash: Kn, randomBytes: he, adjustScalarBytes: mr, uvRatio: _r }))();
var Rt = (() => yr(vr))();
var jt = "EdDSA";
var Zt = "JWT";
var ut = ".";
var Dt = "base64url";
var Gt = "utf8";
var xt = "utf8";
var Vt = ":";
var Yt = "did";
var Jt = "key";
var dt = "base58btc";
var Kt = "z";
var Wt = "K36";
var Ne = 32;
function Xt(t) {
  return globalThis.Buffer != null ? new Uint8Array(t.buffer, t.byteOffset, t.byteLength) : t;
}
function Le(t = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Xt(globalThis.Buffer.allocUnsafe(t)) : new Uint8Array(t);
}
function Oe(t, e2) {
  e2 || (e2 = t.reduce((o4, s3) => o4 + s3.length, 0));
  const n5 = Le(e2);
  let r3 = 0;
  for (const o4 of t) n5.set(o4, r3), r3 += o4.length;
  return Xt(n5);
}
function Ir(t, e2) {
  if (t.length >= 255) throw new TypeError("Alphabet too long");
  for (var n5 = new Uint8Array(256), r3 = 0; r3 < n5.length; r3++) n5[r3] = 255;
  for (var o4 = 0; o4 < t.length; o4++) {
    var s3 = t.charAt(o4), a3 = s3.charCodeAt(0);
    if (n5[a3] !== 255) throw new TypeError(s3 + " is ambiguous");
    n5[a3] = o4;
  }
  var u2 = t.length, i4 = t.charAt(0), D3 = Math.log(u2) / Math.log(256), c6 = Math.log(256) / Math.log(u2);
  function l6(h5) {
    if (h5 instanceof Uint8Array || (ArrayBuffer.isView(h5) ? h5 = new Uint8Array(h5.buffer, h5.byteOffset, h5.byteLength) : Array.isArray(h5) && (h5 = Uint8Array.from(h5))), !(h5 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (h5.length === 0) return "";
    for (var g3 = 0, S4 = 0, v5 = 0, L3 = h5.length; v5 !== L3 && h5[v5] === 0; ) v5++, g3++;
    for (var d5 = (L3 - v5) * c6 + 1 >>> 0, m3 = new Uint8Array(d5); v5 !== L3; ) {
      for (var F3 = h5[v5], q3 = 0, z5 = d5 - 1; (F3 !== 0 || q3 < S4) && z5 !== -1; z5--, q3++) F3 += 256 * m3[z5] >>> 0, m3[z5] = F3 % u2 >>> 0, F3 = F3 / u2 >>> 0;
      if (F3 !== 0) throw new Error("Non-zero carry");
      S4 = q3, v5++;
    }
    for (var I3 = d5 - S4; I3 !== d5 && m3[I3] === 0; ) I3++;
    for (var O4 = i4.repeat(g3); I3 < d5; ++I3) O4 += t.charAt(m3[I3]);
    return O4;
  }
  function p4(h5) {
    if (typeof h5 != "string") throw new TypeError("Expected String");
    if (h5.length === 0) return new Uint8Array();
    var g3 = 0;
    if (h5[g3] !== " ") {
      for (var S4 = 0, v5 = 0; h5[g3] === i4; ) S4++, g3++;
      for (var L3 = (h5.length - g3) * D3 + 1 >>> 0, d5 = new Uint8Array(L3); h5[g3]; ) {
        var m3 = n5[h5.charCodeAt(g3)];
        if (m3 === 255) return;
        for (var F3 = 0, q3 = L3 - 1; (m3 !== 0 || F3 < v5) && q3 !== -1; q3--, F3++) m3 += u2 * d5[q3] >>> 0, d5[q3] = m3 % 256 >>> 0, m3 = m3 / 256 >>> 0;
        if (m3 !== 0) throw new Error("Non-zero carry");
        v5 = F3, g3++;
      }
      if (h5[g3] !== " ") {
        for (var z5 = L3 - v5; z5 !== L3 && d5[z5] === 0; ) z5++;
        for (var I3 = new Uint8Array(S4 + (L3 - z5)), O4 = S4; z5 !== L3; ) I3[O4++] = d5[z5++];
        return I3;
      }
    }
  }
  function w3(h5) {
    var g3 = p4(h5);
    if (g3) return g3;
    throw new Error(`Non-${e2} character`);
  }
  return { encode: l6, decodeUnsafe: p4, decode: w3 };
}
var Ur = Ir;
var Tr = Ur;
var He = (t) => {
  if (t instanceof Uint8Array && t.constructor.name === "Uint8Array") return t;
  if (t instanceof ArrayBuffer) return new Uint8Array(t);
  if (ArrayBuffer.isView(t)) return new Uint8Array(t.buffer, t.byteOffset, t.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var Fr = (t) => new TextEncoder().encode(t);
var Nr = (t) => new TextDecoder().decode(t);
var Lr = class {
  constructor(e2, n5, r3) {
    this.name = e2, this.prefix = n5, this.baseEncode = r3;
  }
  encode(e2) {
    if (e2 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e2)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var Or = class {
  constructor(e2, n5, r3) {
    if (this.name = e2, this.prefix = n5, n5.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = n5.codePointAt(0), this.baseDecode = r3;
  }
  decode(e2) {
    if (typeof e2 == "string") {
      if (e2.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e2)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e2.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e2) {
    return ze(this, e2);
  }
};
var Hr = class {
  constructor(e2) {
    this.decoders = e2;
  }
  or(e2) {
    return ze(this, e2);
  }
  decode(e2) {
    const n5 = e2[0], r3 = this.decoders[n5];
    if (r3) return r3.decode(e2);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e2)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ze = (t, e2) => new Hr({ ...t.decoders || { [t.prefix]: t }, ...e2.decoders || { [e2.prefix]: e2 } });
var zr = class {
  constructor(e2, n5, r3, o4) {
    this.name = e2, this.prefix = n5, this.baseEncode = r3, this.baseDecode = o4, this.encoder = new Lr(e2, n5, r3), this.decoder = new Or(e2, n5, o4);
  }
  encode(e2) {
    return this.encoder.encode(e2);
  }
  decode(e2) {
    return this.decoder.decode(e2);
  }
};
var Bt = ({ name: t, prefix: e2, encode: n5, decode: r3 }) => new zr(t, e2, n5, r3);
var ht = ({ prefix: t, name: e2, alphabet: n5 }) => {
  const { encode: r3, decode: o4 } = Tr(n5, e2);
  return Bt({ prefix: t, name: e2, encode: r3, decode: (s3) => He(o4(s3)) });
};
var Mr = (t, e2, n5, r3) => {
  const o4 = {};
  for (let c6 = 0; c6 < e2.length; ++c6) o4[e2[c6]] = c6;
  let s3 = t.length;
  for (; t[s3 - 1] === "="; ) --s3;
  const a3 = new Uint8Array(s3 * n5 / 8 | 0);
  let u2 = 0, i4 = 0, D3 = 0;
  for (let c6 = 0; c6 < s3; ++c6) {
    const l6 = o4[t[c6]];
    if (l6 === void 0) throw new SyntaxError(`Non-${r3} character`);
    i4 = i4 << n5 | l6, u2 += n5, u2 >= 8 && (u2 -= 8, a3[D3++] = 255 & i4 >> u2);
  }
  if (u2 >= n5 || 255 & i4 << 8 - u2) throw new SyntaxError("Unexpected end of data");
  return a3;
};
var qr = (t, e2, n5) => {
  const r3 = e2[e2.length - 1] === "=", o4 = (1 << n5) - 1;
  let s3 = "", a3 = 0, u2 = 0;
  for (let i4 = 0; i4 < t.length; ++i4) for (u2 = u2 << 8 | t[i4], a3 += 8; a3 > n5; ) a3 -= n5, s3 += e2[o4 & u2 >> a3];
  if (a3 && (s3 += e2[o4 & u2 << n5 - a3]), r3) for (; s3.length * n5 & 7; ) s3 += "=";
  return s3;
};
var k4 = ({ name: t, prefix: e2, bitsPerChar: n5, alphabet: r3 }) => Bt({ prefix: e2, name: t, encode(o4) {
  return qr(o4, r3, n5);
}, decode(o4) {
  return Mr(o4, r3, n5, t);
} });
var $r = Bt({ prefix: "\0", name: "identity", encode: (t) => Nr(t), decode: (t) => Fr(t) });
var kr = Object.freeze({ __proto__: null, identity: $r });
var Rr = k4({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var jr = Object.freeze({ __proto__: null, base2: Rr });
var Zr = k4({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Gr = Object.freeze({ __proto__: null, base8: Zr });
var Vr = ht({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Yr = Object.freeze({ __proto__: null, base10: Vr });
var Jr = k4({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Kr = k4({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Wr = Object.freeze({ __proto__: null, base16: Jr, base16upper: Kr });
var Xr = k4({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Pr = k4({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Qr = k4({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var to = k4({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var eo = k4({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var no = k4({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var ro = k4({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var oo = k4({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var so = k4({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var io = Object.freeze({ __proto__: null, base32: Xr, base32upper: Pr, base32pad: Qr, base32padupper: to, base32hex: eo, base32hexupper: no, base32hexpad: ro, base32hexpadupper: oo, base32z: so });
var uo = ht({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var co = ht({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var ao = Object.freeze({ __proto__: null, base36: uo, base36upper: co });
var fo = ht({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Do = ht({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var ho = Object.freeze({ __proto__: null, base58btc: fo, base58flickr: Do });
var lo = k4({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var bo = k4({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var po = k4({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var wo = k4({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Eo = Object.freeze({ __proto__: null, base64: lo, base64pad: bo, base64url: po, base64urlpad: wo });
var Me = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var go = Me.reduce((t, e2, n5) => (t[n5] = e2, t), []);
var yo = Me.reduce((t, e2, n5) => (t[e2.codePointAt(0)] = n5, t), []);
function xo(t) {
  return t.reduce((e2, n5) => (e2 += go[n5], e2), "");
}
function Bo(t) {
  const e2 = [];
  for (const n5 of t) {
    const r3 = yo[n5.codePointAt(0)];
    if (r3 === void 0) throw new Error(`Non-base256emoji character: ${n5}`);
    e2.push(r3);
  }
  return new Uint8Array(e2);
}
var Co = Bt({ prefix: "🚀", name: "base256emoji", encode: xo, decode: Bo });
var Ao = Object.freeze({ __proto__: null, base256emoji: Co });
var mo = $e;
var qe = 128;
var _o = 127;
var So = ~_o;
var vo = Math.pow(2, 31);
function $e(t, e2, n5) {
  e2 = e2 || [], n5 = n5 || 0;
  for (var r3 = n5; t >= vo; ) e2[n5++] = t & 255 | qe, t /= 128;
  for (; t & So; ) e2[n5++] = t & 255 | qe, t >>>= 7;
  return e2[n5] = t | 0, $e.bytes = n5 - r3 + 1, e2;
}
var Io = Pt;
var Uo = 128;
var ke = 127;
function Pt(t, r3) {
  var n5 = 0, r3 = r3 || 0, o4 = 0, s3 = r3, a3, u2 = t.length;
  do {
    if (s3 >= u2) throw Pt.bytes = 0, new RangeError("Could not decode varint");
    a3 = t[s3++], n5 += o4 < 28 ? (a3 & ke) << o4 : (a3 & ke) * Math.pow(2, o4), o4 += 7;
  } while (a3 >= Uo);
  return Pt.bytes = s3 - r3, n5;
}
var To = Math.pow(2, 7);
var Fo = Math.pow(2, 14);
var No = Math.pow(2, 21);
var Lo = Math.pow(2, 28);
var Oo = Math.pow(2, 35);
var Ho = Math.pow(2, 42);
var zo = Math.pow(2, 49);
var Mo = Math.pow(2, 56);
var qo = Math.pow(2, 63);
var $o = function(t) {
  return t < To ? 1 : t < Fo ? 2 : t < No ? 3 : t < Lo ? 4 : t < Oo ? 5 : t < Ho ? 6 : t < zo ? 7 : t < Mo ? 8 : t < qo ? 9 : 10;
};
var ko = { encode: mo, decode: Io, encodingLength: $o };
var Re = ko;
var je = (t, e2, n5 = 0) => (Re.encode(t, e2, n5), e2);
var Ze = (t) => Re.encodingLength(t);
var Qt = (t, e2) => {
  const n5 = e2.byteLength, r3 = Ze(t), o4 = r3 + Ze(n5), s3 = new Uint8Array(o4 + n5);
  return je(t, s3, 0), je(n5, s3, r3), s3.set(e2, o4), new Ro(t, n5, e2, s3);
};
var Ro = class {
  constructor(e2, n5, r3, o4) {
    this.code = e2, this.size = n5, this.digest = r3, this.bytes = o4;
  }
};
var Ge = ({ name: t, code: e2, encode: n5 }) => new jo(t, e2, n5);
var jo = class {
  constructor(e2, n5, r3) {
    this.name = e2, this.code = n5, this.encode = r3;
  }
  digest(e2) {
    if (e2 instanceof Uint8Array) {
      const n5 = this.encode(e2);
      return n5 instanceof Uint8Array ? Qt(this.code, n5) : n5.then((r3) => Qt(this.code, r3));
    } else throw Error("Unknown type, must be binary type");
  }
};
var Ve = (t) => async (e2) => new Uint8Array(await crypto.subtle.digest(t, e2));
var Zo = Ge({ name: "sha2-256", code: 18, encode: Ve("SHA-256") });
var Go = Ge({ name: "sha2-512", code: 19, encode: Ve("SHA-512") });
var Vo = Object.freeze({ __proto__: null, sha256: Zo, sha512: Go });
var Ye = 0;
var Yo = "identity";
var Je = He;
var Jo = (t) => Qt(Ye, Je(t));
var Ko = { code: Ye, name: Yo, encode: Je, digest: Jo };
var Wo = Object.freeze({ __proto__: null, identity: Ko });
new TextEncoder(), new TextDecoder();
var Ke = { ...kr, ...jr, ...Gr, ...Yr, ...Wr, ...io, ...ao, ...ho, ...Eo, ...Ao };
({ ...Vo, ...Wo });
function We(t, e2, n5, r3) {
  return { name: t, prefix: e2, encoder: { name: t, prefix: e2, encode: n5 }, decoder: { decode: r3 } };
}
var Xe = We("utf8", "u", (t) => "u" + new TextDecoder("utf8").decode(t), (t) => new TextEncoder().encode(t.substring(1)));
var te = We("ascii", "a", (t) => {
  let e2 = "a";
  for (let n5 = 0; n5 < t.length; n5++) e2 += String.fromCharCode(t[n5]);
  return e2;
}, (t) => {
  t = t.substring(1);
  const e2 = Le(t.length);
  for (let n5 = 0; n5 < t.length; n5++) e2[n5] = t.charCodeAt(n5);
  return e2;
});
var Pe = { utf8: Xe, "utf-8": Xe, hex: Ke.base16, latin1: te, ascii: te, binary: te, ...Ke };
function ct(t, e2 = "utf8") {
  const n5 = Pe[e2];
  if (!n5) throw new Error(`Unsupported encoding "${e2}"`);
  return (e2 === "utf8" || e2 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(t.buffer, t.byteOffset, t.byteLength).toString("utf8") : n5.encoder.encode(t).substring(1);
}
function rt(t, e2 = "utf8") {
  const n5 = Pe[e2];
  if (!n5) throw new Error(`Unsupported encoding "${e2}"`);
  return (e2 === "utf8" || e2 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Xt(globalThis.Buffer.from(t, "utf-8")) : n5.decoder.decode(`${n5.prefix}${t}`);
}
function lt(t) {
  return safeJsonParse(ct(rt(t, Dt), Gt));
}
function bt(t) {
  return ct(rt(safeJsonStringify(t), Gt), Dt);
}
function Qe(t) {
  const e2 = rt(Wt, dt), n5 = Kt + ct(Oe([e2, t]), dt);
  return [Yt, Jt, n5].join(Vt);
}
function en(t) {
  return ct(t, Dt);
}
function nn(t) {
  return rt(t, Dt);
}
function rn(t) {
  return rt([bt(t.header), bt(t.payload)].join(ut), xt);
}
function on(t) {
  return [bt(t.header), bt(t.payload), en(t.signature)].join(ut);
}
function sn(t) {
  const e2 = t.split(ut), n5 = lt(e2[0]), r3 = lt(e2[1]), o4 = nn(e2[2]), s3 = rt(e2.slice(0, 2).join(ut), xt);
  return { header: n5, payload: r3, signature: o4, data: s3 };
}
function Po(t = he(Ne)) {
  const e2 = Rt.getPublicKey(t);
  return { secretKey: Oe([t, e2]), publicKey: e2 };
}
async function Qo(t, e2, n5, r3, o4 = (0, import_time2.fromMiliseconds)(Date.now())) {
  const s3 = { alg: jt, typ: Zt }, a3 = Qe(r3.publicKey), u2 = o4 + n5, i4 = { iss: a3, sub: t, aud: e2, iat: o4, exp: u2 }, D3 = rn({ header: s3, payload: i4 }), c6 = Rt.sign(D3, r3.secretKey.slice(0, 32));
  return on({ header: s3, payload: i4, signature: c6 });
}

// node_modules/detect-browser/es/index.js
var __spreadArray = function(to3, from5, pack) {
  if (pack || arguments.length === 2) for (var i4 = 0, l6 = from5.length, ar4; i4 < l6; i4++) {
    if (ar4 || !(i4 in from5)) {
      if (!ar4) ar4 = Array.prototype.slice.call(from5, 0, i4);
      ar4[i4] = from5[i4];
    }
  }
  return to3.concat(ar4 || Array.prototype.slice.call(from5));
};
var BrowserInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function BrowserInfo2(name2, version2, os2) {
      this.name = name2;
      this.version = version2;
      this.os = os2;
      this.type = "browser";
    }
    return BrowserInfo2;
  }()
);
var NodeInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function NodeInfo2(version2) {
      this.version = version2;
      this.type = "node";
      this.name = "node";
      this.os = process.platform;
    }
    return NodeInfo2;
  }()
);
var SearchBotDeviceInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function SearchBotDeviceInfo2(name2, version2, os2, bot) {
      this.name = name2;
      this.version = version2;
      this.os = os2;
      this.bot = bot;
      this.type = "bot-device";
    }
    return SearchBotDeviceInfo2;
  }()
);
var BotInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function BotInfo2() {
      this.type = "bot";
      this.bot = true;
      this.name = "bot";
      this.version = null;
      this.os = null;
    }
    return BotInfo2;
  }()
);
var ReactNativeInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function ReactNativeInfo2() {
      this.type = "react-native";
      this.name = "react-native";
      this.version = null;
      this.os = null;
    }
    return ReactNativeInfo2;
  }()
);
var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
var SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
var REQUIRED_VERSION_PARTS = 3;
var userAgentRules = [
  ["aol", /AOLShield\/([0-9\._]+)/],
  ["edge", /Edge\/([0-9\._]+)/],
  ["edge-ios", /EdgiOS\/([0-9\._]+)/],
  ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
  ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
  ["samsung", /SamsungBrowser\/([0-9\.]+)/],
  ["silk", /\bSilk\/([0-9._-]+)\b/],
  ["miui", /MiuiBrowser\/([0-9\.]+)$/],
  ["beaker", /BeakerBrowser\/([0-9\.]+)/],
  ["edge-chromium", /EdgA?\/([0-9\.]+)/],
  [
    "chromium-webview",
    /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
  ],
  ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
  ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
  ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
  ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
  ["fxios", /FxiOS\/([0-9\.]+)/],
  ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
  ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
  ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
  ["pie", /^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],
  ["pie", /^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],
  ["netfront", /^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],
  ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
  ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
  ["ie", /MSIE\s(7\.0)/],
  ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
  ["android", /Android\s([0-9\.]+)/],
  ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
  ["safari", /Version\/([0-9\._]+).*Safari/],
  ["facebook", /FB[AS]V\/([0-9\.]+)/],
  ["instagram", /Instagram\s([0-9\.]+)/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
  ["curl", /^curl\/([0-9\.]+)$/],
  ["searchbot", SEARCHBOX_UA_REGEX]
];
var operatingSystemRules = [
  ["iOS", /iP(hone|od|ad)/],
  ["Android OS", /Android/],
  ["BlackBerry OS", /BlackBerry|BB10/],
  ["Windows Mobile", /IEMobile/],
  ["Amazon OS", /Kindle/],
  ["Windows 3.11", /Win16/],
  ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
  ["Windows 98", /(Windows 98)|(Win98)/],
  ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
  ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
  ["Windows Server 2003", /(Windows NT 5.2)/],
  ["Windows Vista", /(Windows NT 6.0)/],
  ["Windows 7", /(Windows NT 6.1)/],
  ["Windows 8", /(Windows NT 6.2)/],
  ["Windows 8.1", /(Windows NT 6.3)/],
  ["Windows 10", /(Windows NT 10.0)/],
  ["Windows ME", /Windows ME/],
  ["Windows CE", /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],
  ["Open BSD", /OpenBSD/],
  ["Sun OS", /SunOS/],
  ["Chrome OS", /CrOS/],
  ["Linux", /(Linux)|(X11)/],
  ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
  ["QNX", /QNX/],
  ["BeOS", /BeOS/],
  ["OS/2", /OS\/2/]
];
function detect(userAgent) {
  if (!!userAgent) {
    return parseUserAgent(userAgent);
  }
  if (typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative") {
    return new ReactNativeInfo();
  }
  if (typeof navigator !== "undefined") {
    return parseUserAgent(navigator.userAgent);
  }
  return getNodeVersion();
}
function matchUserAgent(ua) {
  return ua !== "" && userAgentRules.reduce(function(matched, _a) {
    var browser = _a[0], regex = _a[1];
    if (matched) {
      return matched;
    }
    var uaMatch = regex.exec(ua);
    return !!uaMatch && [browser, uaMatch];
  }, false);
}
function parseUserAgent(ua) {
  var matchedRule = matchUserAgent(ua);
  if (!matchedRule) {
    return null;
  }
  var name2 = matchedRule[0], match = matchedRule[1];
  if (name2 === "searchbot") {
    return new BotInfo();
  }
  var versionParts = match[1] && match[1].split(".").join("_").split("_").slice(0, 3);
  if (versionParts) {
    if (versionParts.length < REQUIRED_VERSION_PARTS) {
      versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);
    }
  } else {
    versionParts = [];
  }
  var version2 = versionParts.join(".");
  var os2 = detectOS(ua);
  var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
  if (searchBotMatch && searchBotMatch[1]) {
    return new SearchBotDeviceInfo(name2, version2, os2, searchBotMatch[1]);
  }
  return new BrowserInfo(name2, version2, os2);
}
function detectOS(ua) {
  for (var ii3 = 0, count = operatingSystemRules.length; ii3 < count; ii3++) {
    var _a = operatingSystemRules[ii3], os2 = _a[0], regex = _a[1];
    var match = regex.exec(ua);
    if (match) {
      return os2;
    }
  }
  return null;
}
function getNodeVersion() {
  var isNode2 = typeof process !== "undefined" && process.version;
  return isNode2 ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count) {
  var output = [];
  for (var ii3 = 0; ii3 < count; ii3++) {
    output.push("0");
  }
  return output;
}

// node_modules/@walletconnect/utils/dist/index.es.js
var import_time3 = __toESM(require_cjs2());
var import_window_getters = __toESM(require_cjs3());
var import_window_metadata = __toESM(require_cjs4());

// node_modules/@walletconnect/utils/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js
function publicKeyToAddress(publicKey) {
  const address = keccak256(`0x${publicKey.substring(4)}`).substring(26);
  return checksumAddress(`0x${address}`);
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverPublicKey.js
async function recoverPublicKey({ hash, signature }) {
  const hashHex = isHex(hash) ? hash : toHex(hash);
  const { secp256k1: secp256k12 } = await import("./secp256k1-RYSB4WQZ.js");
  const signature_ = (() => {
    if (typeof signature === "object" && "r" in signature && "s" in signature) {
      const { r: r3, s: s3, v: v5, yParity } = signature;
      const yParityOrV2 = Number(yParity ?? v5);
      const recoveryBit2 = toRecoveryBit(yParityOrV2);
      return new secp256k12.Signature(hexToBigInt(r3), hexToBigInt(s3)).addRecoveryBit(recoveryBit2);
    }
    const signatureHex = isHex(signature) ? signature : toHex(signature);
    const yParityOrV = hexToNumber(`0x${signatureHex.slice(130)}`);
    const recoveryBit = toRecoveryBit(yParityOrV);
    return secp256k12.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);
  })();
  const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);
  return `0x${publicKey}`;
}
function toRecoveryBit(yParityOrV) {
  if (yParityOrV === 0 || yParityOrV === 1)
    return yParityOrV;
  if (yParityOrV === 27)
    return 0;
  if (yParityOrV === 28)
    return 1;
  throw new Error("Invalid yParityOrV value");
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverAddress.js
async function recoverAddress({ hash, signature }) {
  return publicKeyToAddress(await recoverPublicKey({ hash, signature }));
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/transaction.js
var transactionType = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function formatTransaction(transaction) {
  const transaction_ = {
    ...transaction,
    blockHash: transaction.blockHash ? transaction.blockHash : null,
    blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
    chainId: transaction.chainId ? hexToNumber(transaction.chainId) : void 0,
    gas: transaction.gas ? BigInt(transaction.gas) : void 0,
    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
    maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
    maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
    nonce: transaction.nonce ? hexToNumber(transaction.nonce) : void 0,
    to: transaction.to ? transaction.to : null,
    transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
    type: transaction.type ? transactionType[transaction.type] : void 0,
    typeHex: transaction.type ? transaction.type : void 0,
    value: transaction.value ? BigInt(transaction.value) : void 0,
    v: transaction.v ? BigInt(transaction.v) : void 0
  };
  if (transaction.authorizationList)
    transaction_.authorizationList = formatAuthorizationList(transaction.authorizationList);
  transaction_.yParity = (() => {
    if (transaction.yParity)
      return Number(transaction.yParity);
    if (typeof transaction_.v === "bigint") {
      if (transaction_.v === 0n || transaction_.v === 27n)
        return 0;
      if (transaction_.v === 1n || transaction_.v === 28n)
        return 1;
      if (transaction_.v >= 35n)
        return transaction_.v % 2n === 0n ? 1 : 0;
    }
    return void 0;
  })();
  if (transaction_.type === "legacy") {
    delete transaction_.accessList;
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
    delete transaction_.yParity;
  }
  if (transaction_.type === "eip2930") {
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
  }
  if (transaction_.type === "eip1559") {
    delete transaction_.maxFeePerBlobGas;
  }
  return transaction_;
}
var defineTransaction = defineFormatter("transaction", formatTransaction);
function formatAuthorizationList(authorizationList) {
  return authorizationList.map((authorization) => ({
    contractAddress: authorization.address,
    chainId: Number(authorization.chainId),
    nonce: Number(authorization.nonce),
    r: authorization.r,
    s: authorization.s,
    yParity: Number(authorization.yParity)
  }));
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/block.js
function formatBlock(block) {
  const transactions = (block.transactions ?? []).map((transaction) => {
    if (typeof transaction === "string")
      return transaction;
    return formatTransaction(transaction);
  });
  return {
    ...block,
    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
    difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
    excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
    hash: block.hash ? block.hash : null,
    logsBloom: block.logsBloom ? block.logsBloom : null,
    nonce: block.nonce ? block.nonce : null,
    number: block.number ? BigInt(block.number) : null,
    size: block.size ? BigInt(block.size) : void 0,
    timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
    transactions,
    totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
  };
}
var defineBlock = defineFormatter("block", formatBlock);

// node_modules/@walletconnect/utils/node_modules/viem/_esm/actions/public/getTransactionCount.js
async function getTransactionCount(client, { address, blockTag = "latest", blockNumber }) {
  const count = await client.request({
    method: "eth_getTransactionCount",
    params: [address, blockNumber ? numberToHex(blockNumber) : blockTag]
  }, { dedupe: Boolean(blockNumber) });
  return hexToNumber(count);
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/constants/blob.js
var blobsPerTransaction = 6;
var bytesPerFieldElement = 32;
var fieldElementsPerBlob = 4096;
var bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;
var maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * fieldElementsPerBlob * blobsPerTransaction;

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/log.js
function formatLog(log, { args, eventName } = {}) {
  return {
    ...log,
    blockHash: log.blockHash ? log.blockHash : null,
    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
    logIndex: log.logIndex ? Number(log.logIndex) : null,
    transactionHash: log.transactionHash ? log.transactionHash : null,
    transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
    ...eventName ? { args, eventName } : {}
  };
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/actions/wallet/sendTransaction.js
var supportsWalletNamespace = new LruMap(128);

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/promise/withDedupe.js
var promiseCache = new LruMap(8192);

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/rpc/id.js
function createIdStore() {
  return {
    current: 0,
    take() {
      return this.current++;
    },
    reset() {
      this.current = 0;
    }
  };
}
var idCache = createIdStore();

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/transactionReceipt.js
var receiptStatuses = {
  "0x0": "reverted",
  "0x1": "success"
};
function formatTransactionReceipt(transactionReceipt) {
  const receipt = {
    ...transactionReceipt,
    blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
    contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
    effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
    gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
    logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog(log)) : null,
    to: transactionReceipt.to ? transactionReceipt.to : null,
    transactionIndex: transactionReceipt.transactionIndex ? hexToNumber(transactionReceipt.transactionIndex) : null,
    status: transactionReceipt.status ? receiptStatuses[transactionReceipt.status] : null,
    type: transactionReceipt.type ? transactionType[transactionReceipt.type] || transactionReceipt.type : null
  };
  if (transactionReceipt.blobGasPrice)
    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
  if (transactionReceipt.blobGasUsed)
    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
  return receipt;
}
var defineTransactionReceipt = defineFormatter("transactionReceipt", formatTransactionReceipt);

// node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/ripemd160.js
var Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
var Id = new Uint8Array(new Array(16).fill(0).map((_5, i4) => i4));
var Pi = Id.map((i4) => (9 * i4 + 5) % 16);
var idxL = [Id];
var idxR = [Pi];
for (let i4 = 0; i4 < 4; i4++)
  for (let j4 of [idxL, idxR])
    j4.push(j4[i4].map((k5) => Rho[k5]));
var shifts = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i4) => new Uint8Array(i4));
var shiftsL = idxL.map((idx, i4) => idx.map((j4) => shifts[i4][j4]));
var shiftsR = idxR.map((idx, i4) => idx.map((j4) => shifts[i4][j4]));
var Kl = new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr2 = new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function f3(group, x7, y4, z5) {
  if (group === 0)
    return x7 ^ y4 ^ z5;
  else if (group === 1)
    return x7 & y4 | ~x7 & z5;
  else if (group === 2)
    return (x7 | ~y4) ^ z5;
  else if (group === 3)
    return x7 & z5 | y4 & ~z5;
  else
    return x7 ^ (y4 | ~z5);
}
var R_BUF = new Uint32Array(16);
var RIPEMD160 = class extends HashMD {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      R_BUF[i4] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar4 = al, bl = this.h1 | 0, br4 = bl, cl = this.h2 | 0, cr4 = cl, dl = this.h3 | 0, dr4 = dl, el = this.h4 | 0, er4 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl[group], hbr = Kr2[group];
      const rl = idxL[group], rr4 = idxR[group];
      const sl = shiftsL[group], sr4 = shiftsR[group];
      for (let i4 = 0; i4 < 16; i4++) {
        const tl = rotl(al + f3(group, bl, cl, dl) + R_BUF[rl[i4]] + hbl, sl[i4]) + el | 0;
        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i4 = 0; i4 < 16; i4++) {
        const tr4 = rotl(ar4 + f3(rGroup, br4, cr4, dr4) + R_BUF[rr4[i4]] + hbr, sr4[i4]) + er4 | 0;
        ar4 = er4, er4 = dr4, dr4 = rotl(cr4, 10) | 0, cr4 = br4, br4 = tr4;
      }
    }
    this.set(this.h1 + cl + dr4 | 0, this.h2 + dl + er4 | 0, this.h3 + el + ar4 | 0, this.h4 + al + br4 | 0, this.h0 + bl + cr4 | 0);
  }
  roundClean() {
    R_BUF.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd160 = wrapConstructor(() => new RIPEMD160());

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/nonceManager.js
function createNonceManager(parameters) {
  const { source } = parameters;
  const deltaMap = /* @__PURE__ */ new Map();
  const nonceMap = new LruMap(8192);
  const promiseMap = /* @__PURE__ */ new Map();
  const getKey = ({ address, chainId }) => `${address}.${chainId}`;
  return {
    async consume({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      const promise = this.get({ address, chainId, client });
      this.increment({ address, chainId });
      const nonce = await promise;
      await source.set({ address, chainId }, nonce);
      nonceMap.set(key, nonce);
      return nonce;
    },
    async increment({ address, chainId }) {
      const key = getKey({ address, chainId });
      const delta = deltaMap.get(key) ?? 0;
      deltaMap.set(key, delta + 1);
    },
    async get({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      let promise = promiseMap.get(key);
      if (!promise) {
        promise = (async () => {
          try {
            const nonce = await source.get({ address, chainId, client });
            const previousNonce = nonceMap.get(key) ?? 0;
            if (previousNonce > 0 && nonce <= previousNonce)
              return previousNonce + 1;
            nonceMap.delete(key);
            return nonce;
          } finally {
            this.reset({ address, chainId });
          }
        })();
        promiseMap.set(key, promise);
      }
      const delta = deltaMap.get(key) ?? 0;
      return delta + await promise;
    },
    reset({ address, chainId }) {
      const key = getKey({ address, chainId });
      deltaMap.delete(key);
      promiseMap.delete(key);
    }
  };
}
function jsonRpc() {
  return {
    async get(parameters) {
      const { address, client } = parameters;
      return getTransactionCount(client, {
        address,
        blockTag: "pending"
      });
    },
    set() {
    }
  };
}
var nonceManager = createNonceManager({
  source: jsonRpc()
});

// node_modules/uint8arrays/esm/src/alloc.js
function allocUnsafe(size2 = 0) {
  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
    return globalThis.Buffer.allocUnsafe(size2);
  }
  return new Uint8Array(size2);
}

// node_modules/uint8arrays/esm/src/concat.js
function concat2(arrays, length2) {
  if (!length2) {
    length2 = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = allocUnsafe(length2);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return output;
}

// node_modules/multiformats/esm/src/bases/identity.js
var identity_exports = {};
__export(identity_exports, {
  identity: () => identity
});

// node_modules/multiformats/esm/vendor/base-x.js
function base(ALPHABET, name2) {
  if (ALPHABET.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  var BASE_MAP = new Uint8Array(256);
  for (var j4 = 0; j4 < BASE_MAP.length; j4++) {
    BASE_MAP[j4] = 255;
  }
  for (var i4 = 0; i4 < ALPHABET.length; i4++) {
    var x7 = ALPHABET.charAt(i4);
    var xc = x7.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) {
      throw new TypeError(x7 + " is ambiguous");
    }
    BASE_MAP[xc] = i4;
  }
  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256);
  var iFACTOR = Math.log(256) / Math.log(BASE);
  function encode6(source) {
    if (source instanceof Uint8Array) ;
    else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    var zeroes = 0;
    var length2 = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    var size2 = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size2);
    while (pbegin !== pend) {
      var carry = source[pbegin];
      var i5 = 0;
      for (var it1 = size2 - 1; (carry !== 0 || i5 < length2) && it1 !== -1; it1--, i5++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i5;
      pbegin++;
    }
    var it22 = size2 - length2;
    while (it22 !== size2 && b58[it22] === 0) {
      it22++;
    }
    var str = LEADER.repeat(zeroes);
    for (; it22 < size2; ++it22) {
      str += ALPHABET.charAt(b58[it22]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    var psz = 0;
    if (source[psz] === " ") {
      return;
    }
    var zeroes = 0;
    var length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    var size2 = (source.length - psz) * FACTOR + 1 >>> 0;
    var b256 = new Uint8Array(size2);
    while (source[psz]) {
      var carry = BASE_MAP[source.charCodeAt(psz)];
      if (carry === 255) {
        return;
      }
      var i5 = 0;
      for (var it3 = size2 - 1; (carry !== 0 || i5 < length2) && it3 !== -1; it3--, i5++) {
        carry += BASE * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i5;
      psz++;
    }
    if (source[psz] === " ") {
      return;
    }
    var it4 = size2 - length2;
    while (it4 !== size2 && b256[it4] === 0) {
      it4++;
    }
    var vch = new Uint8Array(zeroes + (size2 - it4));
    var j5 = zeroes;
    while (it4 !== size2) {
      vch[j5++] = b256[it4++];
    }
    return vch;
  }
  function decode6(string2) {
    var buffer = decodeUnsafe(string2);
    if (buffer) {
      return buffer;
    }
    throw new Error(`Non-${name2} character`);
  }
  return {
    encode: encode6,
    decodeUnsafe,
    decode: decode6
  };
}
var src = base;
var _brrp__multiformats_scope_baseX = src;
var base_x_default = _brrp__multiformats_scope_baseX;

// node_modules/multiformats/esm/src/bytes.js
var empty = new Uint8Array(0);
var equals = (aa, bb) => {
  if (aa === bb)
    return true;
  if (aa.byteLength !== bb.byteLength) {
    return false;
  }
  for (let ii3 = 0; ii3 < aa.byteLength; ii3++) {
    if (aa[ii3] !== bb[ii3]) {
      return false;
    }
  }
  return true;
};
var coerce = (o4) => {
  if (o4 instanceof Uint8Array && o4.constructor.name === "Uint8Array")
    return o4;
  if (o4 instanceof ArrayBuffer)
    return new Uint8Array(o4);
  if (ArrayBuffer.isView(o4)) {
    return new Uint8Array(o4.buffer, o4.byteOffset, o4.byteLength);
  }
  throw new Error("Unknown type, must be binary type");
};
var fromString = (str) => new TextEncoder().encode(str);
var toString = (b4) => new TextDecoder().decode(b4);

// node_modules/multiformats/esm/src/bases/base.js
var Encoder = class {
  constructor(name2, prefix, baseEncode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
  }
  encode(bytes) {
    if (bytes instanceof Uint8Array) {
      return `${this.prefix}${this.baseEncode(bytes)}`;
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};
var Decoder = class {
  constructor(name2, prefix, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    if (prefix.codePointAt(0) === void 0) {
      throw new Error("Invalid prefix character");
    }
    this.prefixCodePoint = prefix.codePointAt(0);
    this.baseDecode = baseDecode;
  }
  decode(text) {
    if (typeof text === "string") {
      if (text.codePointAt(0) !== this.prefixCodePoint) {
        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      }
      return this.baseDecode(text.slice(this.prefix.length));
    } else {
      throw Error("Can only multibase decode strings");
    }
  }
  or(decoder) {
    return or2(this, decoder);
  }
};
var ComposedDecoder = class {
  constructor(decoders) {
    this.decoders = decoders;
  }
  or(decoder) {
    return or2(this, decoder);
  }
  decode(input) {
    const prefix = input[0];
    const decoder = this.decoders[prefix];
    if (decoder) {
      return decoder.decode(input);
    } else {
      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
  }
};
var or2 = (left, right) => new ComposedDecoder({
  ...left.decoders || { [left.prefix]: left },
  ...right.decoders || { [right.prefix]: right }
});
var Codec = class {
  constructor(name2, prefix, baseEncode, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
    this.baseDecode = baseDecode;
    this.encoder = new Encoder(name2, prefix, baseEncode);
    this.decoder = new Decoder(name2, prefix, baseDecode);
  }
  encode(input) {
    return this.encoder.encode(input);
  }
  decode(input) {
    return this.decoder.decode(input);
  }
};
var from3 = ({ name: name2, prefix, encode: encode6, decode: decode6 }) => new Codec(name2, prefix, encode6, decode6);
var baseX = ({ prefix, name: name2, alphabet: alphabet2 }) => {
  const { encode: encode6, decode: decode6 } = base_x_default(alphabet2, name2);
  return from3({
    prefix,
    name: name2,
    encode: encode6,
    decode: (text) => coerce(decode6(text))
  });
};
var decode = (string2, alphabet2, bitsPerChar, name2) => {
  const codes = {};
  for (let i4 = 0; i4 < alphabet2.length; ++i4) {
    codes[alphabet2[i4]] = i4;
  }
  let end = string2.length;
  while (string2[end - 1] === "=") {
    --end;
  }
  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
  let bits = 0;
  let buffer = 0;
  let written = 0;
  for (let i4 = 0; i4 < end; ++i4) {
    const value = codes[string2[i4]];
    if (value === void 0) {
      throw new SyntaxError(`Non-${name2} character`);
    }
    buffer = buffer << bitsPerChar | value;
    bits += bitsPerChar;
    if (bits >= 8) {
      bits -= 8;
      out[written++] = 255 & buffer >> bits;
    }
  }
  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
    throw new SyntaxError("Unexpected end of data");
  }
  return out;
};
var encode2 = (data, alphabet2, bitsPerChar) => {
  const pad2 = alphabet2[alphabet2.length - 1] === "=";
  const mask = (1 << bitsPerChar) - 1;
  let out = "";
  let bits = 0;
  let buffer = 0;
  for (let i4 = 0; i4 < data.length; ++i4) {
    buffer = buffer << 8 | data[i4];
    bits += 8;
    while (bits > bitsPerChar) {
      bits -= bitsPerChar;
      out += alphabet2[mask & buffer >> bits];
    }
  }
  if (bits) {
    out += alphabet2[mask & buffer << bitsPerChar - bits];
  }
  if (pad2) {
    while (out.length * bitsPerChar & 7) {
      out += "=";
    }
  }
  return out;
};
var rfc4648 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet2 }) => {
  return from3({
    prefix,
    name: name2,
    encode(input) {
      return encode2(input, alphabet2, bitsPerChar);
    },
    decode(input) {
      return decode(input, alphabet2, bitsPerChar, name2);
    }
  });
};

// node_modules/multiformats/esm/src/bases/identity.js
var identity = from3({
  prefix: "\0",
  name: "identity",
  encode: (buf) => toString(buf),
  decode: (str) => fromString(str)
});

// node_modules/multiformats/esm/src/bases/base2.js
var base2_exports = {};
__export(base2_exports, {
  base2: () => base2
});
var base2 = rfc4648({
  prefix: "0",
  name: "base2",
  alphabet: "01",
  bitsPerChar: 1
});

// node_modules/multiformats/esm/src/bases/base8.js
var base8_exports = {};
__export(base8_exports, {
  base8: () => base8
});
var base8 = rfc4648({
  prefix: "7",
  name: "base8",
  alphabet: "01234567",
  bitsPerChar: 3
});

// node_modules/multiformats/esm/src/bases/base10.js
var base10_exports = {};
__export(base10_exports, {
  base10: () => base10
});
var base10 = baseX({
  prefix: "9",
  name: "base10",
  alphabet: "0123456789"
});

// node_modules/multiformats/esm/src/bases/base16.js
var base16_exports = {};
__export(base16_exports, {
  base16: () => base16,
  base16upper: () => base16upper
});
var base16 = rfc4648({
  prefix: "f",
  name: "base16",
  alphabet: "0123456789abcdef",
  bitsPerChar: 4
});
var base16upper = rfc4648({
  prefix: "F",
  name: "base16upper",
  alphabet: "0123456789ABCDEF",
  bitsPerChar: 4
});

// node_modules/multiformats/esm/src/bases/base32.js
var base32_exports = {};
__export(base32_exports, {
  base32: () => base32,
  base32hex: () => base32hex,
  base32hexpad: () => base32hexpad,
  base32hexpadupper: () => base32hexpadupper,
  base32hexupper: () => base32hexupper,
  base32pad: () => base32pad,
  base32padupper: () => base32padupper,
  base32upper: () => base32upper,
  base32z: () => base32z
});
var base32 = rfc4648({
  prefix: "b",
  name: "base32",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567",
  bitsPerChar: 5
});
var base32upper = rfc4648({
  prefix: "B",
  name: "base32upper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
  bitsPerChar: 5
});
var base32pad = rfc4648({
  prefix: "c",
  name: "base32pad",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
  bitsPerChar: 5
});
var base32padupper = rfc4648({
  prefix: "C",
  name: "base32padupper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
  bitsPerChar: 5
});
var base32hex = rfc4648({
  prefix: "v",
  name: "base32hex",
  alphabet: "0123456789abcdefghijklmnopqrstuv",
  bitsPerChar: 5
});
var base32hexupper = rfc4648({
  prefix: "V",
  name: "base32hexupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
  bitsPerChar: 5
});
var base32hexpad = rfc4648({
  prefix: "t",
  name: "base32hexpad",
  alphabet: "0123456789abcdefghijklmnopqrstuv=",
  bitsPerChar: 5
});
var base32hexpadupper = rfc4648({
  prefix: "T",
  name: "base32hexpadupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
  bitsPerChar: 5
});
var base32z = rfc4648({
  prefix: "h",
  name: "base32z",
  alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
  bitsPerChar: 5
});

// node_modules/multiformats/esm/src/bases/base36.js
var base36_exports = {};
__export(base36_exports, {
  base36: () => base36,
  base36upper: () => base36upper
});
var base36 = baseX({
  prefix: "k",
  name: "base36",
  alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
});
var base36upper = baseX({
  prefix: "K",
  name: "base36upper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
});

// node_modules/multiformats/esm/src/bases/base58.js
var base58_exports = {};
__export(base58_exports, {
  base58btc: () => base58btc,
  base58flickr: () => base58flickr
});
var base58btc = baseX({
  name: "base58btc",
  prefix: "z",
  alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
});
var base58flickr = baseX({
  name: "base58flickr",
  prefix: "Z",
  alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
});

// node_modules/multiformats/esm/src/bases/base64.js
var base64_exports = {};
__export(base64_exports, {
  base64: () => base64,
  base64pad: () => base64pad,
  base64url: () => base64url,
  base64urlpad: () => base64urlpad
});
var base64 = rfc4648({
  prefix: "m",
  name: "base64",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  bitsPerChar: 6
});
var base64pad = rfc4648({
  prefix: "M",
  name: "base64pad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  bitsPerChar: 6
});
var base64url = rfc4648({
  prefix: "u",
  name: "base64url",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
  bitsPerChar: 6
});
var base64urlpad = rfc4648({
  prefix: "U",
  name: "base64urlpad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
  bitsPerChar: 6
});

// node_modules/multiformats/esm/src/bases/base256emoji.js
var base256emoji_exports = {};
__export(base256emoji_exports, {
  base256emoji: () => base256emoji
});
var alphabet = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var alphabetBytesToChars = alphabet.reduce((p4, c6, i4) => {
  p4[i4] = c6;
  return p4;
}, []);
var alphabetCharsToBytes = alphabet.reduce((p4, c6, i4) => {
  p4[c6.codePointAt(0)] = i4;
  return p4;
}, []);
function encode3(data) {
  return data.reduce((p4, c6) => {
    p4 += alphabetBytesToChars[c6];
    return p4;
  }, "");
}
function decode2(str) {
  const byts = [];
  for (const char of str) {
    const byt = alphabetCharsToBytes[char.codePointAt(0)];
    if (byt === void 0) {
      throw new Error(`Non-base256emoji character: ${char}`);
    }
    byts.push(byt);
  }
  return new Uint8Array(byts);
}
var base256emoji = from3({
  prefix: "🚀",
  name: "base256emoji",
  encode: encode3,
  decode: decode2
});

// node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha2_browser_exports = {};
__export(sha2_browser_exports, {
  sha256: () => sha2563,
  sha512: () => sha512
});

// node_modules/multiformats/esm/vendor/varint.js
var encode_1 = encode4;
var MSB = 128;
var REST = 127;
var MSBALL = ~REST;
var INT = Math.pow(2, 31);
function encode4(num, out, offset) {
  out = out || [];
  offset = offset || 0;
  var oldOffset = offset;
  while (num >= INT) {
    out[offset++] = num & 255 | MSB;
    num /= 128;
  }
  while (num & MSBALL) {
    out[offset++] = num & 255 | MSB;
    num >>>= 7;
  }
  out[offset] = num | 0;
  encode4.bytes = offset - oldOffset + 1;
  return out;
}
var decode3 = read;
var MSB$1 = 128;
var REST$1 = 127;
function read(buf, offset) {
  var res = 0, offset = offset || 0, shift = 0, counter = offset, b4, l6 = buf.length;
  do {
    if (counter >= l6) {
      read.bytes = 0;
      throw new RangeError("Could not decode varint");
    }
    b4 = buf[counter++];
    res += shift < 28 ? (b4 & REST$1) << shift : (b4 & REST$1) * Math.pow(2, shift);
    shift += 7;
  } while (b4 >= MSB$1);
  read.bytes = counter - offset;
  return res;
}
var N1 = Math.pow(2, 7);
var N22 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);
var length = function(value) {
  return value < N1 ? 1 : value < N22 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};
var varint = {
  encode: encode_1,
  decode: decode3,
  encodingLength: length
};
var _brrp_varint = varint;
var varint_default = _brrp_varint;

// node_modules/multiformats/esm/src/varint.js
var decode4 = (data, offset = 0) => {
  const code2 = varint_default.decode(data, offset);
  return [
    code2,
    varint_default.decode.bytes
  ];
};
var encodeTo = (int, target, offset = 0) => {
  varint_default.encode(int, target, offset);
  return target;
};
var encodingLength = (int) => {
  return varint_default.encodingLength(int);
};

// node_modules/multiformats/esm/src/hashes/digest.js
var create = (code2, digest2) => {
  const size2 = digest2.byteLength;
  const sizeOffset = encodingLength(code2);
  const digestOffset = sizeOffset + encodingLength(size2);
  const bytes = new Uint8Array(digestOffset + size2);
  encodeTo(code2, bytes, 0);
  encodeTo(size2, bytes, sizeOffset);
  bytes.set(digest2, digestOffset);
  return new Digest(code2, size2, digest2, bytes);
};
var decode5 = (multihash) => {
  const bytes = coerce(multihash);
  const [code2, sizeOffset] = decode4(bytes);
  const [size2, digestOffset] = decode4(bytes.subarray(sizeOffset));
  const digest2 = bytes.subarray(sizeOffset + digestOffset);
  if (digest2.byteLength !== size2) {
    throw new Error("Incorrect length");
  }
  return new Digest(code2, size2, digest2, bytes);
};
var equals2 = (a3, b4) => {
  if (a3 === b4) {
    return true;
  } else {
    return a3.code === b4.code && a3.size === b4.size && equals(a3.bytes, b4.bytes);
  }
};
var Digest = class {
  constructor(code2, size2, digest2, bytes) {
    this.code = code2;
    this.size = size2;
    this.digest = digest2;
    this.bytes = bytes;
  }
};

// node_modules/multiformats/esm/src/hashes/hasher.js
var from4 = ({ name: name2, code: code2, encode: encode6 }) => new Hasher(name2, code2, encode6);
var Hasher = class {
  constructor(name2, code2, encode6) {
    this.name = name2;
    this.code = code2;
    this.encode = encode6;
  }
  digest(input) {
    if (input instanceof Uint8Array) {
      const result = this.encode(input);
      return result instanceof Uint8Array ? create(this.code, result) : result.then((digest2) => create(this.code, digest2));
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};

// node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha = (name2) => async (data) => new Uint8Array(await crypto.subtle.digest(name2, data));
var sha2563 = from4({
  name: "sha2-256",
  code: 18,
  encode: sha("SHA-256")
});
var sha512 = from4({
  name: "sha2-512",
  code: 19,
  encode: sha("SHA-512")
});

// node_modules/multiformats/esm/src/hashes/identity.js
var identity_exports2 = {};
__export(identity_exports2, {
  identity: () => identity2
});
var code = 0;
var name = "identity";
var encode5 = coerce;
var digest = (input) => create(code, encode5(input));
var identity2 = {
  code,
  name,
  encode: encode5,
  digest
};

// node_modules/multiformats/esm/src/codecs/json.js
var textEncoder = new TextEncoder();
var textDecoder = new TextDecoder();

// node_modules/multiformats/esm/src/cid.js
var CID = class _CID {
  constructor(version2, code2, multihash, bytes) {
    this.code = code2;
    this.version = version2;
    this.multihash = multihash;
    this.bytes = bytes;
    this.byteOffset = bytes.byteOffset;
    this.byteLength = bytes.byteLength;
    this.asCID = this;
    this._baseCache = /* @__PURE__ */ new Map();
    Object.defineProperties(this, {
      byteOffset: hidden,
      byteLength: hidden,
      code: readonly,
      version: readonly,
      multihash: readonly,
      bytes: readonly,
      _baseCache: hidden,
      asCID: hidden
    });
  }
  toV0() {
    switch (this.version) {
      case 0: {
        return this;
      }
      default: {
        const { code: code2, multihash } = this;
        if (code2 !== DAG_PB_CODE) {
          throw new Error("Cannot convert a non dag-pb CID to CIDv0");
        }
        if (multihash.code !== SHA_256_CODE) {
          throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
        }
        return _CID.createV0(multihash);
      }
    }
  }
  toV1() {
    switch (this.version) {
      case 0: {
        const { code: code2, digest: digest2 } = this.multihash;
        const multihash = create(code2, digest2);
        return _CID.createV1(this.code, multihash);
      }
      case 1: {
        return this;
      }
      default: {
        throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
      }
    }
  }
  equals(other) {
    return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);
  }
  toString(base3) {
    const { bytes, version: version2, _baseCache } = this;
    switch (version2) {
      case 0:
        return toStringV0(bytes, _baseCache, base3 || base58btc.encoder);
      default:
        return toStringV1(bytes, _baseCache, base3 || base32.encoder);
    }
  }
  toJSON() {
    return {
      code: this.code,
      version: this.version,
      hash: this.multihash.bytes
    };
  }
  get [Symbol.toStringTag]() {
    return "CID";
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return "CID(" + this.toString() + ")";
  }
  static isCID(value) {
    deprecate(/^0\.0/, IS_CID_DEPRECATION);
    return !!(value && (value[cidSymbol] || value.asCID === value));
  }
  get toBaseEncodedString() {
    throw new Error("Deprecated, use .toString()");
  }
  get codec() {
    throw new Error('"codec" property is deprecated, use integer "code" property instead');
  }
  get buffer() {
    throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
  }
  get multibaseName() {
    throw new Error('"multibaseName" property is deprecated');
  }
  get prefix() {
    throw new Error('"prefix" property is deprecated');
  }
  static asCID(value) {
    if (value instanceof _CID) {
      return value;
    } else if (value != null && value.asCID === value) {
      const { version: version2, code: code2, multihash, bytes } = value;
      return new _CID(version2, code2, multihash, bytes || encodeCID(version2, code2, multihash.bytes));
    } else if (value != null && value[cidSymbol] === true) {
      const { version: version2, multihash, code: code2 } = value;
      const digest2 = decode5(multihash);
      return _CID.create(version2, code2, digest2);
    } else {
      return null;
    }
  }
  static create(version2, code2, digest2) {
    if (typeof code2 !== "number") {
      throw new Error("String codecs are no longer supported");
    }
    switch (version2) {
      case 0: {
        if (code2 !== DAG_PB_CODE) {
          throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
        } else {
          return new _CID(version2, code2, digest2, digest2.bytes);
        }
      }
      case 1: {
        const bytes = encodeCID(version2, code2, digest2.bytes);
        return new _CID(version2, code2, digest2, bytes);
      }
      default: {
        throw new Error("Invalid version");
      }
    }
  }
  static createV0(digest2) {
    return _CID.create(0, DAG_PB_CODE, digest2);
  }
  static createV1(code2, digest2) {
    return _CID.create(1, code2, digest2);
  }
  static decode(bytes) {
    const [cid, remainder] = _CID.decodeFirst(bytes);
    if (remainder.length) {
      throw new Error("Incorrect length");
    }
    return cid;
  }
  static decodeFirst(bytes) {
    const specs = _CID.inspectBytes(bytes);
    const prefixSize = specs.size - specs.multihashSize;
    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
    if (multihashBytes.byteLength !== specs.multihashSize) {
      throw new Error("Incorrect length");
    }
    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
    const digest2 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
    const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
    return [
      cid,
      bytes.subarray(specs.size)
    ];
  }
  static inspectBytes(initialBytes) {
    let offset = 0;
    const next = () => {
      const [i4, length2] = decode4(initialBytes.subarray(offset));
      offset += length2;
      return i4;
    };
    let version2 = next();
    let codec = DAG_PB_CODE;
    if (version2 === 18) {
      version2 = 0;
      offset = 0;
    } else if (version2 === 1) {
      codec = next();
    }
    if (version2 !== 0 && version2 !== 1) {
      throw new RangeError(`Invalid CID version ${version2}`);
    }
    const prefixSize = offset;
    const multihashCode = next();
    const digestSize = next();
    const size2 = offset + digestSize;
    const multihashSize = size2 - prefixSize;
    return {
      version: version2,
      codec,
      multihashCode,
      digestSize,
      multihashSize,
      size: size2
    };
  }
  static parse(source, base3) {
    const [prefix, bytes] = parseCIDtoBytes(source, base3);
    const cid = _CID.decode(bytes);
    cid._baseCache.set(prefix, source);
    return cid;
  }
};
var parseCIDtoBytes = (source, base3) => {
  switch (source[0]) {
    case "Q": {
      const decoder = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder.decode(`${base58btc.prefix}${source}`)
      ];
    }
    case base58btc.prefix: {
      const decoder = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder.decode(source)
      ];
    }
    case base32.prefix: {
      const decoder = base3 || base32;
      return [
        base32.prefix,
        decoder.decode(source)
      ];
    }
    default: {
      if (base3 == null) {
        throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
      }
      return [
        source[0],
        base3.decode(source)
      ];
    }
  }
};
var toStringV0 = (bytes, cache, base3) => {
  const { prefix } = base3;
  if (prefix !== base58btc.prefix) {
    throw Error(`Cannot string encode V0 in ${base3.name} encoding`);
  }
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes).slice(1);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var toStringV1 = (bytes, cache, base3) => {
  const { prefix } = base3;
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var DAG_PB_CODE = 112;
var SHA_256_CODE = 18;
var encodeCID = (version2, code2, multihash) => {
  const codeOffset = encodingLength(version2);
  const hashOffset = codeOffset + encodingLength(code2);
  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
  encodeTo(version2, bytes, 0);
  encodeTo(code2, bytes, codeOffset);
  bytes.set(multihash, hashOffset);
  return bytes;
};
var cidSymbol = Symbol.for("@ipld/js-cid/CID");
var readonly = {
  writable: false,
  configurable: false,
  enumerable: true
};
var hidden = {
  writable: false,
  enumerable: false,
  configurable: false
};
var version = "0.0.0-dev";
var deprecate = (range, message) => {
  if (range.test(version)) {
    console.warn(message);
  } else {
    throw new Error(message);
  }
};
var IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;

// node_modules/multiformats/esm/src/basics.js
var bases = {
  ...identity_exports,
  ...base2_exports,
  ...base8_exports,
  ...base10_exports,
  ...base16_exports,
  ...base32_exports,
  ...base36_exports,
  ...base58_exports,
  ...base64_exports,
  ...base256emoji_exports
};
var hashes = {
  ...sha2_browser_exports,
  ...identity_exports2
};

// node_modules/uint8arrays/esm/src/util/bases.js
function createCodec(name2, prefix, encode6, decode6) {
  return {
    name: name2,
    prefix,
    encoder: {
      name: name2,
      prefix,
      encode: encode6
    },
    decoder: { decode: decode6 }
  };
}
var string = createCodec("utf8", "u", (buf) => {
  const decoder = new TextDecoder("utf8");
  return "u" + decoder.decode(buf);
}, (str) => {
  const encoder = new TextEncoder();
  return encoder.encode(str.substring(1));
});
var ascii = createCodec("ascii", "a", (buf) => {
  let string2 = "a";
  for (let i4 = 0; i4 < buf.length; i4++) {
    string2 += String.fromCharCode(buf[i4]);
  }
  return string2;
}, (str) => {
  str = str.substring(1);
  const buf = allocUnsafe(str.length);
  for (let i4 = 0; i4 < str.length; i4++) {
    buf[i4] = str.charCodeAt(i4);
  }
  return buf;
});
var BASES = {
  utf8: string,
  "utf-8": string,
  hex: bases.base16,
  latin1: ascii,
  ascii,
  binary: ascii,
  ...bases
};
var bases_default = BASES;

// node_modules/uint8arrays/esm/src/from-string.js
function fromString2(string2, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(string2, "utf8");
  }
  return base3.decoder.decode(`${base3.prefix}${string2}`);
}

// node_modules/uint8arrays/esm/src/to-string.js
function toString2(array, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
  }
  return base3.encoder.encode(array).substring(1);
}

// node_modules/@walletconnect/utils/dist/index.es.js
var import_elliptic = __toESM(require_elliptic());

// node_modules/@walletconnect/relay-api/dist/index.es.js
var C2 = { waku: { publish: "waku_publish", batchPublish: "waku_batchPublish", subscribe: "waku_subscribe", batchSubscribe: "waku_batchSubscribe", subscription: "waku_subscription", unsubscribe: "waku_unsubscribe", batchUnsubscribe: "waku_batchUnsubscribe", batchFetchMessages: "waku_batchFetchMessages" }, irn: { publish: "irn_publish", batchPublish: "irn_batchPublish", subscribe: "irn_subscribe", batchSubscribe: "irn_batchSubscribe", subscription: "irn_subscription", unsubscribe: "irn_unsubscribe", batchUnsubscribe: "irn_batchUnsubscribe", batchFetchMessages: "irn_batchFetchMessages" }, iridium: { publish: "iridium_publish", batchPublish: "iridium_batchPublish", subscribe: "iridium_subscribe", batchSubscribe: "iridium_batchSubscribe", subscription: "iridium_subscription", unsubscribe: "iridium_unsubscribe", batchUnsubscribe: "iridium_batchUnsubscribe", batchFetchMessages: "iridium_batchFetchMessages" } };

// node_modules/@walletconnect/utils/dist/index.es.js
var Pe2 = ":";
function Ye2(e2) {
  const [t, n5] = e2.split(Pe2);
  return { namespace: t, reference: n5 };
}
function Xe2(e2) {
  const [t, n5, r3] = e2.split(Pe2);
  return { namespace: t, reference: n5, address: r3 };
}
function Hr2(e2, t = []) {
  const n5 = [];
  return Object.keys(e2).forEach((r3) => {
    if (t.length && !t.includes(r3)) return;
    const o4 = e2[r3];
    n5.push(...o4.accounts);
  }), n5;
}
function Le2(e2, t) {
  return e2.includes(":") ? [e2] : t.chains || [];
}
var Ft2 = "ReactNative";
var H2 = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
var Gt2 = "js";
function et() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function ne() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === Ft2;
}
function Wr2() {
  return ne() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "android";
}
function zr2() {
  return ne() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "ios";
}
function Ae2() {
  return !et() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function ue() {
  return ne() ? H2.reactNative : et() ? H2.node : Ae2() ? H2.browser : H2.unknown;
}
function Jr2() {
  var e2;
  try {
    return ne() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u" ? (e2 = global.Application) == null ? void 0 : e2.applicationId : void 0;
  } catch {
    return;
  }
}
function Wt2(e2, t) {
  const n5 = new URLSearchParams(e2);
  for (const r3 of Object.keys(t).sort()) if (t.hasOwnProperty(r3)) {
    const o4 = t[r3];
    o4 !== void 0 && n5.set(r3, o4);
  }
  return n5.toString();
}
function Yr2() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function zt2() {
  if (ue() === H2.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: n5, Version: r3 } = global.Platform;
    return [n5, r3].join("-");
  }
  const e2 = detect();
  if (e2 === null) return "unknown";
  const t = e2.os ? e2.os.replace(" ", "").toLowerCase() : "unknown";
  return e2.type === "browser" ? [t, e2.name, e2.version].join("-") : [t, e2.version].join("-");
}
function Jt2() {
  var e2;
  const t = ue();
  return t === H2.browser ? [t, ((e2 = (0, import_window_getters.getLocation)()) == null ? void 0 : e2.host) || "unknown"].join(":") : t;
}
function Yt2(e2, t, n5) {
  const r3 = zt2(), o4 = Jt2();
  return [[e2, t].join("-"), [Gt2, n5].join("-"), r3, o4].join("/");
}
function Zr2({ protocol: e2, version: t, relayUrl: n5, sdkVersion: r3, auth: o4, projectId: s3, useOnCloseEvent: i4, bundleId: c6, packageName: u2 }) {
  const a3 = n5.split("?"), l6 = Yt2(e2, t, r3), f6 = { auth: o4, ua: l6, projectId: s3, useOnCloseEvent: i4 || void 0, packageName: u2 || void 0, bundleId: c6 || void 0 }, d5 = Wt2(a3[1] || "", f6);
  return a3[0] + "?" + d5;
}
function re(e2, t) {
  return e2.filter((n5) => t.includes(n5)).length === e2.length;
}
function no2(e2) {
  return Object.fromEntries(e2.entries());
}
function ro2(e2) {
  return new Map(Object.entries(e2));
}
function co2(e2 = import_time3.FIVE_MINUTES, t) {
  const n5 = (0, import_time3.toMiliseconds)(e2 || import_time3.FIVE_MINUTES);
  let r3, o4, s3, i4;
  return { resolve: (c6) => {
    s3 && r3 && (clearTimeout(s3), r3(c6), i4 = Promise.resolve(c6));
  }, reject: (c6) => {
    s3 && o4 && (clearTimeout(s3), o4(c6));
  }, done: () => new Promise((c6, u2) => {
    if (i4) return c6(i4);
    s3 = setTimeout(() => {
      const a3 = new Error(t);
      i4 = Promise.reject(a3), u2(a3);
    }, n5), r3 = c6, o4 = u2;
  }) };
}
function ao2(e2, t, n5) {
  return new Promise(async (r3, o4) => {
    const s3 = setTimeout(() => o4(new Error(n5)), t);
    try {
      const i4 = await e2;
      r3(i4);
    } catch (i4) {
      o4(i4);
    }
    clearTimeout(s3);
  });
}
function tt(e2, t) {
  if (typeof t == "string" && t.startsWith(`${e2}:`)) return t;
  if (e2.toLowerCase() === "topic") {
    if (typeof t != "string") throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${t}`;
  } else if (e2.toLowerCase() === "id") {
    if (typeof t != "number") throw new Error('Value must be "number" for expirer target type: id');
    return `id:${t}`;
  }
  throw new Error(`Unknown expirer target type: ${e2}`);
}
function uo2(e2) {
  return tt("topic", e2);
}
function fo2(e2) {
  return tt("id", e2);
}
function lo2(e2) {
  const [t, n5] = e2.split(":"), r3 = { id: void 0, topic: void 0 };
  if (t === "topic" && typeof n5 == "string") r3.topic = n5;
  else if (t === "id" && Number.isInteger(Number(n5))) r3.id = Number(n5);
  else throw new Error(`Invalid target, expected id:number or topic:string, got ${t}:${n5}`);
  return r3;
}
function ho2(e2, t) {
  return (0, import_time3.fromMiliseconds)((t || Date.now()) + (0, import_time3.toMiliseconds)(e2));
}
function po2(e2) {
  return Date.now() >= (0, import_time3.toMiliseconds)(e2);
}
function go2(e2, t) {
  return `${e2}${t ? `:${t}` : ""}`;
}
function Q2(e2 = [], t = []) {
  return [.../* @__PURE__ */ new Set([...e2, ...t])];
}
async function yo2({ id: e2, topic: t, wcDeepLink: n5 }) {
  var r3;
  try {
    if (!n5) return;
    const o4 = typeof n5 == "string" ? JSON.parse(n5) : n5, s3 = o4 == null ? void 0 : o4.href;
    if (typeof s3 != "string") return;
    const i4 = en2(s3, e2, t), c6 = ue();
    if (c6 === H2.browser) {
      if (!((r3 = (0, import_window_getters.getDocument)()) != null && r3.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      tn(i4);
    } else c6 === H2.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(i4);
  } catch (o4) {
    console.error(o4);
  }
}
function en2(e2, t, n5) {
  const r3 = `requestId=${t}&sessionTopic=${n5}`;
  e2.endsWith("/") && (e2 = e2.slice(0, -1));
  let o4 = `${e2}`;
  if (e2.startsWith("https://t.me")) {
    const s3 = e2.includes("?") ? "&startapp=" : "?startapp=";
    o4 = `${o4}${s3}${on2(r3, true)}`;
  } else o4 = `${o4}/wc?${r3}`;
  return o4;
}
function tn(e2) {
  let t = "_self";
  rn2() ? t = "_top" : (nn2() || e2.startsWith("https://") || e2.startsWith("http://")) && (t = "_blank"), window.open(e2, t, "noreferrer noopener");
}
async function mo2(e2, t) {
  let n5 = "";
  try {
    if (Ae2() && (n5 = localStorage.getItem(t), n5)) return n5;
    n5 = await e2.getItem(t);
  } catch (r3) {
    console.error(r3);
  }
  return n5;
}
function bo2(e2, t) {
  if (!e2.includes(t)) return null;
  const n5 = e2.split(/([&,?,=])/), r3 = n5.indexOf(t);
  return n5[r3 + 2];
}
function wo2() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (e2) => {
    const t = Math.random() * 16 | 0;
    return (e2 === "x" ? t : t & 3 | 8).toString(16);
  });
}
function Eo2() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function nn2() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function rn2() {
  try {
    return window.self !== window.top;
  } catch {
    return false;
  }
}
function on2(e2, t = false) {
  const n5 = Buffer.from(e2).toString("base64");
  return t ? n5.replace(/[=]/g, "") : n5;
}
function rt2(e2) {
  return Buffer.from(e2, "base64").toString("utf-8");
}
function vo2(e2) {
  return new Promise((t) => setTimeout(t, e2));
}
function Ne2(e2) {
  if (!Number.isSafeInteger(e2) || e2 < 0) throw new Error("positive integer expected, got " + e2);
}
function xo2(e2) {
  return e2 instanceof Uint8Array || ArrayBuffer.isView(e2) && e2.constructor.name === "Uint8Array";
}
function je2(e2, ...t) {
  if (!xo2(e2)) throw new Error("Uint8Array expected");
  if (t.length > 0 && !t.includes(e2.length)) throw new Error("Uint8Array expected of length " + t + ", got length=" + e2.length);
}
function ot(e2) {
  if (typeof e2 != "function" || typeof e2.create != "function") throw new Error("Hash should be wrapped by utils.wrapConstructor");
  Ne2(e2.outputLen), Ne2(e2.blockLen);
}
function me2(e2, t = true) {
  if (e2.destroyed) throw new Error("Hash instance has been destroyed");
  if (t && e2.finished) throw new Error("Hash#digest() has already been called");
}
function sn2(e2, t) {
  je2(e2);
  const n5 = t.outputLen;
  if (e2.length < n5) throw new Error("digestInto() expects output buffer of length at least " + n5);
}
var Ce2 = BigInt(2 ** 32 - 1);
var cn = BigInt(32);
function Oo2(e2, t = false) {
  return t ? { h: Number(e2 & Ce2), l: Number(e2 >> cn & Ce2) } : { h: Number(e2 >> cn & Ce2) | 0, l: Number(e2 & Ce2) | 0 };
}
function Io2(e2, t = false) {
  let n5 = new Uint32Array(e2.length), r3 = new Uint32Array(e2.length);
  for (let o4 = 0; o4 < e2.length; o4++) {
    const { h: s3, l: i4 } = Oo2(e2[o4], t);
    [n5[o4], r3[o4]] = [s3, i4];
  }
  return [n5, r3];
}
var Ao2 = (e2, t, n5) => e2 << n5 | t >>> 32 - n5;
var No2 = (e2, t, n5) => t << n5 | e2 >>> 32 - n5;
var So2 = (e2, t, n5) => t << n5 - 32 | e2 >>> 64 - n5;
var Uo2 = (e2, t, n5) => e2 << n5 - 32 | t >>> 64 - n5;
var be2 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function _o2(e2) {
  return new Uint32Array(e2.buffer, e2.byteOffset, Math.floor(e2.byteLength / 4));
}
function st(e2) {
  return new DataView(e2.buffer, e2.byteOffset, e2.byteLength);
}
function J3(e2, t) {
  return e2 << 32 - t | e2 >>> t;
}
var an = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function To2(e2) {
  return e2 << 24 & 4278190080 | e2 << 8 & 16711680 | e2 >>> 8 & 65280 | e2 >>> 24 & 255;
}
function un(e2) {
  for (let t = 0; t < e2.length; t++) e2[t] = To2(e2[t]);
}
function $o2(e2) {
  if (typeof e2 != "string") throw new Error("utf8ToBytes expected string, got " + typeof e2);
  return new Uint8Array(new TextEncoder().encode(e2));
}
function we2(e2) {
  return typeof e2 == "string" && (e2 = $o2(e2)), je2(e2), e2;
}
var it2 = class {
  clone() {
    return this._cloneInto();
  }
};
function fn(e2) {
  const t = (r3) => e2().update(we2(r3)).digest(), n5 = e2();
  return t.outputLen = n5.outputLen, t.blockLen = n5.blockLen, t.create = () => e2(), t;
}
function Se2(e2 = 32) {
  if (be2 && typeof be2.getRandomValues == "function") return be2.getRandomValues(new Uint8Array(e2));
  if (be2 && typeof be2.randomBytes == "function") return be2.randomBytes(e2);
  throw new Error("crypto.getRandomValues must be defined");
}
var ln = [];
var dn = [];
var hn = [];
var Ro2 = BigInt(0);
var Ue2 = BigInt(1);
var Po2 = BigInt(2);
var Lo2 = BigInt(7);
var Bo2 = BigInt(256);
var jo2 = BigInt(113);
for (let e2 = 0, t = Ue2, n5 = 1, r3 = 0; e2 < 24; e2++) {
  [n5, r3] = [r3, (2 * n5 + 3 * r3) % 5], ln.push(2 * (5 * r3 + n5)), dn.push((e2 + 1) * (e2 + 2) / 2 % 64);
  let o4 = Ro2;
  for (let s3 = 0; s3 < 7; s3++) t = (t << Ue2 ^ (t >> Lo2) * jo2) % Bo2, t & Po2 && (o4 ^= Ue2 << (Ue2 << BigInt(s3)) - Ue2);
  hn.push(o4);
}
var [Co2, ko2] = Io2(hn, true);
var pn = (e2, t, n5) => n5 > 32 ? So2(e2, t, n5) : Ao2(e2, t, n5);
var gn2 = (e2, t, n5) => n5 > 32 ? Uo2(e2, t, n5) : No2(e2, t, n5);
function Do2(e2, t = 24) {
  const n5 = new Uint32Array(10);
  for (let r3 = 24 - t; r3 < 24; r3++) {
    for (let i4 = 0; i4 < 10; i4++) n5[i4] = e2[i4] ^ e2[i4 + 10] ^ e2[i4 + 20] ^ e2[i4 + 30] ^ e2[i4 + 40];
    for (let i4 = 0; i4 < 10; i4 += 2) {
      const c6 = (i4 + 8) % 10, u2 = (i4 + 2) % 10, a3 = n5[u2], l6 = n5[u2 + 1], f6 = pn(a3, l6, 1) ^ n5[c6], d5 = gn2(a3, l6, 1) ^ n5[c6 + 1];
      for (let g3 = 0; g3 < 50; g3 += 10) e2[i4 + g3] ^= f6, e2[i4 + g3 + 1] ^= d5;
    }
    let o4 = e2[2], s3 = e2[3];
    for (let i4 = 0; i4 < 24; i4++) {
      const c6 = dn[i4], u2 = pn(o4, s3, c6), a3 = gn2(o4, s3, c6), l6 = ln[i4];
      o4 = e2[l6], s3 = e2[l6 + 1], e2[l6] = u2, e2[l6 + 1] = a3;
    }
    for (let i4 = 0; i4 < 50; i4 += 10) {
      for (let c6 = 0; c6 < 10; c6++) n5[c6] = e2[i4 + c6];
      for (let c6 = 0; c6 < 10; c6++) e2[i4 + c6] ^= ~n5[(c6 + 2) % 10] & n5[(c6 + 4) % 10];
    }
    e2[0] ^= Co2[r3], e2[1] ^= ko2[r3];
  }
  n5.fill(0);
}
var Bt2 = class _Bt extends it2 {
  constructor(t, n5, r3, o4 = false, s3 = 24) {
    if (super(), this.blockLen = t, this.suffix = n5, this.outputLen = r3, this.enableXOF = o4, this.rounds = s3, this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, Ne2(r3), 0 >= this.blockLen || this.blockLen >= 200) throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200), this.state32 = _o2(this.state);
  }
  keccak() {
    an || un(this.state32), Do2(this.state32, this.rounds), an || un(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(t) {
    me2(this);
    const { blockLen: n5, state: r3 } = this;
    t = we2(t);
    const o4 = t.length;
    for (let s3 = 0; s3 < o4; ) {
      const i4 = Math.min(n5 - this.pos, o4 - s3);
      for (let c6 = 0; c6 < i4; c6++) r3[this.pos++] ^= t[s3++];
      this.pos === n5 && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished) return;
    this.finished = true;
    const { state: t, suffix: n5, pos: r3, blockLen: o4 } = this;
    t[r3] ^= n5, (n5 & 128) !== 0 && r3 === o4 - 1 && this.keccak(), t[o4 - 1] ^= 128, this.keccak();
  }
  writeInto(t) {
    me2(this, false), je2(t), this.finish();
    const n5 = this.state, { blockLen: r3 } = this;
    for (let o4 = 0, s3 = t.length; o4 < s3; ) {
      this.posOut >= r3 && this.keccak();
      const i4 = Math.min(r3 - this.posOut, s3 - o4);
      t.set(n5.subarray(this.posOut, this.posOut + i4), o4), this.posOut += i4, o4 += i4;
    }
    return t;
  }
  xofInto(t) {
    if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
    return this.writeInto(t);
  }
  xof(t) {
    return Ne2(t), this.xofInto(new Uint8Array(t));
  }
  digestInto(t) {
    if (sn2(t, this), this.finished) throw new Error("digest() was already called");
    return this.writeInto(t), this.destroy(), t;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, this.state.fill(0);
  }
  _cloneInto(t) {
    const { blockLen: n5, suffix: r3, outputLen: o4, rounds: s3, enableXOF: i4 } = this;
    return t || (t = new _Bt(n5, r3, o4, i4, s3)), t.state32.set(this.state32), t.pos = this.pos, t.posOut = this.posOut, t.finished = this.finished, t.rounds = s3, t.suffix = r3, t.outputLen = o4, t.enableXOF = i4, t.destroyed = this.destroyed, t;
  }
};
var Mo2 = (e2, t, n5) => fn(() => new Bt2(t, e2, n5));
var Vo2 = Mo2(1, 136, 256 / 8);
var Ho2 = "https://rpc.walletconnect.org/v1";
function ct2(e2) {
  const t = `Ethereum Signed Message:
${e2.length}`, n5 = new TextEncoder().encode(t + e2);
  return "0x" + Buffer.from(Vo2(n5)).toString("hex");
}
async function yn2(e2, t, n5, r3, o4, s3) {
  switch (n5.t) {
    case "eip191":
      return await mn2(e2, t, n5.s);
    case "eip1271":
      return await bn2(e2, t, n5.s, r3, o4, s3);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${n5.t}`);
  }
}
async function mn2(e2, t, n5) {
  return (await recoverAddress({ hash: ct2(t), signature: n5 })).toLowerCase() === e2.toLowerCase();
}
async function bn2(e2, t, n5, r3, o4, s3) {
  const i4 = Ye2(r3);
  if (!i4.namespace || !i4.reference) throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r3}`);
  try {
    const c6 = "0x1626ba7e", u2 = "0000000000000000000000000000000000000000000000000000000000000040", a3 = "0000000000000000000000000000000000000000000000000000000000000041", l6 = n5.substring(2), f6 = ct2(t).substring(2), d5 = c6 + f6 + u2 + a3 + l6, g3 = await fetch(`${s3 || Ho2}/?chainId=${r3}&projectId=${o4}`, { method: "POST", body: JSON.stringify({ id: Ko2(), jsonrpc: "2.0", method: "eth_call", params: [{ to: e2, data: d5 }, "latest"] }) }), { result: y4 } = await g3.json();
    return y4 ? y4.slice(0, c6.length).toLowerCase() === c6.toLowerCase() : false;
  } catch (c6) {
    return console.error("isValidEip1271Signature: ", c6), false;
  }
}
function Ko2() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
var Fo2 = Object.defineProperty;
var qo2 = Object.defineProperties;
var Go2 = Object.getOwnPropertyDescriptors;
var wn = Object.getOwnPropertySymbols;
var Wo2 = Object.prototype.hasOwnProperty;
var zo2 = Object.prototype.propertyIsEnumerable;
var En2 = (e2, t, n5) => t in e2 ? Fo2(e2, t, { enumerable: true, configurable: true, writable: true, value: n5 }) : e2[t] = n5;
var at = (e2, t) => {
  for (var n5 in t || (t = {})) Wo2.call(t, n5) && En2(e2, n5, t[n5]);
  if (wn) for (var n5 of wn(t)) zo2.call(t, n5) && En2(e2, n5, t[n5]);
  return e2;
};
var vn2 = (e2, t) => qo2(e2, Go2(t));
var Jo2 = "did:pkh:";
var ke2 = (e2) => e2 == null ? void 0 : e2.split(":");
var xn2 = (e2) => {
  const t = e2 && ke2(e2);
  if (t) return e2.includes(Jo2) ? t[3] : t[1];
};
var On2 = (e2) => {
  const t = e2 && ke2(e2);
  if (t) return t[2] + ":" + t[3];
};
var ut2 = (e2) => {
  const t = e2 && ke2(e2);
  if (t) return t.pop();
};
async function Yo2(e2) {
  const { cacao: t, projectId: n5 } = e2, { s: r3, p: o4 } = t, s3 = In2(o4, o4.iss), i4 = ut2(o4.iss);
  return await yn2(i4, s3, r3, On2(o4.iss), n5);
}
var In2 = (e2, t) => {
  const n5 = `${e2.domain} wants you to sign in with your Ethereum account:`, r3 = ut2(t);
  if (!e2.aud && !e2.uri) throw new Error("Either `aud` or `uri` is required to construct the message");
  let o4 = e2.statement || void 0;
  const s3 = `URI: ${e2.aud || e2.uri}`, i4 = `Version: ${e2.version}`, c6 = `Chain ID: ${xn2(t)}`, u2 = `Nonce: ${e2.nonce}`, a3 = `Issued At: ${e2.iat}`, l6 = e2.exp ? `Expiration Time: ${e2.exp}` : void 0, f6 = e2.nbf ? `Not Before: ${e2.nbf}` : void 0, d5 = e2.requestId ? `Request ID: ${e2.requestId}` : void 0, g3 = e2.resources ? `Resources:${e2.resources.map((h5) => `
- ${h5}`).join("")}` : void 0, y4 = Me2(e2.resources);
  if (y4) {
    const h5 = oe(y4);
    o4 = dt2(o4, h5);
  }
  return [n5, r3, "", o4, "", s3, i4, c6, u2, a3, l6, f6, d5, g3].filter((h5) => h5 != null).join(`
`);
};
function Un2(e2) {
  return Buffer.from(JSON.stringify(e2)).toString("base64");
}
function _n2(e2) {
  return JSON.parse(Buffer.from(e2, "base64").toString("utf-8"));
}
function Y(e2) {
  if (!e2) throw new Error("No recap provided, value is undefined");
  if (!e2.att) throw new Error("No `att` property found");
  const t = Object.keys(e2.att);
  if (!(t != null && t.length)) throw new Error("No resources found in `att` property");
  t.forEach((n5) => {
    const r3 = e2.att[n5];
    if (Array.isArray(r3)) throw new Error(`Resource must be an object: ${n5}`);
    if (typeof r3 != "object") throw new Error(`Resource must be an object: ${n5}`);
    if (!Object.keys(r3).length) throw new Error(`Resource object is empty: ${n5}`);
    Object.keys(r3).forEach((o4) => {
      const s3 = r3[o4];
      if (!Array.isArray(s3)) throw new Error(`Ability limits ${o4} must be an array of objects, found: ${s3}`);
      if (!s3.length) throw new Error(`Value of ${o4} is empty array, must be an array with objects`);
      s3.forEach((i4) => {
        if (typeof i4 != "object") throw new Error(`Ability limits (${o4}) must be an array of objects, found: ${i4}`);
      });
    });
  });
}
function Tn2(e2, t, n5, r3 = {}) {
  return n5 == null ? void 0 : n5.sort((o4, s3) => o4.localeCompare(s3)), { att: { [e2]: ft2(t, n5, r3) } };
}
function ft2(e2, t, n5 = {}) {
  t = t == null ? void 0 : t.sort((o4, s3) => o4.localeCompare(s3));
  const r3 = t.map((o4) => ({ [`${e2}/${o4}`]: [n5] }));
  return Object.assign({}, ...r3);
}
function De2(e2) {
  return Y(e2), `urn:recap:${Un2(e2).replace(/=/g, "")}`;
}
function oe(e2) {
  const t = _n2(e2.replace("urn:recap:", ""));
  return Y(t), t;
}
function ts(e2, t, n5) {
  const r3 = Tn2(e2, t, n5);
  return De2(r3);
}
function lt2(e2) {
  return e2 && e2.includes("urn:recap:");
}
function ns(e2, t) {
  const n5 = oe(e2), r3 = oe(t), o4 = Rn2(n5, r3);
  return De2(o4);
}
function Rn2(e2, t) {
  Y(e2), Y(t);
  const n5 = Object.keys(e2.att).concat(Object.keys(t.att)).sort((o4, s3) => o4.localeCompare(s3)), r3 = { att: {} };
  return n5.forEach((o4) => {
    var s3, i4;
    Object.keys(((s3 = e2.att) == null ? void 0 : s3[o4]) || {}).concat(Object.keys(((i4 = t.att) == null ? void 0 : i4[o4]) || {})).sort((c6, u2) => c6.localeCompare(u2)).forEach((c6) => {
      var u2, a3;
      r3.att[o4] = vn2(at({}, r3.att[o4]), { [c6]: ((u2 = e2.att[o4]) == null ? void 0 : u2[c6]) || ((a3 = t.att[o4]) == null ? void 0 : a3[c6]) });
    });
  }), r3;
}
function dt2(e2 = "", t) {
  Y(t);
  const n5 = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (e2.includes(n5)) return e2;
  const r3 = [];
  let o4 = 0;
  Object.keys(t.att).forEach((c6) => {
    const u2 = Object.keys(t.att[c6]).map((f6) => ({ ability: f6.split("/")[0], action: f6.split("/")[1] }));
    u2.sort((f6, d5) => f6.action.localeCompare(d5.action));
    const a3 = {};
    u2.forEach((f6) => {
      a3[f6.ability] || (a3[f6.ability] = []), a3[f6.ability].push(f6.action);
    });
    const l6 = Object.keys(a3).map((f6) => (o4++, `(${o4}) '${f6}': '${a3[f6].join("', '")}' for '${c6}'.`));
    r3.push(l6.join(", ").replace(".,", "."));
  });
  const s3 = r3.join(" "), i4 = `${n5}${s3}`;
  return `${e2 ? e2 + " " : ""}${i4}`;
}
function rs(e2) {
  var t;
  const n5 = oe(e2);
  Y(n5);
  const r3 = (t = n5.att) == null ? void 0 : t.eip155;
  return r3 ? Object.keys(r3).map((o4) => o4.split("/")[1]) : [];
}
function os(e2) {
  const t = oe(e2);
  Y(t);
  const n5 = [];
  return Object.values(t.att).forEach((r3) => {
    Object.values(r3).forEach((o4) => {
      var s3;
      (s3 = o4 == null ? void 0 : o4[0]) != null && s3.chains && n5.push(o4[0].chains);
    });
  }), [...new Set(n5.flat())];
}
function Me2(e2) {
  if (!e2) return;
  const t = e2 == null ? void 0 : e2[e2.length - 1];
  return lt2(t) ? t : void 0;
}
function ht2(e2) {
  if (!Number.isSafeInteger(e2) || e2 < 0) throw new Error("positive integer expected, got " + e2);
}
function Ln2(e2) {
  return e2 instanceof Uint8Array || ArrayBuffer.isView(e2) && e2.constructor.name === "Uint8Array";
}
function F(e2, ...t) {
  if (!Ln2(e2)) throw new Error("Uint8Array expected");
  if (t.length > 0 && !t.includes(e2.length)) throw new Error("Uint8Array expected of length " + t + ", got length=" + e2.length);
}
function Bn2(e2, t = true) {
  if (e2.destroyed) throw new Error("Hash instance has been destroyed");
  if (t && e2.finished) throw new Error("Hash#digest() has already been called");
}
function ss(e2, t) {
  F(e2);
  const n5 = t.outputLen;
  if (e2.length < n5) throw new Error("digestInto() expects output buffer of length at least " + n5);
}
function jn2(e2) {
  if (typeof e2 != "boolean") throw new Error(`boolean expected, not ${e2}`);
}
var se = (e2) => new Uint32Array(e2.buffer, e2.byteOffset, Math.floor(e2.byteLength / 4));
var is = (e2) => new DataView(e2.buffer, e2.byteOffset, e2.byteLength);
var cs = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!cs) throw new Error("Non little-endian hardware is not supported");
function as(e2) {
  if (typeof e2 != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(e2));
}
function pt(e2) {
  if (typeof e2 == "string") e2 = as(e2);
  else if (Ln2(e2)) e2 = gt2(e2);
  else throw new Error("Uint8Array expected, got " + typeof e2);
  return e2;
}
function us(e2, t) {
  if (t == null || typeof t != "object") throw new Error("options must be defined");
  return Object.assign(e2, t);
}
function fs(e2, t) {
  if (e2.length !== t.length) return false;
  let n5 = 0;
  for (let r3 = 0; r3 < e2.length; r3++) n5 |= e2[r3] ^ t[r3];
  return n5 === 0;
}
var ls = (e2, t) => {
  function n5(r3, ...o4) {
    if (F(r3), e2.nonceLength !== void 0) {
      const l6 = o4[0];
      if (!l6) throw new Error("nonce / iv required");
      e2.varSizeNonce ? F(l6) : F(l6, e2.nonceLength);
    }
    const s3 = e2.tagLength;
    s3 && o4[1] !== void 0 && F(o4[1]);
    const i4 = t(r3, ...o4), c6 = (l6, f6) => {
      if (f6 !== void 0) {
        if (l6 !== 2) throw new Error("cipher output not supported");
        F(f6);
      }
    };
    let u2 = false;
    return { encrypt(l6, f6) {
      if (u2) throw new Error("cannot encrypt() twice with same key + nonce");
      return u2 = true, F(l6), c6(i4.encrypt.length, f6), i4.encrypt(l6, f6);
    }, decrypt(l6, f6) {
      if (F(l6), s3 && l6.length < s3) throw new Error("invalid ciphertext length: smaller than tagLength=" + s3);
      return c6(i4.decrypt.length, f6), i4.decrypt(l6, f6);
    } };
  }
  return Object.assign(n5, e2), n5;
};
function Cn2(e2, t, n5 = true) {
  if (t === void 0) return new Uint8Array(e2);
  if (t.length !== e2) throw new Error("invalid output length, expected " + e2 + ", got: " + t.length);
  if (n5 && !ds(t)) throw new Error("invalid output, must be aligned");
  return t;
}
function kn2(e2, t, n5, r3) {
  if (typeof e2.setBigUint64 == "function") return e2.setBigUint64(t, n5, r3);
  const o4 = BigInt(32), s3 = BigInt(4294967295), i4 = Number(n5 >> o4 & s3), c6 = Number(n5 & s3), u2 = r3 ? 4 : 0, a3 = r3 ? 0 : 4;
  e2.setUint32(t + u2, i4, r3), e2.setUint32(t + a3, c6, r3);
}
function ds(e2) {
  return e2.byteOffset % 4 === 0;
}
function gt2(e2) {
  return Uint8Array.from(e2);
}
function Ee2(...e2) {
  for (let t = 0; t < e2.length; t++) e2[t].fill(0);
}
var Dn = (e2) => Uint8Array.from(e2.split("").map((t) => t.charCodeAt(0)));
var hs = Dn("expand 16-byte k");
var ps = Dn("expand 32-byte k");
var gs = se(hs);
var ys = se(ps);
function x4(e2, t) {
  return e2 << t | e2 >>> 32 - t;
}
function yt2(e2) {
  return e2.byteOffset % 4 === 0;
}
var Ve2 = 64;
var ms = 16;
var Mn2 = 2 ** 32 - 1;
var Vn2 = new Uint32Array();
function bs(e2, t, n5, r3, o4, s3, i4, c6) {
  const u2 = o4.length, a3 = new Uint8Array(Ve2), l6 = se(a3), f6 = yt2(o4) && yt2(s3), d5 = f6 ? se(o4) : Vn2, g3 = f6 ? se(s3) : Vn2;
  for (let y4 = 0; y4 < u2; i4++) {
    if (e2(t, n5, r3, l6, i4, c6), i4 >= Mn2) throw new Error("arx: counter overflow");
    const h5 = Math.min(Ve2, u2 - y4);
    if (f6 && h5 === Ve2) {
      const m3 = y4 / 4;
      if (y4 % 4 !== 0) throw new Error("arx: invalid block position");
      for (let B3 = 0, b4; B3 < ms; B3++) b4 = m3 + B3, g3[b4] = d5[b4] ^ l6[B3];
      y4 += Ve2;
      continue;
    }
    for (let m3 = 0, B3; m3 < h5; m3++) B3 = y4 + m3, s3[B3] = o4[B3] ^ a3[m3];
    y4 += h5;
  }
}
function ws(e2, t) {
  const { allowShortKeys: n5, extendNonceFn: r3, counterLength: o4, counterRight: s3, rounds: i4 } = us({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, t);
  if (typeof e2 != "function") throw new Error("core must be a function");
  return ht2(o4), ht2(i4), jn2(s3), jn2(n5), (c6, u2, a3, l6, f6 = 0) => {
    F(c6), F(u2), F(a3);
    const d5 = a3.length;
    if (l6 === void 0 && (l6 = new Uint8Array(d5)), F(l6), ht2(f6), f6 < 0 || f6 >= Mn2) throw new Error("arx: counter overflow");
    if (l6.length < d5) throw new Error(`arx: output (${l6.length}) is shorter than data (${d5})`);
    const g3 = [];
    let y4 = c6.length, h5, m3;
    if (y4 === 32) g3.push(h5 = gt2(c6)), m3 = ys;
    else if (y4 === 16 && n5) h5 = new Uint8Array(32), h5.set(c6), h5.set(c6, 16), m3 = gs, g3.push(h5);
    else throw new Error(`arx: invalid 32-byte key, got length=${y4}`);
    yt2(u2) || g3.push(u2 = gt2(u2));
    const B3 = se(h5);
    if (r3) {
      if (u2.length !== 24) throw new Error("arx: extended nonce must be 24 bytes");
      r3(m3, B3, se(u2.subarray(0, 16)), B3), u2 = u2.subarray(16);
    }
    const b4 = 16 - o4;
    if (b4 !== u2.length) throw new Error(`arx: nonce must be ${b4} or 16 bytes`);
    if (b4 !== 12) {
      const I3 = new Uint8Array(12);
      I3.set(u2, s3 ? 0 : 12 - u2.length), u2 = I3, g3.push(u2);
    }
    const _5 = se(u2);
    return bs(e2, m3, B3, _5, a3, l6, f6, i4), Ee2(...g3), l6;
  };
}
var M3 = (e2, t) => e2[t++] & 255 | (e2[t++] & 255) << 8;
var Es = class {
  constructor(t) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = false, t = pt(t), F(t, 32);
    const n5 = M3(t, 0), r3 = M3(t, 2), o4 = M3(t, 4), s3 = M3(t, 6), i4 = M3(t, 8), c6 = M3(t, 10), u2 = M3(t, 12), a3 = M3(t, 14);
    this.r[0] = n5 & 8191, this.r[1] = (n5 >>> 13 | r3 << 3) & 8191, this.r[2] = (r3 >>> 10 | o4 << 6) & 7939, this.r[3] = (o4 >>> 7 | s3 << 9) & 8191, this.r[4] = (s3 >>> 4 | i4 << 12) & 255, this.r[5] = i4 >>> 1 & 8190, this.r[6] = (i4 >>> 14 | c6 << 2) & 8191, this.r[7] = (c6 >>> 11 | u2 << 5) & 8065, this.r[8] = (u2 >>> 8 | a3 << 8) & 8191, this.r[9] = a3 >>> 5 & 127;
    for (let l6 = 0; l6 < 8; l6++) this.pad[l6] = M3(t, 16 + 2 * l6);
  }
  process(t, n5, r3 = false) {
    const o4 = r3 ? 0 : 2048, { h: s3, r: i4 } = this, c6 = i4[0], u2 = i4[1], a3 = i4[2], l6 = i4[3], f6 = i4[4], d5 = i4[5], g3 = i4[6], y4 = i4[7], h5 = i4[8], m3 = i4[9], B3 = M3(t, n5 + 0), b4 = M3(t, n5 + 2), _5 = M3(t, n5 + 4), I3 = M3(t, n5 + 6), k5 = M3(t, n5 + 8), E4 = M3(t, n5 + 10), L3 = M3(t, n5 + 12), j4 = M3(t, n5 + 14);
    let v5 = s3[0] + (B3 & 8191), O4 = s3[1] + ((B3 >>> 13 | b4 << 3) & 8191), w3 = s3[2] + ((b4 >>> 10 | _5 << 6) & 8191), R3 = s3[3] + ((_5 >>> 7 | I3 << 9) & 8191), A3 = s3[4] + ((I3 >>> 4 | k5 << 12) & 8191), T4 = s3[5] + (k5 >>> 1 & 8191), N11 = s3[6] + ((k5 >>> 14 | E4 << 2) & 8191), S4 = s3[7] + ((E4 >>> 11 | L3 << 5) & 8191), U2 = s3[8] + ((L3 >>> 8 | j4 << 8) & 8191), $3 = s3[9] + (j4 >>> 5 | o4), p4 = 0, C4 = p4 + v5 * c6 + O4 * (5 * m3) + w3 * (5 * h5) + R3 * (5 * y4) + A3 * (5 * g3);
    p4 = C4 >>> 13, C4 &= 8191, C4 += T4 * (5 * d5) + N11 * (5 * f6) + S4 * (5 * l6) + U2 * (5 * a3) + $3 * (5 * u2), p4 += C4 >>> 13, C4 &= 8191;
    let D3 = p4 + v5 * u2 + O4 * c6 + w3 * (5 * m3) + R3 * (5 * h5) + A3 * (5 * y4);
    p4 = D3 >>> 13, D3 &= 8191, D3 += T4 * (5 * g3) + N11 * (5 * d5) + S4 * (5 * f6) + U2 * (5 * l6) + $3 * (5 * a3), p4 += D3 >>> 13, D3 &= 8191;
    let P4 = p4 + v5 * a3 + O4 * u2 + w3 * c6 + R3 * (5 * m3) + A3 * (5 * h5);
    p4 = P4 >>> 13, P4 &= 8191, P4 += T4 * (5 * y4) + N11 * (5 * g3) + S4 * (5 * d5) + U2 * (5 * f6) + $3 * (5 * l6), p4 += P4 >>> 13, P4 &= 8191;
    let G3 = p4 + v5 * l6 + O4 * a3 + w3 * u2 + R3 * c6 + A3 * (5 * m3);
    p4 = G3 >>> 13, G3 &= 8191, G3 += T4 * (5 * h5) + N11 * (5 * y4) + S4 * (5 * g3) + U2 * (5 * d5) + $3 * (5 * f6), p4 += G3 >>> 13, G3 &= 8191;
    let X = p4 + v5 * f6 + O4 * l6 + w3 * a3 + R3 * u2 + A3 * c6;
    p4 = X >>> 13, X &= 8191, X += T4 * (5 * m3) + N11 * (5 * h5) + S4 * (5 * y4) + U2 * (5 * g3) + $3 * (5 * d5), p4 += X >>> 13, X &= 8191;
    let Z2 = p4 + v5 * d5 + O4 * f6 + w3 * l6 + R3 * a3 + A3 * u2;
    p4 = Z2 >>> 13, Z2 &= 8191, Z2 += T4 * c6 + N11 * (5 * m3) + S4 * (5 * h5) + U2 * (5 * y4) + $3 * (5 * g3), p4 += Z2 >>> 13, Z2 &= 8191;
    let he3 = p4 + v5 * g3 + O4 * d5 + w3 * f6 + R3 * l6 + A3 * a3;
    p4 = he3 >>> 13, he3 &= 8191, he3 += T4 * u2 + N11 * c6 + S4 * (5 * m3) + U2 * (5 * h5) + $3 * (5 * y4), p4 += he3 >>> 13, he3 &= 8191;
    let pe3 = p4 + v5 * y4 + O4 * g3 + w3 * d5 + R3 * f6 + A3 * l6;
    p4 = pe3 >>> 13, pe3 &= 8191, pe3 += T4 * a3 + N11 * u2 + S4 * c6 + U2 * (5 * m3) + $3 * (5 * h5), p4 += pe3 >>> 13, pe3 &= 8191;
    let ge2 = p4 + v5 * h5 + O4 * y4 + w3 * g3 + R3 * d5 + A3 * f6;
    p4 = ge2 >>> 13, ge2 &= 8191, ge2 += T4 * l6 + N11 * a3 + S4 * u2 + U2 * c6 + $3 * (5 * m3), p4 += ge2 >>> 13, ge2 &= 8191;
    let ye3 = p4 + v5 * m3 + O4 * h5 + w3 * y4 + R3 * g3 + A3 * d5;
    p4 = ye3 >>> 13, ye3 &= 8191, ye3 += T4 * f6 + N11 * l6 + S4 * a3 + U2 * u2 + $3 * c6, p4 += ye3 >>> 13, ye3 &= 8191, p4 = (p4 << 2) + p4 | 0, p4 = p4 + C4 | 0, C4 = p4 & 8191, p4 = p4 >>> 13, D3 += p4, s3[0] = C4, s3[1] = D3, s3[2] = P4, s3[3] = G3, s3[4] = X, s3[5] = Z2, s3[6] = he3, s3[7] = pe3, s3[8] = ge2, s3[9] = ye3;
  }
  finalize() {
    const { h: t, pad: n5 } = this, r3 = new Uint16Array(10);
    let o4 = t[1] >>> 13;
    t[1] &= 8191;
    for (let c6 = 2; c6 < 10; c6++) t[c6] += o4, o4 = t[c6] >>> 13, t[c6] &= 8191;
    t[0] += o4 * 5, o4 = t[0] >>> 13, t[0] &= 8191, t[1] += o4, o4 = t[1] >>> 13, t[1] &= 8191, t[2] += o4, r3[0] = t[0] + 5, o4 = r3[0] >>> 13, r3[0] &= 8191;
    for (let c6 = 1; c6 < 10; c6++) r3[c6] = t[c6] + o4, o4 = r3[c6] >>> 13, r3[c6] &= 8191;
    r3[9] -= 8192;
    let s3 = (o4 ^ 1) - 1;
    for (let c6 = 0; c6 < 10; c6++) r3[c6] &= s3;
    s3 = ~s3;
    for (let c6 = 0; c6 < 10; c6++) t[c6] = t[c6] & s3 | r3[c6];
    t[0] = (t[0] | t[1] << 13) & 65535, t[1] = (t[1] >>> 3 | t[2] << 10) & 65535, t[2] = (t[2] >>> 6 | t[3] << 7) & 65535, t[3] = (t[3] >>> 9 | t[4] << 4) & 65535, t[4] = (t[4] >>> 12 | t[5] << 1 | t[6] << 14) & 65535, t[5] = (t[6] >>> 2 | t[7] << 11) & 65535, t[6] = (t[7] >>> 5 | t[8] << 8) & 65535, t[7] = (t[8] >>> 8 | t[9] << 5) & 65535;
    let i4 = t[0] + n5[0];
    t[0] = i4 & 65535;
    for (let c6 = 1; c6 < 8; c6++) i4 = (t[c6] + n5[c6] | 0) + (i4 >>> 16) | 0, t[c6] = i4 & 65535;
    Ee2(r3);
  }
  update(t) {
    Bn2(this);
    const { buffer: n5, blockLen: r3 } = this;
    t = pt(t);
    const o4 = t.length;
    for (let s3 = 0; s3 < o4; ) {
      const i4 = Math.min(r3 - this.pos, o4 - s3);
      if (i4 === r3) {
        for (; r3 <= o4 - s3; s3 += r3) this.process(t, s3);
        continue;
      }
      n5.set(t.subarray(s3, s3 + i4), this.pos), this.pos += i4, s3 += i4, this.pos === r3 && (this.process(n5, 0, false), this.pos = 0);
    }
    return this;
  }
  destroy() {
    Ee2(this.h, this.r, this.buffer, this.pad);
  }
  digestInto(t) {
    Bn2(this), ss(t, this), this.finished = true;
    const { buffer: n5, h: r3 } = this;
    let { pos: o4 } = this;
    if (o4) {
      for (n5[o4++] = 1; o4 < 16; o4++) n5[o4] = 0;
      this.process(n5, 0, true);
    }
    this.finalize();
    let s3 = 0;
    for (let i4 = 0; i4 < 8; i4++) t[s3++] = r3[i4] >>> 0, t[s3++] = r3[i4] >>> 8;
    return t;
  }
  digest() {
    const { buffer: t, outputLen: n5 } = this;
    this.digestInto(t);
    const r3 = t.slice(0, n5);
    return this.destroy(), r3;
  }
};
function vs(e2) {
  const t = (r3, o4) => e2(o4).update(pt(r3)).digest(), n5 = e2(new Uint8Array(32));
  return t.outputLen = n5.outputLen, t.blockLen = n5.blockLen, t.create = (r3) => e2(r3), t;
}
var xs = vs((e2) => new Es(e2));
function Os(e2, t, n5, r3, o4, s3 = 20) {
  let i4 = e2[0], c6 = e2[1], u2 = e2[2], a3 = e2[3], l6 = t[0], f6 = t[1], d5 = t[2], g3 = t[3], y4 = t[4], h5 = t[5], m3 = t[6], B3 = t[7], b4 = o4, _5 = n5[0], I3 = n5[1], k5 = n5[2], E4 = i4, L3 = c6, j4 = u2, v5 = a3, O4 = l6, w3 = f6, R3 = d5, A3 = g3, T4 = y4, N11 = h5, S4 = m3, U2 = B3, $3 = b4, p4 = _5, C4 = I3, D3 = k5;
  for (let G3 = 0; G3 < s3; G3 += 2) E4 = E4 + O4 | 0, $3 = x4($3 ^ E4, 16), T4 = T4 + $3 | 0, O4 = x4(O4 ^ T4, 12), E4 = E4 + O4 | 0, $3 = x4($3 ^ E4, 8), T4 = T4 + $3 | 0, O4 = x4(O4 ^ T4, 7), L3 = L3 + w3 | 0, p4 = x4(p4 ^ L3, 16), N11 = N11 + p4 | 0, w3 = x4(w3 ^ N11, 12), L3 = L3 + w3 | 0, p4 = x4(p4 ^ L3, 8), N11 = N11 + p4 | 0, w3 = x4(w3 ^ N11, 7), j4 = j4 + R3 | 0, C4 = x4(C4 ^ j4, 16), S4 = S4 + C4 | 0, R3 = x4(R3 ^ S4, 12), j4 = j4 + R3 | 0, C4 = x4(C4 ^ j4, 8), S4 = S4 + C4 | 0, R3 = x4(R3 ^ S4, 7), v5 = v5 + A3 | 0, D3 = x4(D3 ^ v5, 16), U2 = U2 + D3 | 0, A3 = x4(A3 ^ U2, 12), v5 = v5 + A3 | 0, D3 = x4(D3 ^ v5, 8), U2 = U2 + D3 | 0, A3 = x4(A3 ^ U2, 7), E4 = E4 + w3 | 0, D3 = x4(D3 ^ E4, 16), S4 = S4 + D3 | 0, w3 = x4(w3 ^ S4, 12), E4 = E4 + w3 | 0, D3 = x4(D3 ^ E4, 8), S4 = S4 + D3 | 0, w3 = x4(w3 ^ S4, 7), L3 = L3 + R3 | 0, $3 = x4($3 ^ L3, 16), U2 = U2 + $3 | 0, R3 = x4(R3 ^ U2, 12), L3 = L3 + R3 | 0, $3 = x4($3 ^ L3, 8), U2 = U2 + $3 | 0, R3 = x4(R3 ^ U2, 7), j4 = j4 + A3 | 0, p4 = x4(p4 ^ j4, 16), T4 = T4 + p4 | 0, A3 = x4(A3 ^ T4, 12), j4 = j4 + A3 | 0, p4 = x4(p4 ^ j4, 8), T4 = T4 + p4 | 0, A3 = x4(A3 ^ T4, 7), v5 = v5 + O4 | 0, C4 = x4(C4 ^ v5, 16), N11 = N11 + C4 | 0, O4 = x4(O4 ^ N11, 12), v5 = v5 + O4 | 0, C4 = x4(C4 ^ v5, 8), N11 = N11 + C4 | 0, O4 = x4(O4 ^ N11, 7);
  let P4 = 0;
  r3[P4++] = i4 + E4 | 0, r3[P4++] = c6 + L3 | 0, r3[P4++] = u2 + j4 | 0, r3[P4++] = a3 + v5 | 0, r3[P4++] = l6 + O4 | 0, r3[P4++] = f6 + w3 | 0, r3[P4++] = d5 + R3 | 0, r3[P4++] = g3 + A3 | 0, r3[P4++] = y4 + T4 | 0, r3[P4++] = h5 + N11 | 0, r3[P4++] = m3 + S4 | 0, r3[P4++] = B3 + U2 | 0, r3[P4++] = b4 + $3 | 0, r3[P4++] = _5 + p4 | 0, r3[P4++] = I3 + C4 | 0, r3[P4++] = k5 + D3 | 0;
}
var Is = ws(Os, { counterRight: false, counterLength: 4, allowShortKeys: false });
var As = new Uint8Array(16);
var Hn2 = (e2, t) => {
  e2.update(t);
  const n5 = t.length % 16;
  n5 && e2.update(As.subarray(n5));
};
var Ns = new Uint8Array(32);
function Kn2(e2, t, n5, r3, o4) {
  const s3 = e2(t, n5, Ns), i4 = xs.create(s3);
  o4 && Hn2(i4, o4), Hn2(i4, r3);
  const c6 = new Uint8Array(16), u2 = is(c6);
  kn2(u2, 0, BigInt(o4 ? o4.length : 0), true), kn2(u2, 8, BigInt(r3.length), true), i4.update(c6);
  const a3 = i4.digest();
  return Ee2(s3, c6), a3;
}
var Ss = (e2) => (t, n5, r3) => ({ encrypt(s3, i4) {
  const c6 = s3.length;
  i4 = Cn2(c6 + 16, i4, false), i4.set(s3);
  const u2 = i4.subarray(0, -16);
  e2(t, n5, u2, u2, 1);
  const a3 = Kn2(e2, t, n5, u2, r3);
  return i4.set(a3, c6), Ee2(a3), i4;
}, decrypt(s3, i4) {
  i4 = Cn2(s3.length - 16, i4, false);
  const c6 = s3.subarray(0, -16), u2 = s3.subarray(-16), a3 = Kn2(e2, t, n5, c6, r3);
  if (!fs(u2, a3)) throw new Error("invalid tag");
  return i4.set(s3.subarray(0, -16)), e2(t, n5, i4, i4, 1), Ee2(a3), i4;
} });
var Fn2 = ls({ blockSize: 64, nonceLength: 12, tagLength: 16 }, Ss(Is));
var qn2 = class extends it2 {
  constructor(t, n5) {
    super(), this.finished = false, this.destroyed = false, ot(t);
    const r3 = we2(n5);
    if (this.iHash = t.create(), typeof this.iHash.update != "function") throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o4 = this.blockLen, s3 = new Uint8Array(o4);
    s3.set(r3.length > o4 ? t.create().update(r3).digest() : r3);
    for (let i4 = 0; i4 < s3.length; i4++) s3[i4] ^= 54;
    this.iHash.update(s3), this.oHash = t.create();
    for (let i4 = 0; i4 < s3.length; i4++) s3[i4] ^= 106;
    this.oHash.update(s3), s3.fill(0);
  }
  update(t) {
    return me2(this), this.iHash.update(t), this;
  }
  digestInto(t) {
    me2(this), je2(t, this.outputLen), this.finished = true, this.iHash.digestInto(t), this.oHash.update(t), this.oHash.digestInto(t), this.destroy();
  }
  digest() {
    const t = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(t), t;
  }
  _cloneInto(t) {
    t || (t = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n5, iHash: r3, finished: o4, destroyed: s3, blockLen: i4, outputLen: c6 } = this;
    return t = t, t.finished = o4, t.destroyed = s3, t.blockLen = i4, t.outputLen = c6, t.oHash = n5._cloneInto(t.oHash), t.iHash = r3._cloneInto(t.iHash), t;
  }
  destroy() {
    this.destroyed = true, this.oHash.destroy(), this.iHash.destroy();
  }
};
var mt = (e2, t, n5) => new qn2(e2, t).update(n5).digest();
mt.create = (e2, t) => new qn2(e2, t);
function Us(e2, t, n5) {
  return ot(e2), n5 === void 0 && (n5 = new Uint8Array(e2.outputLen)), mt(e2, we2(n5), we2(t));
}
var bt2 = new Uint8Array([0]);
var Gn2 = new Uint8Array();
function _s(e2, t, n5, r3 = 32) {
  if (ot(e2), Ne2(r3), r3 > 255 * e2.outputLen) throw new Error("Length should be <= 255*HashLen");
  const o4 = Math.ceil(r3 / e2.outputLen);
  n5 === void 0 && (n5 = Gn2);
  const s3 = new Uint8Array(o4 * e2.outputLen), i4 = mt.create(e2, t), c6 = i4._cloneInto(), u2 = new Uint8Array(i4.outputLen);
  for (let a3 = 0; a3 < o4; a3++) bt2[0] = a3 + 1, c6.update(a3 === 0 ? Gn2 : u2).update(n5).update(bt2).digestInto(u2), s3.set(u2, e2.outputLen * a3), i4._cloneInto(c6);
  return i4.destroy(), c6.destroy(), u2.fill(0), bt2.fill(0), s3.slice(0, r3);
}
var Ts = (e2, t, n5, r3, o4) => _s(e2, Us(e2, t, n5), r3, o4);
function $s(e2, t, n5, r3) {
  if (typeof e2.setBigUint64 == "function") return e2.setBigUint64(t, n5, r3);
  const o4 = BigInt(32), s3 = BigInt(4294967295), i4 = Number(n5 >> o4 & s3), c6 = Number(n5 & s3), u2 = r3 ? 4 : 0, a3 = r3 ? 0 : 4;
  e2.setUint32(t + u2, i4, r3), e2.setUint32(t + a3, c6, r3);
}
function Rs(e2, t, n5) {
  return e2 & t ^ ~e2 & n5;
}
function Ps(e2, t, n5) {
  return e2 & t ^ e2 & n5 ^ t & n5;
}
var Ls = class extends it2 {
  constructor(t, n5, r3, o4) {
    super(), this.blockLen = t, this.outputLen = n5, this.padOffset = r3, this.isLE = o4, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(t), this.view = st(this.buffer);
  }
  update(t) {
    me2(this);
    const { view: n5, buffer: r3, blockLen: o4 } = this;
    t = we2(t);
    const s3 = t.length;
    for (let i4 = 0; i4 < s3; ) {
      const c6 = Math.min(o4 - this.pos, s3 - i4);
      if (c6 === o4) {
        const u2 = st(t);
        for (; o4 <= s3 - i4; i4 += o4) this.process(u2, i4);
        continue;
      }
      r3.set(t.subarray(i4, i4 + c6), this.pos), this.pos += c6, i4 += c6, this.pos === o4 && (this.process(n5, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    me2(this), sn2(t, this), this.finished = true;
    const { buffer: n5, view: r3, blockLen: o4, isLE: s3 } = this;
    let { pos: i4 } = this;
    n5[i4++] = 128, this.buffer.subarray(i4).fill(0), this.padOffset > o4 - i4 && (this.process(r3, 0), i4 = 0);
    for (let f6 = i4; f6 < o4; f6++) n5[f6] = 0;
    $s(r3, o4 - 8, BigInt(this.length * 8), s3), this.process(r3, 0);
    const c6 = st(t), u2 = this.outputLen;
    if (u2 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const a3 = u2 / 4, l6 = this.get();
    if (a3 > l6.length) throw new Error("_sha2: outputLen bigger than state");
    for (let f6 = 0; f6 < a3; f6++) c6.setUint32(4 * f6, l6[f6], s3);
  }
  digest() {
    const { buffer: t, outputLen: n5 } = this;
    this.digestInto(t);
    const r3 = t.slice(0, n5);
    return this.destroy(), r3;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: n5, buffer: r3, length: o4, finished: s3, destroyed: i4, pos: c6 } = this;
    return t.length = o4, t.pos = c6, t.finished = s3, t.destroyed = i4, o4 % n5 && t.buffer.set(r3), t;
  }
};
var Bs = new Uint32Array([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
var ie = new Uint32Array([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
var ce = new Uint32Array(64);
var js = class extends Ls {
  constructor() {
    super(64, 32, 8, false), this.A = ie[0] | 0, this.B = ie[1] | 0, this.C = ie[2] | 0, this.D = ie[3] | 0, this.E = ie[4] | 0, this.F = ie[5] | 0, this.G = ie[6] | 0, this.H = ie[7] | 0;
  }
  get() {
    const { A: t, B: n5, C: r3, D: o4, E: s3, F: i4, G: c6, H: u2 } = this;
    return [t, n5, r3, o4, s3, i4, c6, u2];
  }
  set(t, n5, r3, o4, s3, i4, c6, u2) {
    this.A = t | 0, this.B = n5 | 0, this.C = r3 | 0, this.D = o4 | 0, this.E = s3 | 0, this.F = i4 | 0, this.G = c6 | 0, this.H = u2 | 0;
  }
  process(t, n5) {
    for (let f6 = 0; f6 < 16; f6++, n5 += 4) ce[f6] = t.getUint32(n5, false);
    for (let f6 = 16; f6 < 64; f6++) {
      const d5 = ce[f6 - 15], g3 = ce[f6 - 2], y4 = J3(d5, 7) ^ J3(d5, 18) ^ d5 >>> 3, h5 = J3(g3, 17) ^ J3(g3, 19) ^ g3 >>> 10;
      ce[f6] = h5 + ce[f6 - 7] + y4 + ce[f6 - 16] | 0;
    }
    let { A: r3, B: o4, C: s3, D: i4, E: c6, F: u2, G: a3, H: l6 } = this;
    for (let f6 = 0; f6 < 64; f6++) {
      const d5 = J3(c6, 6) ^ J3(c6, 11) ^ J3(c6, 25), g3 = l6 + d5 + Rs(c6, u2, a3) + Bs[f6] + ce[f6] | 0, h5 = (J3(r3, 2) ^ J3(r3, 13) ^ J3(r3, 22)) + Ps(r3, o4, s3) | 0;
      l6 = a3, a3 = u2, u2 = c6, c6 = i4 + g3 | 0, i4 = s3, s3 = o4, o4 = r3, r3 = g3 + h5 | 0;
    }
    r3 = r3 + this.A | 0, o4 = o4 + this.B | 0, s3 = s3 + this.C | 0, i4 = i4 + this.D | 0, c6 = c6 + this.E | 0, u2 = u2 + this.F | 0, a3 = a3 + this.G | 0, l6 = l6 + this.H | 0, this.set(r3, o4, s3, i4, c6, u2, a3, l6);
  }
  roundClean() {
    ce.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
var He2 = fn(() => new js());
var Wn2 = BigInt(0);
function wt2(e2) {
  return e2 instanceof Uint8Array || ArrayBuffer.isView(e2) && e2.constructor.name === "Uint8Array";
}
function zn2(e2) {
  if (!wt2(e2)) throw new Error("Uint8Array expected");
}
var Cs = Array.from({ length: 256 }, (e2, t) => t.toString(16).padStart(2, "0"));
function ks(e2) {
  zn2(e2);
  let t = "";
  for (let n5 = 0; n5 < e2.length; n5++) t += Cs[e2[n5]];
  return t;
}
function Ds(e2) {
  if (typeof e2 != "string") throw new Error("hex string expected, got " + typeof e2);
  return e2 === "" ? Wn2 : BigInt("0x" + e2);
}
var ee = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function Jn2(e2) {
  if (e2 >= ee._0 && e2 <= ee._9) return e2 - ee._0;
  if (e2 >= ee.A && e2 <= ee.F) return e2 - (ee.A - 10);
  if (e2 >= ee.a && e2 <= ee.f) return e2 - (ee.a - 10);
}
function Yn2(e2) {
  if (typeof e2 != "string") throw new Error("hex string expected, got " + typeof e2);
  const t = e2.length, n5 = t / 2;
  if (t % 2) throw new Error("hex string expected, got unpadded hex of length " + t);
  const r3 = new Uint8Array(n5);
  for (let o4 = 0, s3 = 0; o4 < n5; o4++, s3 += 2) {
    const i4 = Jn2(e2.charCodeAt(s3)), c6 = Jn2(e2.charCodeAt(s3 + 1));
    if (i4 === void 0 || c6 === void 0) {
      const u2 = e2[s3] + e2[s3 + 1];
      throw new Error('hex string expected, got non-hex character "' + u2 + '" at index ' + s3);
    }
    r3[o4] = i4 * 16 + c6;
  }
  return r3;
}
function Xn2(e2) {
  return zn2(e2), Ds(ks(Uint8Array.from(e2).reverse()));
}
function Ms(e2, t) {
  return Yn2(e2.toString(16).padStart(t * 2, "0"));
}
function Vs(e2, t) {
  return Ms(e2, t).reverse();
}
function Zn2(e2, t, n5) {
  let r3;
  if (typeof t == "string") try {
    r3 = Yn2(t);
  } catch (s3) {
    throw new Error(e2 + " must be hex string or Uint8Array, cause: " + s3);
  }
  else if (wt2(t)) r3 = Uint8Array.from(t);
  else throw new Error(e2 + " must be hex string or Uint8Array");
  const o4 = r3.length;
  if (typeof n5 == "number" && o4 !== n5) throw new Error(e2 + " of length " + n5 + " expected, got " + o4);
  return r3;
}
var Et2 = (e2) => typeof e2 == "bigint" && Wn2 <= e2;
function Hs(e2, t, n5) {
  return Et2(e2) && Et2(t) && Et2(n5) && t <= e2 && e2 < n5;
}
function Qn2(e2, t, n5, r3) {
  if (!Hs(t, n5, r3)) throw new Error("expected valid " + e2 + ": " + n5 + " <= n < " + r3 + ", got " + t);
}
var Ks = { bigint: (e2) => typeof e2 == "bigint", function: (e2) => typeof e2 == "function", boolean: (e2) => typeof e2 == "boolean", string: (e2) => typeof e2 == "string", stringOrUint8Array: (e2) => typeof e2 == "string" || wt2(e2), isSafeInteger: (e2) => Number.isSafeInteger(e2), array: (e2) => Array.isArray(e2), field: (e2, t) => t.Fp.isValid(e2), hash: (e2) => typeof e2 == "function" && Number.isSafeInteger(e2.outputLen) };
function Fs(e2, t, n5 = {}) {
  const r3 = (o4, s3, i4) => {
    const c6 = Ks[s3];
    if (typeof c6 != "function") throw new Error("invalid validator function");
    const u2 = e2[o4];
    if (!(i4 && u2 === void 0) && !c6(u2, e2)) throw new Error("param " + String(o4) + " is invalid. Expected " + s3 + ", got " + u2);
  };
  for (const [o4, s3] of Object.entries(t)) r3(o4, s3, false);
  for (const [o4, s3] of Object.entries(n5)) r3(o4, s3, true);
  return e2;
}
var ve2 = BigInt(0);
var Ke2 = BigInt(1);
function er2(e2, t) {
  const n5 = e2 % t;
  return n5 >= ve2 ? n5 : t + n5;
}
function qs(e2, t, n5) {
  if (t < ve2) throw new Error("invalid exponent, negatives unsupported");
  if (n5 <= ve2) throw new Error("invalid modulus");
  if (n5 === Ke2) return ve2;
  let r3 = Ke2;
  for (; t > ve2; ) t & Ke2 && (r3 = r3 * e2 % n5), e2 = e2 * e2 % n5, t >>= Ke2;
  return r3;
}
function z3(e2, t, n5) {
  let r3 = e2;
  for (; t-- > ve2; ) r3 *= r3, r3 %= n5;
  return r3;
}
BigInt(0), BigInt(1), BigInt(0), BigInt(1), BigInt(2), BigInt(8);
var xe2 = BigInt(0);
var vt2 = BigInt(1);
function Gs(e2) {
  return Fs(e2, { a: "bigint" }, { montgomeryBits: "isSafeInteger", nByteLength: "isSafeInteger", adjustScalarBytes: "function", domain: "function", powPminus2: "function", Gu: "bigint" }), Object.freeze({ ...e2 });
}
function Ws(e2) {
  const t = Gs(e2), { P: n5 } = t, r3 = (b4) => er2(b4, n5), o4 = t.montgomeryBits, s3 = Math.ceil(o4 / 8), i4 = t.nByteLength, c6 = t.adjustScalarBytes || ((b4) => b4), u2 = t.powPminus2 || ((b4) => qs(b4, n5 - BigInt(2), n5));
  function a3(b4, _5, I3) {
    const k5 = r3(b4 * (_5 - I3));
    return _5 = r3(_5 - k5), I3 = r3(I3 + k5), [_5, I3];
  }
  const l6 = (t.a - BigInt(2)) / BigInt(4);
  function f6(b4, _5) {
    Qn2("u", b4, xe2, n5), Qn2("scalar", _5, xe2, n5);
    const I3 = _5, k5 = b4;
    let E4 = vt2, L3 = xe2, j4 = b4, v5 = vt2, O4 = xe2, w3;
    for (let A3 = BigInt(o4 - 1); A3 >= xe2; A3--) {
      const T4 = I3 >> A3 & vt2;
      O4 ^= T4, w3 = a3(O4, E4, j4), E4 = w3[0], j4 = w3[1], w3 = a3(O4, L3, v5), L3 = w3[0], v5 = w3[1], O4 = T4;
      const N11 = E4 + L3, S4 = r3(N11 * N11), U2 = E4 - L3, $3 = r3(U2 * U2), p4 = S4 - $3, C4 = j4 + v5, D3 = j4 - v5, P4 = r3(D3 * N11), G3 = r3(C4 * U2), X = P4 + G3, Z2 = P4 - G3;
      j4 = r3(X * X), v5 = r3(k5 * r3(Z2 * Z2)), E4 = r3(S4 * $3), L3 = r3(p4 * (S4 + r3(l6 * p4)));
    }
    w3 = a3(O4, E4, j4), E4 = w3[0], j4 = w3[1], w3 = a3(O4, L3, v5), L3 = w3[0], v5 = w3[1];
    const R3 = u2(L3);
    return r3(E4 * R3);
  }
  function d5(b4) {
    return Vs(r3(b4), s3);
  }
  function g3(b4) {
    const _5 = Zn2("u coordinate", b4, s3);
    return i4 === 32 && (_5[31] &= 127), Xn2(_5);
  }
  function y4(b4) {
    const _5 = Zn2("scalar", b4), I3 = _5.length;
    if (I3 !== s3 && I3 !== i4) {
      let k5 = "" + s3 + " or " + i4;
      throw new Error("invalid scalar, expected " + k5 + " bytes, got " + I3);
    }
    return Xn2(c6(_5));
  }
  function h5(b4, _5) {
    const I3 = g3(_5), k5 = y4(b4), E4 = f6(I3, k5);
    if (E4 === xe2) throw new Error("invalid private or public key received");
    return d5(E4);
  }
  const m3 = d5(t.Gu);
  function B3(b4) {
    return h5(b4, m3);
  }
  return { scalarMult: h5, scalarMultBase: B3, getSharedSecret: (b4, _5) => h5(b4, _5), getPublicKey: (b4) => B3(b4), utils: { randomPrivateKey: () => t.randomBytes(t.nByteLength) }, GuBytes: m3 };
}
var xt2 = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
BigInt(0);
var zs = BigInt(1);
var tr2 = BigInt(2);
var Js = BigInt(3);
var Ys = BigInt(5);
BigInt(8);
function Xs(e2) {
  const t = BigInt(10), n5 = BigInt(20), r3 = BigInt(40), o4 = BigInt(80), s3 = xt2, c6 = e2 * e2 % s3 * e2 % s3, u2 = z3(c6, tr2, s3) * c6 % s3, a3 = z3(u2, zs, s3) * e2 % s3, l6 = z3(a3, Ys, s3) * a3 % s3, f6 = z3(l6, t, s3) * l6 % s3, d5 = z3(f6, n5, s3) * f6 % s3, g3 = z3(d5, r3, s3) * d5 % s3, y4 = z3(g3, o4, s3) * g3 % s3, h5 = z3(y4, o4, s3) * g3 % s3, m3 = z3(h5, t, s3) * l6 % s3;
  return { pow_p_5_8: z3(m3, tr2, s3) * e2 % s3, b2: c6 };
}
function Zs(e2) {
  return e2[0] &= 248, e2[31] &= 127, e2[31] |= 64, e2;
}
var Ot2 = Ws({ P: xt2, a: BigInt(486662), montgomeryBits: 255, nByteLength: 32, Gu: BigInt(9), powPminus2: (e2) => {
  const t = xt2, { pow_p_5_8: n5, b2: r3 } = Xs(e2);
  return er2(z3(n5, Js, t) * r3, t);
}, adjustScalarBytes: Zs, randomBytes: Se2 });
var It2 = "base10";
var V2 = "base16";
var At = "base64pad";
var Qs = "base64url";
var Oe2 = "utf8";
var Nt2 = 0;
var Ie2 = 1;
var _e2 = 2;
var ei = 0;
var nr2 = 1;
var Te2 = 12;
var St2 = 32;
function ti() {
  const e2 = Ot2.utils.randomPrivateKey(), t = Ot2.getPublicKey(e2);
  return { privateKey: toString2(e2, V2), publicKey: toString2(t, V2) };
}
function ni() {
  const e2 = Se2(St2);
  return toString2(e2, V2);
}
function ri(e2, t) {
  const n5 = Ot2.getSharedSecret(fromString2(e2, V2), fromString2(t, V2)), r3 = Ts(He2, n5, void 0, void 0, St2);
  return toString2(r3, V2);
}
function oi(e2) {
  const t = He2(fromString2(e2, V2));
  return toString2(t, V2);
}
function si(e2) {
  const t = He2(fromString2(e2, Oe2));
  return toString2(t, V2);
}
function Ut2(e2) {
  return fromString2(`${e2}`, It2);
}
function fe2(e2) {
  return Number(toString2(e2, It2));
}
function ii(e2) {
  const t = Ut2(typeof e2.type < "u" ? e2.type : Nt2);
  if (fe2(t) === Ie2 && typeof e2.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
  const n5 = typeof e2.senderPublicKey < "u" ? fromString2(e2.senderPublicKey, V2) : void 0, r3 = typeof e2.iv < "u" ? fromString2(e2.iv, V2) : Se2(Te2), o4 = fromString2(e2.symKey, V2), s3 = Fn2(o4, r3).encrypt(fromString2(e2.message, Oe2));
  return _t2({ type: t, sealed: s3, iv: r3, senderPublicKey: n5, encoding: e2.encoding });
}
function ci(e2) {
  const t = fromString2(e2.symKey, V2), { sealed: n5, iv: r3 } = Fe(e2), o4 = Fn2(t, r3).decrypt(n5);
  if (o4 === null) throw new Error("Failed to decrypt");
  return toString2(o4, Oe2);
}
function ai(e2, t) {
  const n5 = Ut2(_e2), r3 = Se2(Te2), o4 = fromString2(e2, Oe2);
  return _t2({ type: n5, sealed: o4, iv: r3, encoding: t });
}
function ui(e2, t) {
  const { sealed: n5 } = Fe({ encoded: e2, encoding: t });
  return toString2(n5, Oe2);
}
function _t2(e2) {
  const { encoding: t = At } = e2;
  if (fe2(e2.type) === _e2) return toString2(concat2([e2.type, e2.sealed]), t);
  if (fe2(e2.type) === Ie2) {
    if (typeof e2.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
    return toString2(concat2([e2.type, e2.senderPublicKey, e2.iv, e2.sealed]), t);
  }
  return toString2(concat2([e2.type, e2.iv, e2.sealed]), t);
}
function Fe(e2) {
  const { encoded: t, encoding: n5 = At } = e2, r3 = fromString2(t, n5), o4 = r3.slice(ei, nr2), s3 = nr2;
  if (fe2(o4) === Ie2) {
    const a3 = s3 + St2, l6 = a3 + Te2, f6 = r3.slice(s3, a3), d5 = r3.slice(a3, l6), g3 = r3.slice(l6);
    return { type: o4, sealed: g3, iv: d5, senderPublicKey: f6 };
  }
  if (fe2(o4) === _e2) {
    const a3 = r3.slice(s3), l6 = Se2(Te2);
    return { type: o4, sealed: a3, iv: l6 };
  }
  const i4 = s3 + Te2, c6 = r3.slice(s3, i4), u2 = r3.slice(i4);
  return { type: o4, sealed: u2, iv: c6 };
}
function fi(e2, t) {
  const n5 = Fe({ encoded: e2, encoding: t == null ? void 0 : t.encoding });
  return rr2({ type: fe2(n5.type), senderPublicKey: typeof n5.senderPublicKey < "u" ? toString2(n5.senderPublicKey, V2) : void 0, receiverPublicKey: t == null ? void 0 : t.receiverPublicKey });
}
function rr2(e2) {
  const t = (e2 == null ? void 0 : e2.type) || Nt2;
  if (t === Ie2) {
    if (typeof (e2 == null ? void 0 : e2.senderPublicKey) > "u") throw new Error("missing sender public key");
    if (typeof (e2 == null ? void 0 : e2.receiverPublicKey) > "u") throw new Error("missing receiver public key");
  }
  return { type: t, senderPublicKey: e2 == null ? void 0 : e2.senderPublicKey, receiverPublicKey: e2 == null ? void 0 : e2.receiverPublicKey };
}
function li(e2) {
  return e2.type === Ie2 && typeof e2.senderPublicKey == "string" && typeof e2.receiverPublicKey == "string";
}
function di(e2) {
  return e2.type === _e2;
}
function or3(e2) {
  return new import_elliptic.ec("p256").keyFromPublic({ x: Buffer.from(e2.x, "base64").toString("hex"), y: Buffer.from(e2.y, "base64").toString("hex") }, "hex");
}
function hi(e2) {
  let t = e2.replace(/-/g, "+").replace(/_/g, "/");
  const n5 = t.length % 4;
  return n5 > 0 && (t += "=".repeat(4 - n5)), t;
}
function pi(e2) {
  return Buffer.from(hi(e2), "base64");
}
function gi(e2, t) {
  const [n5, r3, o4] = e2.split("."), s3 = pi(o4);
  if (s3.length !== 64) throw new Error("Invalid signature length");
  const i4 = s3.slice(0, 32).toString("hex"), c6 = s3.slice(32, 64).toString("hex"), u2 = `${n5}.${r3}`, a3 = He2(u2), l6 = or3(t), f6 = toString2(a3, V2);
  if (!l6.verify(f6, { r: i4, s: c6 })) throw new Error("Invalid signature");
  return sn(e2).payload;
}
var sr2 = "irn";
function yi(e2) {
  return (e2 == null ? void 0 : e2.relay) || { protocol: sr2 };
}
function mi(e2) {
  const t = C2[e2];
  if (typeof t > "u") throw new Error(`Relay Protocol not supported: ${e2}`);
  return t;
}
function ir2(e2, t = "-") {
  const n5 = {}, r3 = "relay" + t;
  return Object.keys(e2).forEach((o4) => {
    if (o4.startsWith(r3)) {
      const s3 = o4.replace(r3, ""), i4 = e2[o4];
      n5[s3] = i4;
    }
  }), n5;
}
function bi(e2) {
  if (!e2.includes("wc:")) {
    const a3 = rt2(e2);
    a3 != null && a3.includes("wc:") && (e2 = a3);
  }
  e2 = e2.includes("wc://") ? e2.replace("wc://", "") : e2, e2 = e2.includes("wc:") ? e2.replace("wc:", "") : e2;
  const t = e2.indexOf(":"), n5 = e2.indexOf("?") !== -1 ? e2.indexOf("?") : void 0, r3 = e2.substring(0, t), o4 = e2.substring(t + 1, n5).split("@"), s3 = typeof n5 < "u" ? e2.substring(n5) : "", i4 = new URLSearchParams(s3), c6 = {};
  i4.forEach((a3, l6) => {
    c6[l6] = a3;
  });
  const u2 = typeof c6.methods == "string" ? c6.methods.split(",") : void 0;
  return { protocol: r3, topic: cr2(o4[0]), version: parseInt(o4[1], 10), symKey: c6.symKey, relay: ir2(c6), methods: u2, expiryTimestamp: c6.expiryTimestamp ? parseInt(c6.expiryTimestamp, 10) : void 0 };
}
function cr2(e2) {
  return e2.startsWith("//") ? e2.substring(2) : e2;
}
function ar2(e2, t = "-") {
  const n5 = "relay", r3 = {};
  return Object.keys(e2).forEach((o4) => {
    const s3 = o4, i4 = n5 + t + s3;
    e2[s3] && (r3[i4] = e2[s3]);
  }), r3;
}
function wi(e2) {
  const t = new URLSearchParams(), n5 = ar2(e2.relay);
  Object.keys(n5).sort().forEach((o4) => {
    t.set(o4, n5[o4]);
  }), t.set("symKey", e2.symKey), e2.expiryTimestamp && t.set("expiryTimestamp", e2.expiryTimestamp.toString()), e2.methods && t.set("methods", e2.methods.join(","));
  const r3 = t.toString();
  return `${e2.protocol}:${e2.topic}@${e2.version}?${r3}`;
}
function Ei(e2, t, n5) {
  return `${e2}?wc_ev=${n5}&topic=${t}`;
}
function le2(e2) {
  const t = [];
  return e2.forEach((n5) => {
    const [r3, o4] = n5.split(":");
    t.push(`${r3}:${o4}`);
  }), t;
}
function lr2(e2) {
  const t = [];
  return Object.values(e2).forEach((n5) => {
    t.push(...le2(n5.accounts));
  }), t;
}
function dr2(e2, t) {
  const n5 = [];
  return Object.values(e2).forEach((r3) => {
    le2(r3.accounts).includes(t) && n5.push(...r3.methods);
  }), n5;
}
function hr2(e2, t) {
  const n5 = [];
  return Object.values(e2).forEach((r3) => {
    le2(r3.accounts).includes(t) && n5.push(...r3.events);
  }), n5;
}
function gr2(e2) {
  const t = {};
  return e2 == null ? void 0 : e2.forEach((n5) => {
    var r3;
    const [o4, s3] = n5.split(":");
    t[o4] || (t[o4] = { accounts: [], chains: [], events: [], methods: [] }), t[o4].accounts.push(n5), (r3 = t[o4].chains) == null || r3.push(`${o4}:${s3}`);
  }), t;
}
function Ti(e2, t) {
  t = t.map((r3) => r3.replace("did:pkh:", ""));
  const n5 = gr2(t);
  for (const [r3, o4] of Object.entries(n5)) o4.methods ? o4.methods = Q2(o4.methods, e2) : o4.methods = e2, o4.events = ["chainChanged", "accountsChanged"];
  return n5;
}
var yr2 = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var mr2 = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function te2(e2, t) {
  const { message: n5, code: r3 } = mr2[e2];
  return { message: t ? `${n5} ${t}` : n5, code: r3 };
}
function de2(e2, t) {
  const { message: n5, code: r3 } = yr2[e2];
  return { message: t ? `${n5} ${t}` : n5, code: r3 };
}
function $e2(e2, t) {
  return Array.isArray(e2) ? typeof t < "u" && e2.length ? e2.every(t) : true : false;
}
function qe2(e2) {
  return Object.getPrototypeOf(e2) === Object.prototype && Object.keys(e2).length;
}
function ae(e2) {
  return typeof e2 > "u";
}
function q(e2, t) {
  return t && ae(e2) ? true : typeof e2 == "string" && !!e2.trim().length;
}
function Ge2(e2, t) {
  return t && ae(e2) ? true : typeof e2 == "number" && !isNaN(e2);
}
function $i(e2, t) {
  const { requiredNamespaces: n5 } = t, r3 = Object.keys(e2.namespaces), o4 = Object.keys(n5);
  let s3 = true;
  return re(o4, r3) ? (r3.forEach((i4) => {
    const { accounts: c6, methods: u2, events: a3 } = e2.namespaces[i4], l6 = le2(c6), f6 = n5[i4];
    (!re(Le2(i4, f6), l6) || !re(f6.methods, u2) || !re(f6.events, a3)) && (s3 = false);
  }), s3) : false;
}
function Re2(e2) {
  return q(e2, false) && e2.includes(":") ? e2.split(":").length === 2 : false;
}
function br2(e2) {
  if (q(e2, false) && e2.includes(":")) {
    const t = e2.split(":");
    if (t.length === 3) {
      const n5 = t[0] + ":" + t[1];
      return !!t[2] && Re2(n5);
    }
  }
  return false;
}
function Ri(e2) {
  function t(n5) {
    try {
      return typeof new URL(n5) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (q(e2, false)) {
      if (t(e2)) return true;
      const n5 = rt2(e2);
      return t(n5);
    }
  } catch {
  }
  return false;
}
function Pi2(e2) {
  var t;
  return (t = e2 == null ? void 0 : e2.proposer) == null ? void 0 : t.publicKey;
}
function Li(e2) {
  return e2 == null ? void 0 : e2.topic;
}
function Bi(e2, t) {
  let n5 = null;
  return q(e2 == null ? void 0 : e2.publicKey, false) || (n5 = te2("MISSING_OR_INVALID", `${t} controller public key should be a string`)), n5;
}
function Rt2(e2) {
  let t = true;
  return $e2(e2) ? e2.length && (t = e2.every((n5) => q(n5, false))) : t = false, t;
}
function wr2(e2, t, n5) {
  let r3 = null;
  return $e2(t) && t.length ? t.forEach((o4) => {
    r3 || Re2(o4) || (r3 = de2("UNSUPPORTED_CHAINS", `${n5}, chain ${o4} should be a string and conform to "namespace:chainId" format`));
  }) : Re2(e2) || (r3 = de2("UNSUPPORTED_CHAINS", `${n5}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r3;
}
function Er2(e2, t, n5) {
  let r3 = null;
  return Object.entries(e2).forEach(([o4, s3]) => {
    if (r3) return;
    const i4 = wr2(o4, Le2(o4, s3), `${t} ${n5}`);
    i4 && (r3 = i4);
  }), r3;
}
function vr2(e2, t) {
  let n5 = null;
  return $e2(e2) ? e2.forEach((r3) => {
    n5 || br2(r3) || (n5 = de2("UNSUPPORTED_ACCOUNTS", `${t}, account ${r3} should be a string and conform to "namespace:chainId:address" format`));
  }) : n5 = de2("UNSUPPORTED_ACCOUNTS", `${t}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), n5;
}
function xr2(e2, t) {
  let n5 = null;
  return Object.values(e2).forEach((r3) => {
    if (n5) return;
    const o4 = vr2(r3 == null ? void 0 : r3.accounts, `${t} namespace`);
    o4 && (n5 = o4);
  }), n5;
}
function Or2(e2, t) {
  let n5 = null;
  return Rt2(e2 == null ? void 0 : e2.methods) ? Rt2(e2 == null ? void 0 : e2.events) || (n5 = de2("UNSUPPORTED_EVENTS", `${t}, events should be an array of strings or empty array for no events`)) : n5 = de2("UNSUPPORTED_METHODS", `${t}, methods should be an array of strings or empty array for no methods`), n5;
}
function Pt2(e2, t) {
  let n5 = null;
  return Object.values(e2).forEach((r3) => {
    if (n5) return;
    const o4 = Or2(r3, `${t}, namespace`);
    o4 && (n5 = o4);
  }), n5;
}
function ji(e2, t, n5) {
  let r3 = null;
  if (e2 && qe2(e2)) {
    const o4 = Pt2(e2, t);
    o4 && (r3 = o4);
    const s3 = Er2(e2, t, n5);
    s3 && (r3 = s3);
  } else r3 = te2("MISSING_OR_INVALID", `${t}, ${n5} should be an object with data`);
  return r3;
}
function Ir2(e2, t) {
  let n5 = null;
  if (e2 && qe2(e2)) {
    const r3 = Pt2(e2, t);
    r3 && (n5 = r3);
    const o4 = xr2(e2, t);
    o4 && (n5 = o4);
  } else n5 = te2("MISSING_OR_INVALID", `${t}, namespaces should be an object with data`);
  return n5;
}
function Ar2(e2) {
  return q(e2.protocol, true);
}
function Ci(e2, t) {
  let n5 = false;
  return t && !e2 ? n5 = true : e2 && $e2(e2) && e2.length && e2.forEach((r3) => {
    n5 = Ar2(r3);
  }), n5;
}
function ki(e2) {
  return typeof e2 == "number";
}
function Di(e2) {
  return typeof e2 < "u" && typeof e2 !== null;
}
function Mi(e2) {
  return !(!e2 || typeof e2 != "object" || !e2.code || !Ge2(e2.code, false) || !e2.message || !q(e2.message, false));
}
function Vi(e2) {
  return !(ae(e2) || !q(e2.method, false));
}
function Hi(e2) {
  return !(ae(e2) || ae(e2.result) && ae(e2.error) || !Ge2(e2.id, false) || !q(e2.jsonrpc, false));
}
function Ki(e2) {
  return !(ae(e2) || !q(e2.name, false));
}
function Fi(e2, t) {
  return !(!Re2(t) || !lr2(e2).includes(t));
}
function qi(e2, t, n5) {
  return q(n5, false) ? dr2(e2, t).includes(n5) : false;
}
function Gi(e2, t, n5) {
  return q(n5, false) ? hr2(e2, t).includes(n5) : false;
}
function Nr2(e2, t, n5) {
  let r3 = null;
  const o4 = Wi(e2), s3 = zi(t), i4 = Object.keys(o4), c6 = Object.keys(s3), u2 = Sr2(Object.keys(e2)), a3 = Sr2(Object.keys(t)), l6 = u2.filter((f6) => !a3.includes(f6));
  return l6.length && (r3 = te2("NON_CONFORMING_NAMESPACES", `${n5} namespaces keys don't satisfy requiredNamespaces.
      Required: ${l6.toString()}
      Received: ${Object.keys(t).toString()}`)), re(i4, c6) || (r3 = te2("NON_CONFORMING_NAMESPACES", `${n5} namespaces chains don't satisfy required namespaces.
      Required: ${i4.toString()}
      Approved: ${c6.toString()}`)), Object.keys(t).forEach((f6) => {
    if (!f6.includes(":") || r3) return;
    const d5 = le2(t[f6].accounts);
    d5.includes(f6) || (r3 = te2("NON_CONFORMING_NAMESPACES", `${n5} namespaces accounts don't satisfy namespace accounts for ${f6}
        Required: ${f6}
        Approved: ${d5.toString()}`));
  }), i4.forEach((f6) => {
    r3 || (re(o4[f6].methods, s3[f6].methods) ? re(o4[f6].events, s3[f6].events) || (r3 = te2("NON_CONFORMING_NAMESPACES", `${n5} namespaces events don't satisfy namespace events for ${f6}`)) : r3 = te2("NON_CONFORMING_NAMESPACES", `${n5} namespaces methods don't satisfy namespace methods for ${f6}`));
  }), r3;
}
function Wi(e2) {
  const t = {};
  return Object.keys(e2).forEach((n5) => {
    var r3;
    n5.includes(":") ? t[n5] = e2[n5] : (r3 = e2[n5].chains) == null || r3.forEach((o4) => {
      t[o4] = { methods: e2[n5].methods, events: e2[n5].events };
    });
  }), t;
}
function Sr2(e2) {
  return [...new Set(e2.map((t) => t.includes(":") ? t.split(":")[0] : t))];
}
function zi(e2) {
  const t = {};
  return Object.keys(e2).forEach((n5) => {
    if (n5.includes(":")) t[n5] = e2[n5];
    else {
      const r3 = le2(e2[n5].accounts);
      r3 == null ? void 0 : r3.forEach((o4) => {
        t[o4] = { accounts: e2[n5].accounts.filter((s3) => s3.includes(`${o4}:`)), methods: e2[n5].methods, events: e2[n5].events };
      });
    }
  }), t;
}
function Ji(e2, t) {
  return Ge2(e2, false) && e2 <= t.max && e2 >= t.min;
}
function Yi() {
  const e2 = ue();
  return new Promise((t) => {
    switch (e2) {
      case H2.browser:
        t(Ur2());
        break;
      case H2.reactNative:
        t(_r2());
        break;
      case H2.node:
        t(Tr2());
        break;
      default:
        t(true);
    }
  });
}
function Ur2() {
  return Ae2() && (navigator == null ? void 0 : navigator.onLine);
}
async function _r2() {
  if (ne() && typeof global < "u" && global != null && global.NetInfo) {
    const e2 = await (global == null ? void 0 : global.NetInfo.fetch());
    return e2 == null ? void 0 : e2.isConnected;
  }
  return true;
}
function Tr2() {
  return true;
}
function Xi(e2) {
  switch (ue()) {
    case H2.browser:
      $r2(e2);
      break;
    case H2.reactNative:
      Rr2(e2);
      break;
    case H2.node:
      break;
  }
}
function $r2(e2) {
  !ne() && Ae2() && (window.addEventListener("online", () => e2(true)), window.addEventListener("offline", () => e2(false)));
}
function Rr2(e2) {
  ne() && typeof global < "u" && global != null && global.NetInfo && (global == null ? void 0 : global.NetInfo.addEventListener((t) => e2(t == null ? void 0 : t.isConnected)));
}
var Lt2 = {};
var Zi = class {
  static get(t) {
    return Lt2[t];
  }
  static set(t, n5) {
    Lt2[t] = n5;
  }
  static delete(t) {
    delete Lt2[t];
  }
};

// node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var import_events5 = __toESM(require_events());

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  DEFAULT_ERROR: () => DEFAULT_ERROR,
  IBaseJsonRpcProvider: () => n4,
  IEvents: () => e,
  IJsonRpcConnection: () => o2,
  IJsonRpcProvider: () => r2,
  INTERNAL_ERROR: () => INTERNAL_ERROR,
  INVALID_PARAMS: () => INVALID_PARAMS,
  INVALID_REQUEST: () => INVALID_REQUEST,
  METHOD_NOT_FOUND: () => METHOD_NOT_FOUND,
  PARSE_ERROR: () => PARSE_ERROR,
  RESERVED_ERROR_CODES: () => RESERVED_ERROR_CODES,
  SERVER_ERROR: () => SERVER_ERROR,
  SERVER_ERROR_CODE_RANGE: () => SERVER_ERROR_CODE_RANGE,
  STANDARD_ERROR_MAP: () => STANDARD_ERROR_MAP,
  formatErrorMessage: () => formatErrorMessage,
  formatJsonRpcError: () => formatJsonRpcError,
  formatJsonRpcRequest: () => formatJsonRpcRequest,
  formatJsonRpcResult: () => formatJsonRpcResult,
  getBigIntRpcId: () => getBigIntRpcId,
  getError: () => getError,
  getErrorByCode: () => getErrorByCode,
  isHttpUrl: () => isHttpUrl,
  isJsonRpcError: () => isJsonRpcError,
  isJsonRpcPayload: () => isJsonRpcPayload,
  isJsonRpcRequest: () => isJsonRpcRequest,
  isJsonRpcResponse: () => isJsonRpcResponse,
  isJsonRpcResult: () => isJsonRpcResult,
  isJsonRpcValidationInvalid: () => isJsonRpcValidationInvalid,
  isLocalhostUrl: () => isLocalhostUrl,
  isNodeJs: () => isNodeJs,
  isReservedErrorCode: () => isReservedErrorCode,
  isServerErrorCode: () => isServerErrorCode,
  isValidDefaultRoute: () => isValidDefaultRoute,
  isValidErrorCode: () => isValidErrorCode,
  isValidLeadingWildcardRoute: () => isValidLeadingWildcardRoute,
  isValidRoute: () => isValidRoute,
  isValidTrailingWildcardRoute: () => isValidTrailingWildcardRoute,
  isValidWildcardRoute: () => isValidWildcardRoute,
  isWsUrl: () => isWsUrl,
  parseConnectionError: () => parseConnectionError,
  payloadId: () => payloadId,
  validateJsonRpcError: () => validateJsonRpcError
});

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js
var PARSE_ERROR = "PARSE_ERROR";
var INVALID_REQUEST = "INVALID_REQUEST";
var METHOD_NOT_FOUND = "METHOD_NOT_FOUND";
var INVALID_PARAMS = "INVALID_PARAMS";
var INTERNAL_ERROR = "INTERNAL_ERROR";
var SERVER_ERROR = "SERVER_ERROR";
var RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];
var SERVER_ERROR_CODE_RANGE = [-32e3, -32099];
var STANDARD_ERROR_MAP = {
  [PARSE_ERROR]: { code: -32700, message: "Parse error" },
  [INVALID_REQUEST]: { code: -32600, message: "Invalid Request" },
  [METHOD_NOT_FOUND]: { code: -32601, message: "Method not found" },
  [INVALID_PARAMS]: { code: -32602, message: "Invalid params" },
  [INTERNAL_ERROR]: { code: -32603, message: "Internal error" },
  [SERVER_ERROR]: { code: -32e3, message: "Server error" }
};
var DEFAULT_ERROR = SERVER_ERROR;

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js
function isServerErrorCode(code2) {
  return code2 <= SERVER_ERROR_CODE_RANGE[0] && code2 >= SERVER_ERROR_CODE_RANGE[1];
}
function isReservedErrorCode(code2) {
  return RESERVED_ERROR_CODES.includes(code2);
}
function isValidErrorCode(code2) {
  return typeof code2 === "number";
}
function getError(type) {
  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return STANDARD_ERROR_MAP[type];
}
function getErrorByCode(code2) {
  const match = Object.values(STANDARD_ERROR_MAP).find((e2) => e2.code === code2);
  if (!match) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return match;
}
function validateJsonRpcError(response) {
  if (typeof response.error.code === "undefined") {
    return { valid: false, error: "Missing code for JSON-RPC error" };
  }
  if (typeof response.error.message === "undefined") {
    return { valid: false, error: "Missing message for JSON-RPC error" };
  }
  if (!isValidErrorCode(response.error.code)) {
    return {
      valid: false,
      error: `Invalid error code type for JSON-RPC: ${response.error.code}`
    };
  }
  if (isReservedErrorCode(response.error.code)) {
    const error = getErrorByCode(response.error.code);
    if (error.message !== STANDARD_ERROR_MAP[DEFAULT_ERROR].message && response.error.message === error.message) {
      return {
        valid: false,
        error: `Invalid error code message for JSON-RPC: ${response.error.code}`
      };
    }
  }
  return { valid: true };
}
function parseConnectionError(e2, url, type) {
  return e2.message.includes("getaddrinfo ENOTFOUND") || e2.message.includes("connect ECONNREFUSED") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e2;
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js
var env_exports = {};
__export(env_exports, {
  isNodeJs: () => isNodeJs
});
var import_environment = __toESM(require_cjs5());
__reExport(env_exports, __toESM(require_cjs5()));
var isNodeJs = import_environment.isNode;

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
__reExport(esm_exports, env_exports);

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js
function payloadId(entropy = 3) {
  const date = Date.now() * Math.pow(10, entropy);
  const extra = Math.floor(Math.random() * Math.pow(10, entropy));
  return date + extra;
}
function getBigIntRpcId(entropy = 6) {
  return BigInt(payloadId(entropy));
}
function formatJsonRpcRequest(method, params, id) {
  return {
    id: id || payloadId(),
    jsonrpc: "2.0",
    method,
    params
  };
}
function formatJsonRpcResult(id, result) {
  return {
    id,
    jsonrpc: "2.0",
    result
  };
}
function formatJsonRpcError(id, error, data) {
  return {
    id,
    jsonrpc: "2.0",
    error: formatErrorMessage(error, data)
  };
}
function formatErrorMessage(error, data) {
  if (typeof error === "undefined") {
    return getError(INTERNAL_ERROR);
  }
  if (typeof error === "string") {
    error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), { message: error });
  }
  if (typeof data !== "undefined") {
    error.data = data;
  }
  if (isReservedErrorCode(error.code)) {
    error = getErrorByCode(error.code);
  }
  return error;
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js
function isValidRoute(route) {
  if (route.includes("*")) {
    return isValidWildcardRoute(route);
  }
  if (/\W/g.test(route)) {
    return false;
  }
  return true;
}
function isValidDefaultRoute(route) {
  return route === "*";
}
function isValidWildcardRoute(route) {
  if (isValidDefaultRoute(route)) {
    return true;
  }
  if (!route.includes("*")) {
    return false;
  }
  if (route.split("*").length !== 2) {
    return false;
  }
  if (route.split("*").filter((x7) => x7.trim() === "").length !== 1) {
    return false;
  }
  return true;
}
function isValidLeadingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[0].trim();
}
function isValidTrailingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[1].trim();
}

// node_modules/@walletconnect/jsonrpc-types/dist/index.es.js
var e = class {
};
var o2 = class extends e {
  constructor(c6) {
    super();
  }
};
var n4 = class extends e {
  constructor() {
    super();
  }
};
var r2 = class extends n4 {
  constructor(c6) {
    super();
  }
};

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js
var HTTP_REGEX = "^https?:";
var WS_REGEX = "^wss?:";
function getUrlProtocol(url) {
  const matches = url.match(new RegExp(/^\w+:/, "gi"));
  if (!matches || !matches.length)
    return;
  return matches[0];
}
function matchRegexProtocol(url, regex) {
  const protocol = getUrlProtocol(url);
  if (typeof protocol === "undefined")
    return false;
  return new RegExp(regex).test(protocol);
}
function isHttpUrl(url) {
  return matchRegexProtocol(url, HTTP_REGEX);
}
function isWsUrl(url) {
  return matchRegexProtocol(url, WS_REGEX);
}
function isLocalhostUrl(url) {
  return new RegExp("wss?://localhost(:d{2,5})?").test(url);
}

// node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js
function isJsonRpcPayload(payload) {
  return typeof payload === "object" && "id" in payload && "jsonrpc" in payload && payload.jsonrpc === "2.0";
}
function isJsonRpcRequest(payload) {
  return isJsonRpcPayload(payload) && "method" in payload;
}
function isJsonRpcResponse(payload) {
  return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));
}
function isJsonRpcResult(payload) {
  return "result" in payload;
}
function isJsonRpcError(payload) {
  return "error" in payload;
}
function isJsonRpcValidationInvalid(validation) {
  return "error" in validation && validation.valid === false;
}

// node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var o3 = class extends r2 {
  constructor(t) {
    super(t), this.events = new import_events5.EventEmitter(), this.hasRegisteredEventListeners = false, this.connection = this.setConnection(t), this.connection.connected && this.registerEventListeners();
  }
  async connect(t = this.connection) {
    await this.open(t);
  }
  async disconnect() {
    await this.close();
  }
  on(t, e2) {
    this.events.on(t, e2);
  }
  once(t, e2) {
    this.events.once(t, e2);
  }
  off(t, e2) {
    this.events.off(t, e2);
  }
  removeListener(t, e2) {
    this.events.removeListener(t, e2);
  }
  async request(t, e2) {
    return this.requestStrict(formatJsonRpcRequest(t.method, t.params || [], t.id || getBigIntRpcId().toString()), e2);
  }
  async requestStrict(t, e2) {
    return new Promise(async (i4, s3) => {
      if (!this.connection.connected) try {
        await this.open();
      } catch (n5) {
        s3(n5);
      }
      this.events.on(`${t.id}`, (n5) => {
        isJsonRpcError(n5) ? s3(n5.error) : i4(n5.result);
      });
      try {
        await this.connection.send(t, e2);
      } catch (n5) {
        s3(n5);
      }
    });
  }
  setConnection(t = this.connection) {
    return t;
  }
  onPayload(t) {
    this.events.emit("payload", t), isJsonRpcResponse(t) ? this.events.emit(`${t.id}`, t) : this.events.emit("message", { type: t.method, data: t.params });
  }
  onClose(t) {
    t && t.code === 3e3 && this.events.emit("error", new Error(`WebSocket connection closed abnormally with code: ${t.code} ${t.reason ? `(${t.reason})` : ""}`)), this.events.emit("disconnect");
  }
  async open(t = this.connection) {
    this.connection === t && this.connection.connected || (this.connection.connected && this.close(), typeof t == "string" && (await this.connection.open(t), t = this.connection), this.connection = this.setConnection(t), await this.connection.open(), this.registerEventListeners(), this.events.emit("connect"));
  }
  async close() {
    await this.connection.close();
  }
  registerEventListeners() {
    this.hasRegisteredEventListeners || (this.connection.on("payload", (t) => this.onPayload(t)), this.connection.on("close", (t) => this.onClose(t)), this.connection.on("error", (t) => this.events.emit("error", t)), this.connection.on("register_error", (t) => this.onClose()), this.hasRegisteredEventListeners = true);
  }
};

// node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js
var import_events6 = __toESM(require_events());
var v3 = () => typeof WebSocket < "u" ? WebSocket : typeof global < "u" && typeof global.WebSocket < "u" ? global.WebSocket : typeof window < "u" && typeof window.WebSocket < "u" ? window.WebSocket : typeof self < "u" && typeof self.WebSocket < "u" ? self.WebSocket : require_browser2();
var w2 = () => typeof WebSocket < "u" || typeof global < "u" && typeof global.WebSocket < "u" || typeof window < "u" && typeof window.WebSocket < "u" || typeof self < "u" && typeof self.WebSocket < "u";
var d3 = (r3) => r3.split("?")[0];
var h4 = 10;
var b3 = v3();
var f4 = class {
  constructor(e2) {
    if (this.url = e2, this.events = new import_events6.EventEmitter(), this.registering = false, !isWsUrl(e2)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e2}`);
    this.url = e2;
  }
  get connected() {
    return typeof this.socket < "u";
  }
  get connecting() {
    return this.registering;
  }
  on(e2, t) {
    this.events.on(e2, t);
  }
  once(e2, t) {
    this.events.once(e2, t);
  }
  off(e2, t) {
    this.events.off(e2, t);
  }
  removeListener(e2, t) {
    this.events.removeListener(e2, t);
  }
  async open(e2 = this.url) {
    await this.register(e2);
  }
  async close() {
    return new Promise((e2, t) => {
      if (typeof this.socket > "u") {
        t(new Error("Connection already closed"));
        return;
      }
      this.socket.onclose = (n5) => {
        this.onClose(n5), e2();
      }, this.socket.close();
    });
  }
  async send(e2) {
    typeof this.socket > "u" && (this.socket = await this.register());
    try {
      this.socket.send(safeJsonStringify(e2));
    } catch (t) {
      this.onError(e2.id, t);
    }
  }
  register(e2 = this.url) {
    if (!isWsUrl(e2)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e2}`);
    if (this.registering) {
      const t = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= t || this.events.listenerCount("open") >= t) && this.events.setMaxListeners(t + 1), new Promise((n5, s3) => {
        this.events.once("register_error", (o4) => {
          this.resetMaxListeners(), s3(o4);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.socket > "u") return s3(new Error("WebSocket connection is missing or invalid"));
          n5(this.socket);
        });
      });
    }
    return this.url = e2, this.registering = true, new Promise((t, n5) => {
      const s3 = (0, esm_exports.isReactNative)() ? void 0 : { rejectUnauthorized: !isLocalhostUrl(e2) }, o4 = new b3(e2, [], s3);
      w2() ? o4.onerror = (i4) => {
        const a3 = i4;
        n5(this.emitError(a3.error));
      } : o4.on("error", (i4) => {
        n5(this.emitError(i4));
      }), o4.onopen = () => {
        this.onOpen(o4), t(o4);
      };
    });
  }
  onOpen(e2) {
    e2.onmessage = (t) => this.onPayload(t), e2.onclose = (t) => this.onClose(t), this.socket = e2, this.registering = false, this.events.emit("open");
  }
  onClose(e2) {
    this.socket = void 0, this.registering = false, this.events.emit("close", e2);
  }
  onPayload(e2) {
    if (typeof e2.data > "u") return;
    const t = typeof e2.data == "string" ? safeJsonParse(e2.data) : e2.data;
    this.events.emit("payload", t);
  }
  onError(e2, t) {
    const n5 = this.parseError(t), s3 = n5.message || n5.toString(), o4 = formatJsonRpcError(e2, s3);
    this.events.emit("payload", o4);
  }
  parseError(e2, t = this.url) {
    return parseConnectionError(e2, d3(t), "WS");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > h4 && this.events.setMaxListeners(h4);
  }
  emitError(e2) {
    const t = this.parseError(new Error((e2 == null ? void 0 : e2.message) || `WebSocket connection failed for host: ${d3(this.url)}`));
    return this.events.emit("register_error", t), t;
  }
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_lodash = __toESM(require_lodash());
var import_window_getters2 = __toESM(require_cjs3());
var xe3 = "wc";
var Oe3 = 2;
var he2 = "core";
var B2 = `${xe3}@2:${he2}:`;
var mt2 = { name: he2, logger: "error" };
var vt3 = { database: ":memory:" };
var ft3 = "crypto";
var Ae3 = "client_ed25519_seed";
var _t3 = import_time4.ONE_DAY;
var Et3 = "keychain";
var wt3 = "0.3";
var It3 = "messages";
var Tt2 = "0.3";
var Ne3 = import_time4.SIX_HOURS;
var Ct2 = "publisher";
var Pt3 = "irn";
var St3 = "error";
var $e3 = "wss://relay.walletconnect.org";
var Rt3 = "relayer";
var T3 = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" };
var xt3 = "_subscription";
var L2 = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" };
var Ot3 = 0.1;
var me3 = "2.19.0";
var Q3 = { link_mode: "link_mode", relay: "relay" };
var At2 = "0.3";
var Nt3 = "WALLETCONNECT_CLIENT_ID";
var ze3 = "WALLETCONNECT_LINK_MODE_APPS";
var $ = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" };
var $t2 = "subscription";
var zt3 = "0.3";
var Lt3 = import_time4.FIVE_SECONDS * 1e3;
var kt3 = "pairing";
var Ut3 = "0.3";
var ie2 = { wc_pairingDelete: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1e3 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1001 } }, wc_pairingPing: { req: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1002 }, res: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1003 } }, unregistered_method: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 } } };
var se2 = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" };
var F2 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
var Ft3 = "history";
var Mt2 = "0.3";
var Kt2 = "expirer";
var M4 = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" };
var Bt3 = "0.3";
var jt3 = "verify-api";
var js2 = "https://verify.walletconnect.com";
var Vt2 = "https://verify.walletconnect.org";
var le3 = Vt2;
var qt2 = `${le3}/v3`;
var Gt3 = [js2, Vt2];
var Ht2 = "echo";
var Yt3 = "https://echo.walletconnect.com";
var q2 = { pairing_started: "pairing_started", pairing_uri_validation_success: "pairing_uri_validation_success", pairing_uri_not_expired: "pairing_uri_not_expired", store_new_pairing: "store_new_pairing", subscribing_pairing_topic: "subscribing_pairing_topic", subscribe_pairing_topic_success: "subscribe_pairing_topic_success", existing_pairing: "existing_pairing", pairing_not_expired: "pairing_not_expired", emit_inactive_pairing: "emit_inactive_pairing", emit_session_proposal: "emit_session_proposal", subscribing_to_pairing_topic: "subscribing_to_pairing_topic" };
var J4 = { no_wss_connection: "no_wss_connection", no_internet_connection: "no_internet_connection", malformed_pairing_uri: "malformed_pairing_uri", active_pairing_already_exists: "active_pairing_already_exists", subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure", pairing_expired: "pairing_expired", proposal_expired: "proposal_expired", proposal_listener_not_found: "proposal_listener_not_found" };
var qs2 = { session_approve_started: "session_approve_started", proposal_not_expired: "proposal_not_expired", session_namespaces_validation_success: "session_namespaces_validation_success", create_session_topic: "create_session_topic", subscribing_session_topic: "subscribing_session_topic", subscribe_session_topic_success: "subscribe_session_topic_success", publishing_session_approve: "publishing_session_approve", session_approve_publish_success: "session_approve_publish_success", store_session: "store_session", publishing_session_settle: "publishing_session_settle", session_settle_publish_success: "session_settle_publish_success" };
var Gs2 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", proposal_expired: "proposal_expired", subscribe_session_topic_failure: "subscribe_session_topic_failure", session_approve_publish_failure: "session_approve_publish_failure", session_settle_publish_failure: "session_settle_publish_failure", session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure", proposal_not_found: "proposal_not_found" };
var Hs2 = { authenticated_session_approve_started: "authenticated_session_approve_started", authenticated_session_not_expired: "authenticated_session_not_expired", chains_caip2_compliant: "chains_caip2_compliant", chains_evm_compliant: "chains_evm_compliant", create_authenticated_session_topic: "create_authenticated_session_topic", cacaos_verified: "cacaos_verified", store_authenticated_session: "store_authenticated_session", subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic", subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success", publishing_authenticated_session_approve: "publishing_authenticated_session_approve", authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success" };
var Ys2 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", missing_session_authenticate_request: "missing_session_authenticate_request", session_authenticate_request_expired: "session_authenticate_request_expired", chains_caip2_compliant_failure: "chains_caip2_compliant_failure", chains_evm_compliant_failure: "chains_evm_compliant_failure", invalid_cacao: "invalid_cacao", subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure", authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure", authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found" };
var Jt3 = 0.1;
var Xt2 = "event-client";
var Wt3 = 86400;
var Zt2 = "https://pulse.walletconnect.org/batch";
function Js2(n5, e2) {
  if (n5.length >= 255) throw new TypeError("Alphabet too long");
  for (var t = new Uint8Array(256), s3 = 0; s3 < t.length; s3++) t[s3] = 255;
  for (var i4 = 0; i4 < n5.length; i4++) {
    var r3 = n5.charAt(i4), o4 = r3.charCodeAt(0);
    if (t[o4] !== 255) throw new TypeError(r3 + " is ambiguous");
    t[o4] = i4;
  }
  var a3 = n5.length, c6 = n5.charAt(0), h5 = Math.log(a3) / Math.log(256), u2 = Math.log(256) / Math.log(a3);
  function g3(l6) {
    if (l6 instanceof Uint8Array || (ArrayBuffer.isView(l6) ? l6 = new Uint8Array(l6.buffer, l6.byteOffset, l6.byteLength) : Array.isArray(l6) && (l6 = Uint8Array.from(l6))), !(l6 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (l6.length === 0) return "";
    for (var y4 = 0, O4 = 0, w3 = 0, v5 = l6.length; w3 !== v5 && l6[w3] === 0; ) w3++, y4++;
    for (var k5 = (v5 - w3) * u2 + 1 >>> 0, I3 = new Uint8Array(k5); w3 !== v5; ) {
      for (var V3 = l6[w3], X = 0, K4 = k5 - 1; (V3 !== 0 || X < O4) && K4 !== -1; K4--, X++) V3 += 256 * I3[K4] >>> 0, I3[K4] = V3 % a3 >>> 0, V3 = V3 / a3 >>> 0;
      if (V3 !== 0) throw new Error("Non-zero carry");
      O4 = X, w3++;
    }
    for (var Y3 = k5 - O4; Y3 !== k5 && I3[Y3] === 0; ) Y3++;
    for (var ge2 = c6.repeat(y4); Y3 < k5; ++Y3) ge2 += n5.charAt(I3[Y3]);
    return ge2;
  }
  function m3(l6) {
    if (typeof l6 != "string") throw new TypeError("Expected String");
    if (l6.length === 0) return new Uint8Array();
    var y4 = 0;
    if (l6[y4] !== " ") {
      for (var O4 = 0, w3 = 0; l6[y4] === c6; ) O4++, y4++;
      for (var v5 = (l6.length - y4) * h5 + 1 >>> 0, k5 = new Uint8Array(v5); l6[y4]; ) {
        var I3 = t[l6.charCodeAt(y4)];
        if (I3 === 255) return;
        for (var V3 = 0, X = v5 - 1; (I3 !== 0 || V3 < w3) && X !== -1; X--, V3++) I3 += a3 * k5[X] >>> 0, k5[X] = I3 % 256 >>> 0, I3 = I3 / 256 >>> 0;
        if (I3 !== 0) throw new Error("Non-zero carry");
        w3 = V3, y4++;
      }
      if (l6[y4] !== " ") {
        for (var K4 = v5 - w3; K4 !== v5 && k5[K4] === 0; ) K4++;
        for (var Y3 = new Uint8Array(O4 + (v5 - K4)), ge2 = O4; K4 !== v5; ) Y3[ge2++] = k5[K4++];
        return Y3;
      }
    }
  }
  function A3(l6) {
    var y4 = m3(l6);
    if (y4) return y4;
    throw new Error(`Non-${e2} character`);
  }
  return { encode: g3, decodeUnsafe: m3, decode: A3 };
}
var Xs2 = Js2;
var Ws2 = Xs2;
var Qt2 = (n5) => {
  if (n5 instanceof Uint8Array && n5.constructor.name === "Uint8Array") return n5;
  if (n5 instanceof ArrayBuffer) return new Uint8Array(n5);
  if (ArrayBuffer.isView(n5)) return new Uint8Array(n5.buffer, n5.byteOffset, n5.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var Zs2 = (n5) => new TextEncoder().encode(n5);
var Qs2 = (n5) => new TextDecoder().decode(n5);
var er3 = class {
  constructor(e2, t, s3) {
    this.name = e2, this.prefix = t, this.baseEncode = s3;
  }
  encode(e2) {
    if (e2 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e2)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var tr3 = class {
  constructor(e2, t, s3) {
    if (this.name = e2, this.prefix = t, t.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = t.codePointAt(0), this.baseDecode = s3;
  }
  decode(e2) {
    if (typeof e2 == "string") {
      if (e2.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e2)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e2.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e2) {
    return ei2(this, e2);
  }
};
var ir3 = class {
  constructor(e2) {
    this.decoders = e2;
  }
  or(e2) {
    return ei2(this, e2);
  }
  decode(e2) {
    const t = e2[0], s3 = this.decoders[t];
    if (s3) return s3.decode(e2);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e2)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ei2 = (n5, e2) => new ir3({ ...n5.decoders || { [n5.prefix]: n5 }, ...e2.decoders || { [e2.prefix]: e2 } });
var sr3 = class {
  constructor(e2, t, s3, i4) {
    this.name = e2, this.prefix = t, this.baseEncode = s3, this.baseDecode = i4, this.encoder = new er3(e2, t, s3), this.decoder = new tr3(e2, t, i4);
  }
  encode(e2) {
    return this.encoder.encode(e2);
  }
  decode(e2) {
    return this.decoder.decode(e2);
  }
};
var ve3 = ({ name: n5, prefix: e2, encode: t, decode: s3 }) => new sr3(n5, e2, t, s3);
var ue2 = ({ prefix: n5, name: e2, alphabet: t }) => {
  const { encode: s3, decode: i4 } = Ws2(t, e2);
  return ve3({ prefix: n5, name: e2, encode: s3, decode: (r3) => Qt2(i4(r3)) });
};
var rr3 = (n5, e2, t, s3) => {
  const i4 = {};
  for (let u2 = 0; u2 < e2.length; ++u2) i4[e2[u2]] = u2;
  let r3 = n5.length;
  for (; n5[r3 - 1] === "="; ) --r3;
  const o4 = new Uint8Array(r3 * t / 8 | 0);
  let a3 = 0, c6 = 0, h5 = 0;
  for (let u2 = 0; u2 < r3; ++u2) {
    const g3 = i4[n5[u2]];
    if (g3 === void 0) throw new SyntaxError(`Non-${s3} character`);
    c6 = c6 << t | g3, a3 += t, a3 >= 8 && (a3 -= 8, o4[h5++] = 255 & c6 >> a3);
  }
  if (a3 >= t || 255 & c6 << 8 - a3) throw new SyntaxError("Unexpected end of data");
  return o4;
};
var nr3 = (n5, e2, t) => {
  const s3 = e2[e2.length - 1] === "=", i4 = (1 << t) - 1;
  let r3 = "", o4 = 0, a3 = 0;
  for (let c6 = 0; c6 < n5.length; ++c6) for (a3 = a3 << 8 | n5[c6], o4 += 8; o4 > t; ) o4 -= t, r3 += e2[i4 & a3 >> o4];
  if (o4 && (r3 += e2[i4 & a3 << t - o4]), s3) for (; r3.length * t & 7; ) r3 += "=";
  return r3;
};
var C3 = ({ name: n5, prefix: e2, bitsPerChar: t, alphabet: s3 }) => ve3({ prefix: e2, name: n5, encode(i4) {
  return nr3(i4, s3, t);
}, decode(i4) {
  return rr3(i4, s3, t, n5);
} });
var or4 = ve3({ prefix: "\0", name: "identity", encode: (n5) => Qs2(n5), decode: (n5) => Zs2(n5) });
var ar3 = Object.freeze({ __proto__: null, identity: or4 });
var cr3 = C3({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var hr3 = Object.freeze({ __proto__: null, base2: cr3 });
var lr3 = C3({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var ur2 = Object.freeze({ __proto__: null, base8: lr3 });
var dr3 = ue2({ prefix: "9", name: "base10", alphabet: "0123456789" });
var pr2 = Object.freeze({ __proto__: null, base10: dr3 });
var gr3 = C3({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var yr3 = C3({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var br3 = Object.freeze({ __proto__: null, base16: gr3, base16upper: yr3 });
var Dr2 = C3({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var mr3 = C3({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var vr3 = C3({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var fr2 = C3({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var _r3 = C3({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var Er3 = C3({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var wr3 = C3({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var Ir3 = C3({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var Tr3 = C3({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var Cr2 = Object.freeze({ __proto__: null, base32: Dr2, base32upper: mr3, base32pad: vr3, base32padupper: fr2, base32hex: _r3, base32hexupper: Er3, base32hexpad: wr3, base32hexpadupper: Ir3, base32z: Tr3 });
var Pr2 = ue2({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var Sr3 = ue2({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var Rr3 = Object.freeze({ __proto__: null, base36: Pr2, base36upper: Sr3 });
var xr3 = ue2({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Or3 = ue2({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var Ar3 = Object.freeze({ __proto__: null, base58btc: xr3, base58flickr: Or3 });
var Nr3 = C3({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var $r3 = C3({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var zr3 = C3({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var Lr3 = C3({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var kr3 = Object.freeze({ __proto__: null, base64: Nr3, base64pad: $r3, base64url: zr3, base64urlpad: Lr3 });
var ti2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var Ur3 = ti2.reduce((n5, e2, t) => (n5[t] = e2, n5), []);
var Fr2 = ti2.reduce((n5, e2, t) => (n5[e2.codePointAt(0)] = t, n5), []);
function Mr2(n5) {
  return n5.reduce((e2, t) => (e2 += Ur3[t], e2), "");
}
function Kr3(n5) {
  const e2 = [];
  for (const t of n5) {
    const s3 = Fr2[t.codePointAt(0)];
    if (s3 === void 0) throw new Error(`Non-base256emoji character: ${t}`);
    e2.push(s3);
  }
  return new Uint8Array(e2);
}
var Br3 = ve3({ prefix: "🚀", name: "base256emoji", encode: Mr2, decode: Kr3 });
var jr2 = Object.freeze({ __proto__: null, base256emoji: Br3 });
var Vr2 = si2;
var ii2 = 128;
var qr2 = 127;
var Gr2 = ~qr2;
var Hr3 = Math.pow(2, 31);
function si2(n5, e2, t) {
  e2 = e2 || [], t = t || 0;
  for (var s3 = t; n5 >= Hr3; ) e2[t++] = n5 & 255 | ii2, n5 /= 128;
  for (; n5 & Gr2; ) e2[t++] = n5 & 255 | ii2, n5 >>>= 7;
  return e2[t] = n5 | 0, si2.bytes = t - s3 + 1, e2;
}
var Yr3 = Le3;
var Jr3 = 128;
var ri2 = 127;
function Le3(n5, s3) {
  var t = 0, s3 = s3 || 0, i4 = 0, r3 = s3, o4, a3 = n5.length;
  do {
    if (r3 >= a3) throw Le3.bytes = 0, new RangeError("Could not decode varint");
    o4 = n5[r3++], t += i4 < 28 ? (o4 & ri2) << i4 : (o4 & ri2) * Math.pow(2, i4), i4 += 7;
  } while (o4 >= Jr3);
  return Le3.bytes = r3 - s3, t;
}
var Xr2 = Math.pow(2, 7);
var Wr3 = Math.pow(2, 14);
var Zr3 = Math.pow(2, 21);
var Qr2 = Math.pow(2, 28);
var en3 = Math.pow(2, 35);
var tn2 = Math.pow(2, 42);
var sn3 = Math.pow(2, 49);
var rn3 = Math.pow(2, 56);
var nn3 = Math.pow(2, 63);
var on3 = function(n5) {
  return n5 < Xr2 ? 1 : n5 < Wr3 ? 2 : n5 < Zr3 ? 3 : n5 < Qr2 ? 4 : n5 < en3 ? 5 : n5 < tn2 ? 6 : n5 < sn3 ? 7 : n5 < rn3 ? 8 : n5 < nn3 ? 9 : 10;
};
var an2 = { encode: Vr2, decode: Yr3, encodingLength: on3 };
var ni2 = an2;
var oi2 = (n5, e2, t = 0) => (ni2.encode(n5, e2, t), e2);
var ai2 = (n5) => ni2.encodingLength(n5);
var ke3 = (n5, e2) => {
  const t = e2.byteLength, s3 = ai2(n5), i4 = s3 + ai2(t), r3 = new Uint8Array(i4 + t);
  return oi2(n5, r3, 0), oi2(t, r3, s3), r3.set(e2, i4), new cn2(n5, t, e2, r3);
};
var cn2 = class {
  constructor(e2, t, s3, i4) {
    this.code = e2, this.size = t, this.digest = s3, this.bytes = i4;
  }
};
var ci2 = ({ name: n5, code: e2, encode: t }) => new hn2(n5, e2, t);
var hn2 = class {
  constructor(e2, t, s3) {
    this.name = e2, this.code = t, this.encode = s3;
  }
  digest(e2) {
    if (e2 instanceof Uint8Array) {
      const t = this.encode(e2);
      return t instanceof Uint8Array ? ke3(this.code, t) : t.then((s3) => ke3(this.code, s3));
    } else throw Error("Unknown type, must be binary type");
  }
};
var hi2 = (n5) => async (e2) => new Uint8Array(await crypto.subtle.digest(n5, e2));
var ln2 = ci2({ name: "sha2-256", code: 18, encode: hi2("SHA-256") });
var un2 = ci2({ name: "sha2-512", code: 19, encode: hi2("SHA-512") });
var dn2 = Object.freeze({ __proto__: null, sha256: ln2, sha512: un2 });
var li2 = 0;
var pn2 = "identity";
var ui2 = Qt2;
var gn3 = (n5) => ke3(li2, ui2(n5));
var yn3 = { code: li2, name: pn2, encode: ui2, digest: gn3 };
var bn3 = Object.freeze({ __proto__: null, identity: yn3 });
new TextEncoder(), new TextDecoder();
var di2 = { ...ar3, ...hr3, ...ur2, ...pr2, ...br3, ...Cr2, ...Rr3, ...Ar3, ...kr3, ...jr2 };
({ ...dn2, ...bn3 });
function Dn2(n5 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? globalThis.Buffer.allocUnsafe(n5) : new Uint8Array(n5);
}
function pi2(n5, e2, t, s3) {
  return { name: n5, prefix: e2, encoder: { name: n5, prefix: e2, encode: t }, decoder: { decode: s3 } };
}
var gi2 = pi2("utf8", "u", (n5) => "u" + new TextDecoder("utf8").decode(n5), (n5) => new TextEncoder().encode(n5.substring(1)));
var Ue3 = pi2("ascii", "a", (n5) => {
  let e2 = "a";
  for (let t = 0; t < n5.length; t++) e2 += String.fromCharCode(n5[t]);
  return e2;
}, (n5) => {
  n5 = n5.substring(1);
  const e2 = Dn2(n5.length);
  for (let t = 0; t < n5.length; t++) e2[t] = n5.charCodeAt(t);
  return e2;
});
var mn3 = { utf8: gi2, "utf-8": gi2, hex: di2.base16, latin1: Ue3, ascii: Ue3, binary: Ue3, ...di2 };
function vn3(n5, e2 = "utf8") {
  const t = mn3[e2];
  if (!t) throw new Error(`Unsupported encoding "${e2}"`);
  return (e2 === "utf8" || e2 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(n5, "utf8") : t.decoder.decode(`${t.prefix}${n5}`);
}
var fn2 = Object.defineProperty;
var _n3 = (n5, e2, t) => e2 in n5 ? fn2(n5, e2, { enumerable: true, configurable: true, writable: true, value: t }) : n5[e2] = t;
var G2 = (n5, e2, t) => _n3(n5, typeof e2 != "symbol" ? e2 + "" : e2, t);
var yi2 = class {
  constructor(e2, t) {
    this.core = e2, this.logger = t, G2(this, "keychain", /* @__PURE__ */ new Map()), G2(this, "name", Et3), G2(this, "version", wt3), G2(this, "initialized", false), G2(this, "storagePrefix", B2), G2(this, "init", async () => {
      if (!this.initialized) {
        const s3 = await this.getKeyChain();
        typeof s3 < "u" && (this.keychain = s3), this.initialized = true;
      }
    }), G2(this, "has", (s3) => (this.isInitialized(), this.keychain.has(s3))), G2(this, "set", async (s3, i4) => {
      this.isInitialized(), this.keychain.set(s3, i4), await this.persist();
    }), G2(this, "get", (s3) => {
      this.isInitialized();
      const i4 = this.keychain.get(s3);
      if (typeof i4 > "u") {
        const { message: r3 } = te2("NO_MATCHING_KEY", `${this.name}: ${s3}`);
        throw new Error(r3);
      }
      return i4;
    }), G2(this, "del", async (s3) => {
      this.isInitialized(), this.keychain.delete(s3), await this.persist();
    }), this.core = e2, this.logger = E2(t, this.name);
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setKeyChain(e2) {
    await this.core.storage.setItem(this.storageKey, no2(e2));
  }
  async getKeyChain() {
    const e2 = await this.core.storage.getItem(this.storageKey);
    return typeof e2 < "u" ? ro2(e2) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var En3 = Object.defineProperty;
var wn2 = (n5, e2, t) => e2 in n5 ? En3(n5, e2, { enumerable: true, configurable: true, writable: true, value: t }) : n5[e2] = t;
var P3 = (n5, e2, t) => wn2(n5, typeof e2 != "symbol" ? e2 + "" : e2, t);
var bi2 = class {
  constructor(e2, t, s3) {
    this.core = e2, this.logger = t, P3(this, "name", ft3), P3(this, "keychain"), P3(this, "randomSessionIdentifier", ni()), P3(this, "initialized", false), P3(this, "init", async () => {
      this.initialized || (await this.keychain.init(), this.initialized = true);
    }), P3(this, "hasKeys", (i4) => (this.isInitialized(), this.keychain.has(i4))), P3(this, "getClientId", async () => {
      this.isInitialized();
      const i4 = await this.getClientSeed(), r3 = Po(i4);
      return Qe(r3.publicKey);
    }), P3(this, "generateKeyPair", () => {
      this.isInitialized();
      const i4 = ti();
      return this.setPrivateKey(i4.publicKey, i4.privateKey);
    }), P3(this, "signJWT", async (i4) => {
      this.isInitialized();
      const r3 = await this.getClientSeed(), o4 = Po(r3), a3 = this.randomSessionIdentifier, c6 = _t3;
      return await Qo(a3, i4, c6, o4);
    }), P3(this, "generateSharedKey", (i4, r3, o4) => {
      this.isInitialized();
      const a3 = this.getPrivateKey(i4), c6 = ri(a3, r3);
      return this.setSymKey(c6, o4);
    }), P3(this, "setSymKey", async (i4, r3) => {
      this.isInitialized();
      const o4 = r3 || oi(i4);
      return await this.keychain.set(o4, i4), o4;
    }), P3(this, "deleteKeyPair", async (i4) => {
      this.isInitialized(), await this.keychain.del(i4);
    }), P3(this, "deleteSymKey", async (i4) => {
      this.isInitialized(), await this.keychain.del(i4);
    }), P3(this, "encode", async (i4, r3, o4) => {
      this.isInitialized();
      const a3 = rr2(o4), c6 = safeJsonStringify(r3);
      if (di(a3)) return ai(c6, o4 == null ? void 0 : o4.encoding);
      if (li(a3)) {
        const m3 = a3.senderPublicKey, A3 = a3.receiverPublicKey;
        i4 = await this.generateSharedKey(m3, A3);
      }
      const h5 = this.getSymKey(i4), { type: u2, senderPublicKey: g3 } = a3;
      return ii({ type: u2, symKey: h5, message: c6, senderPublicKey: g3, encoding: o4 == null ? void 0 : o4.encoding });
    }), P3(this, "decode", async (i4, r3, o4) => {
      this.isInitialized();
      const a3 = fi(r3, o4);
      if (di(a3)) {
        const c6 = ui(r3, o4 == null ? void 0 : o4.encoding);
        return safeJsonParse(c6);
      }
      if (li(a3)) {
        const c6 = a3.receiverPublicKey, h5 = a3.senderPublicKey;
        i4 = await this.generateSharedKey(c6, h5);
      }
      try {
        const c6 = this.getSymKey(i4), h5 = ci({ symKey: c6, encoded: r3, encoding: o4 == null ? void 0 : o4.encoding });
        return safeJsonParse(h5);
      } catch (c6) {
        this.logger.error(`Failed to decode message from topic: '${i4}', clientId: '${await this.getClientId()}'`), this.logger.error(c6);
      }
    }), P3(this, "getPayloadType", (i4, r3 = At) => {
      const o4 = Fe({ encoded: i4, encoding: r3 });
      return fe2(o4.type);
    }), P3(this, "getPayloadSenderPublicKey", (i4, r3 = At) => {
      const o4 = Fe({ encoded: i4, encoding: r3 });
      return o4.senderPublicKey ? toString2(o4.senderPublicKey, V2) : void 0;
    }), this.core = e2, this.logger = E2(t, this.name), this.keychain = s3 || new yi2(this.core, this.logger);
  }
  get context() {
    return y2(this.logger);
  }
  async setPrivateKey(e2, t) {
    return await this.keychain.set(e2, t), e2;
  }
  getPrivateKey(e2) {
    return this.keychain.get(e2);
  }
  async getClientSeed() {
    let e2 = "";
    try {
      e2 = this.keychain.get(Ae3);
    } catch {
      e2 = ni(), await this.keychain.set(Ae3, e2);
    }
    return vn3(e2, "base16");
  }
  getSymKey(e2) {
    return this.keychain.get(e2);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var In3 = Object.defineProperty;
var Tn3 = (n5, e2, t) => e2 in n5 ? In3(n5, e2, { enumerable: true, configurable: true, writable: true, value: t }) : n5[e2] = t;
var H3 = (n5, e2, t) => Tn3(n5, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Di2 = class extends y3 {
  constructor(e2, t) {
    super(e2, t), this.logger = e2, this.core = t, H3(this, "messages", /* @__PURE__ */ new Map()), H3(this, "name", It3), H3(this, "version", Tt2), H3(this, "initialized", false), H3(this, "storagePrefix", B2), H3(this, "init", async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const s3 = await this.getRelayerMessages();
          typeof s3 < "u" && (this.messages = s3), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (s3) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(s3);
        } finally {
          this.initialized = true;
        }
      }
    }), H3(this, "set", async (s3, i4) => {
      this.isInitialized();
      const r3 = si(i4);
      let o4 = this.messages.get(s3);
      return typeof o4 > "u" && (o4 = {}), typeof o4[r3] < "u" || (o4[r3] = i4, this.messages.set(s3, o4), await this.persist()), r3;
    }), H3(this, "get", (s3) => {
      this.isInitialized();
      let i4 = this.messages.get(s3);
      return typeof i4 > "u" && (i4 = {}), i4;
    }), H3(this, "has", (s3, i4) => {
      this.isInitialized();
      const r3 = this.get(s3), o4 = si(i4);
      return typeof r3[o4] < "u";
    }), H3(this, "del", async (s3) => {
      this.isInitialized(), this.messages.delete(s3), await this.persist();
    }), this.logger = E2(e2, this.name), this.core = t;
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setRelayerMessages(e2) {
    await this.core.storage.setItem(this.storageKey, no2(e2));
  }
  async getRelayerMessages() {
    const e2 = await this.core.storage.getItem(this.storageKey);
    return typeof e2 < "u" ? ro2(e2) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Cn3 = Object.defineProperty;
var Pn2 = Object.defineProperties;
var Sn2 = Object.getOwnPropertyDescriptors;
var mi2 = Object.getOwnPropertySymbols;
var Rn3 = Object.prototype.hasOwnProperty;
var xn3 = Object.prototype.propertyIsEnumerable;
var Fe2 = (n5, e2, t) => e2 in n5 ? Cn3(n5, e2, { enumerable: true, configurable: true, writable: true, value: t }) : n5[e2] = t;
var fe3 = (n5, e2) => {
  for (var t in e2 || (e2 = {})) Rn3.call(e2, t) && Fe2(n5, t, e2[t]);
  if (mi2) for (var t of mi2(e2)) xn3.call(e2, t) && Fe2(n5, t, e2[t]);
  return n5;
};
var Me3 = (n5, e2) => Pn2(n5, Sn2(e2));
var j3 = (n5, e2, t) => Fe2(n5, typeof e2 != "symbol" ? e2 + "" : e2, t);
var On3 = class extends m2 {
  constructor(e2, t) {
    super(e2, t), this.relayer = e2, this.logger = t, j3(this, "events", new import_events7.EventEmitter()), j3(this, "name", Ct2), j3(this, "queue", /* @__PURE__ */ new Map()), j3(this, "publishTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE)), j3(this, "initialPublishTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), j3(this, "needsTransportRestart", false), j3(this, "publish", async (s3, i4, r3) => {
      var o4;
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: s3, message: i4, opts: r3 } });
      const a3 = (r3 == null ? void 0 : r3.ttl) || Ne3, c6 = yi(r3), h5 = (r3 == null ? void 0 : r3.prompt) || false, u2 = (r3 == null ? void 0 : r3.tag) || 0, g3 = (r3 == null ? void 0 : r3.id) || getBigIntRpcId().toString(), m3 = { topic: s3, message: i4, opts: { ttl: a3, relay: c6, prompt: h5, tag: u2, id: g3, attestation: r3 == null ? void 0 : r3.attestation, tvf: r3 == null ? void 0 : r3.tvf } }, A3 = `Failed to publish payload, please try again. id:${g3} tag:${u2}`;
      try {
        const l6 = new Promise(async (y4) => {
          const O4 = ({ id: v5 }) => {
            m3.opts.id === v5 && (this.removeRequestFromQueue(v5), this.relayer.events.removeListener(T3.publish, O4), y4(m3));
          };
          this.relayer.events.on(T3.publish, O4);
          const w3 = ao2(new Promise((v5, k5) => {
            this.rpcPublish({ topic: s3, message: i4, ttl: a3, prompt: h5, tag: u2, id: g3, attestation: r3 == null ? void 0 : r3.attestation, tvf: r3 == null ? void 0 : r3.tvf }).then(v5).catch((I3) => {
              this.logger.warn(I3, I3 == null ? void 0 : I3.message), k5(I3);
            });
          }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${g3} tag:${u2}`);
          try {
            await w3, this.events.removeListener(T3.publish, O4);
          } catch (v5) {
            this.queue.set(g3, Me3(fe3({}, m3), { attempt: 1 })), this.logger.warn(v5, v5 == null ? void 0 : v5.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: g3, topic: s3, message: i4, opts: r3 } }), await ao2(l6, this.publishTimeout, A3);
      } catch (l6) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(l6), (o4 = r3 == null ? void 0 : r3.internal) != null && o4.throwOnFailedPublish) throw l6;
      } finally {
        this.queue.delete(g3);
      }
    }), j3(this, "on", (s3, i4) => {
      this.events.on(s3, i4);
    }), j3(this, "once", (s3, i4) => {
      this.events.once(s3, i4);
    }), j3(this, "off", (s3, i4) => {
      this.events.off(s3, i4);
    }), j3(this, "removeListener", (s3, i4) => {
      this.events.removeListener(s3, i4);
    }), this.relayer = e2, this.logger = E2(t, this.name), this.registerEventListeners();
  }
  get context() {
    return y2(this.logger);
  }
  async rpcPublish(e2) {
    var t, s3, i4, r3;
    const { topic: o4, message: a3, ttl: c6 = Ne3, prompt: h5, tag: u2, id: g3, attestation: m3, tvf: A3 } = e2, l6 = { method: mi(yi().protocol).publish, params: fe3({ topic: o4, message: a3, ttl: c6, prompt: h5, tag: u2, attestation: m3 }, A3), id: g3 };
    ae((t = l6.params) == null ? void 0 : t.prompt) && ((s3 = l6.params) == null || delete s3.prompt), ae((i4 = l6.params) == null ? void 0 : i4.tag) && ((r3 = l6.params) == null || delete r3.tag), this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: l6 });
    const y4 = await this.relayer.request(l6);
    return this.relayer.events.emit(T3.publish, e2), this.logger.debug("Successfully Published Payload"), y4;
  }
  removeRequestFromQueue(e2) {
    this.queue.delete(e2);
  }
  checkQueue() {
    this.queue.forEach(async (e2, t) => {
      const s3 = e2.attempt + 1;
      this.queue.set(t, Me3(fe3({}, e2), { attempt: s3 }));
      const { topic: i4, message: r3, opts: o4, attestation: a3 } = e2;
      this.logger.warn({}, `Publisher: queue->publishing: ${e2.opts.id}, tag: ${e2.opts.tag}, attempt: ${s3}`), await this.rpcPublish(Me3(fe3({}, e2), { topic: i4, message: r3, ttl: o4.ttl, prompt: o4.prompt, tag: o4.tag, id: o4.id, attestation: a3, tvf: o4.tvf })), this.logger.warn({}, `Publisher: queue->published: ${e2.opts.id}`);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(r.pulse, () => {
      if (this.needsTransportRestart) {
        this.needsTransportRestart = false, this.relayer.events.emit(T3.connection_stalled);
        return;
      }
      this.checkQueue();
    }), this.relayer.on(T3.message_ack, (e2) => {
      this.removeRequestFromQueue(e2.id.toString());
    });
  }
};
var An2 = Object.defineProperty;
var Nn2 = (n5, e2, t) => e2 in n5 ? An2(n5, e2, { enumerable: true, configurable: true, writable: true, value: t }) : n5[e2] = t;
var re2 = (n5, e2, t) => Nn2(n5, typeof e2 != "symbol" ? e2 + "" : e2, t);
var $n2 = class {
  constructor() {
    re2(this, "map", /* @__PURE__ */ new Map()), re2(this, "set", (e2, t) => {
      const s3 = this.get(e2);
      this.exists(e2, t) || this.map.set(e2, [...s3, t]);
    }), re2(this, "get", (e2) => this.map.get(e2) || []), re2(this, "exists", (e2, t) => this.get(e2).includes(t)), re2(this, "delete", (e2, t) => {
      if (typeof t > "u") {
        this.map.delete(e2);
        return;
      }
      if (!this.map.has(e2)) return;
      const s3 = this.get(e2);
      if (!this.exists(e2, t)) return;
      const i4 = s3.filter((r3) => r3 !== t);
      if (!i4.length) {
        this.map.delete(e2);
        return;
      }
      this.map.set(e2, i4);
    }), re2(this, "clear", () => {
      this.map.clear();
    });
  }
  get topics() {
    return Array.from(this.map.keys());
  }
};
var zn3 = Object.defineProperty;
var Ln3 = Object.defineProperties;
var kn3 = Object.getOwnPropertyDescriptors;
var vi = Object.getOwnPropertySymbols;
var Un3 = Object.prototype.hasOwnProperty;
var Fn3 = Object.prototype.propertyIsEnumerable;
var Ke3 = (n5, e2, t) => e2 in n5 ? zn3(n5, e2, { enumerable: true, configurable: true, writable: true, value: t }) : n5[e2] = t;
var de3 = (n5, e2) => {
  for (var t in e2 || (e2 = {})) Un3.call(e2, t) && Ke3(n5, t, e2[t]);
  if (vi) for (var t of vi(e2)) Fn3.call(e2, t) && Ke3(n5, t, e2[t]);
  return n5;
};
var Be2 = (n5, e2) => Ln3(n5, kn3(e2));
var D2 = (n5, e2, t) => Ke3(n5, typeof e2 != "symbol" ? e2 + "" : e2, t);
var fi2 = class extends P {
  constructor(e2, t) {
    super(e2, t), this.relayer = e2, this.logger = t, D2(this, "subscriptions", /* @__PURE__ */ new Map()), D2(this, "topicMap", new $n2()), D2(this, "events", new import_events7.EventEmitter()), D2(this, "name", $t2), D2(this, "version", zt3), D2(this, "pending", /* @__PURE__ */ new Map()), D2(this, "cached", []), D2(this, "initialized", false), D2(this, "pendingSubscriptionWatchLabel", "pending_sub_watch_label"), D2(this, "pollingInterval", 20), D2(this, "storagePrefix", B2), D2(this, "subscribeTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE)), D2(this, "initialSubscribeTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), D2(this, "clientId"), D2(this, "batchSubscribeTopicsLimit", 500), D2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), await this.restore()), this.initialized = true;
    }), D2(this, "subscribe", async (s3, i4) => {
      this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: s3, opts: i4 } });
      try {
        const r3 = yi(i4), o4 = { topic: s3, relay: r3, transportType: i4 == null ? void 0 : i4.transportType };
        this.pending.set(s3, o4);
        const a3 = await this.rpcSubscribe(s3, r3, i4);
        return typeof a3 == "string" && (this.onSubscribe(a3, o4), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: s3, opts: i4 } })), a3;
      } catch (r3) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(r3), r3;
      }
    }), D2(this, "unsubscribe", async (s3, i4) => {
      this.isInitialized(), typeof (i4 == null ? void 0 : i4.id) < "u" ? await this.unsubscribeById(s3, i4.id, i4) : await this.unsubscribeByTopic(s3, i4);
    }), D2(this, "isSubscribed", async (s3) => {
      if (this.topics.includes(s3)) return true;
      const i4 = `${this.pendingSubscriptionWatchLabel}_${s3}`;
      return await new Promise((r3, o4) => {
        const a3 = new import_time4.Watch();
        a3.start(i4);
        const c6 = setInterval(() => {
          (!this.pending.has(s3) && this.topics.includes(s3) || this.cached.some((h5) => h5.topic === s3)) && (clearInterval(c6), a3.stop(i4), r3(true)), a3.elapsed(i4) >= Lt3 && (clearInterval(c6), a3.stop(i4), o4(new Error("Subscription resolution timeout")));
        }, this.pollingInterval);
      }).catch(() => false);
    }), D2(this, "on", (s3, i4) => {
      this.events.on(s3, i4);
    }), D2(this, "once", (s3, i4) => {
      this.events.once(s3, i4);
    }), D2(this, "off", (s3, i4) => {
      this.events.off(s3, i4);
    }), D2(this, "removeListener", (s3, i4) => {
      this.events.removeListener(s3, i4);
    }), D2(this, "start", async () => {
      await this.onConnect();
    }), D2(this, "stop", async () => {
      await this.onDisconnect();
    }), D2(this, "restart", async () => {
      await this.restore(), await this.onRestart();
    }), D2(this, "checkPending", async () => {
      if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected)) return;
      const s3 = [];
      this.pending.forEach((i4) => {
        s3.push(i4);
      }), await this.batchSubscribe(s3);
    }), D2(this, "registerEventListeners", () => {
      this.relayer.core.heartbeat.on(r.pulse, async () => {
        await this.checkPending();
      }), this.events.on($.created, async (s3) => {
        const i4 = $.created;
        this.logger.info(`Emitting ${i4}`), this.logger.debug({ type: "event", event: i4, data: s3 }), await this.persist();
      }), this.events.on($.deleted, async (s3) => {
        const i4 = $.deleted;
        this.logger.info(`Emitting ${i4}`), this.logger.debug({ type: "event", event: i4, data: s3 }), await this.persist();
      });
    }), this.relayer = e2, this.logger = E2(t, this.name), this.clientId = "";
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  get hasAnyTopics() {
    return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;
  }
  hasSubscription(e2, t) {
    let s3 = false;
    try {
      s3 = this.getSubscription(e2).topic === t;
    } catch {
    }
    return s3;
  }
  reset() {
    this.cached = [], this.initialized = true;
  }
  onDisable() {
    this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e2, t) {
    const s3 = this.topicMap.get(e2);
    await Promise.all(s3.map(async (i4) => await this.unsubscribeById(e2, i4, t)));
  }
  async unsubscribeById(e2, t, s3) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e2, id: t, opts: s3 } });
    try {
      const i4 = yi(s3);
      await this.restartToComplete({ topic: e2, id: t, relay: i4 }), await this.rpcUnsubscribe(e2, t, i4);
      const r3 = de2("USER_DISCONNECTED", `${this.name}, ${e2}`);
      await this.onUnsubscribe(e2, t, r3), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e2, id: t, opts: s3 } });
    } catch (i4) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(i4), i4;
    }
  }
  async rpcSubscribe(e2, t, s3) {
    var i4;
    (!s3 || (s3 == null ? void 0 : s3.transportType) === Q3.relay) && await this.restartToComplete({ topic: e2, id: e2, relay: t });
    const r3 = { method: mi(t.protocol).subscribe, params: { topic: e2 } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: r3 });
    const o4 = (i4 = s3 == null ? void 0 : s3.internal) == null ? void 0 : i4.throwOnFailedPublish;
    try {
      const a3 = await this.getSubscriptionId(e2);
      if ((s3 == null ? void 0 : s3.transportType) === Q3.link_mode) return setTimeout(() => {
        (this.relayer.connected || this.relayer.connecting) && this.relayer.request(r3).catch((u2) => this.logger.warn(u2));
      }, (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), a3;
      const c6 = new Promise(async (u2) => {
        const g3 = (m3) => {
          m3.topic === e2 && (this.events.removeListener($.created, g3), u2(m3.id));
        };
        this.events.on($.created, g3);
        try {
          const m3 = await ao2(new Promise((A3, l6) => {
            this.relayer.request(r3).catch((y4) => {
              this.logger.warn(y4, y4 == null ? void 0 : y4.message), l6(y4);
            }).then(A3);
          }), this.initialSubscribeTimeout, `Subscribing to ${e2} failed, please try again`);
          this.events.removeListener($.created, g3), u2(m3);
        } catch {
        }
      }), h5 = await ao2(c6, this.subscribeTimeout, `Subscribing to ${e2} failed, please try again`);
      if (!h5 && o4) throw new Error(`Subscribing to ${e2} failed, please try again`);
      return h5 ? a3 : null;
    } catch (a3) {
      if (this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(T3.connection_stalled), o4) throw a3;
    }
    return null;
  }
  async rpcBatchSubscribe(e2) {
    if (!e2.length) return;
    const t = e2[0].relay, s3 = { method: mi(t.protocol).batchSubscribe, params: { topics: e2.map((i4) => i4.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s3 });
    try {
      await await ao2(new Promise((i4) => {
        this.relayer.request(s3).catch((r3) => this.logger.warn(r3)).then(i4);
      }), this.subscribeTimeout, "rpcBatchSubscribe failed, please try again");
    } catch {
      this.relayer.events.emit(T3.connection_stalled);
    }
  }
  async rpcBatchFetchMessages(e2) {
    if (!e2.length) return;
    const t = e2[0].relay, s3 = { method: mi(t.protocol).batchFetchMessages, params: { topics: e2.map((r3) => r3.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s3 });
    let i4;
    try {
      i4 = await await ao2(new Promise((r3, o4) => {
        this.relayer.request(s3).catch((a3) => {
          this.logger.warn(a3), o4(a3);
        }).then(r3);
      }), this.subscribeTimeout, "rpcBatchFetchMessages failed, please try again");
    } catch {
      this.relayer.events.emit(T3.connection_stalled);
    }
    return i4;
  }
  rpcUnsubscribe(e2, t, s3) {
    const i4 = { method: mi(s3.protocol).unsubscribe, params: { topic: e2, id: t } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i4 }), this.relayer.request(i4);
  }
  onSubscribe(e2, t) {
    this.setSubscription(e2, Be2(de3({}, t), { id: e2 })), this.pending.delete(t.topic);
  }
  onBatchSubscribe(e2) {
    e2.length && e2.forEach((t) => {
      this.setSubscription(t.id, de3({}, t)), this.pending.delete(t.topic);
    });
  }
  async onUnsubscribe(e2, t, s3) {
    this.events.removeAllListeners(t), this.hasSubscription(t, e2) && this.deleteSubscription(t, s3), await this.relayer.messages.del(e2);
  }
  async setRelayerSubscriptions(e2) {
    await this.relayer.core.storage.setItem(this.storageKey, e2);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e2, t) {
    this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e2, subscription: t }), this.addSubscription(e2, t);
  }
  addSubscription(e2, t) {
    this.subscriptions.set(e2, de3({}, t)), this.topicMap.set(t.topic, e2), this.events.emit($.created, t);
  }
  getSubscription(e2) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e2 });
    const t = this.subscriptions.get(e2);
    if (!t) {
      const { message: s3 } = te2("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw new Error(s3);
    }
    return t;
  }
  deleteSubscription(e2, t) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e2, reason: t });
    const s3 = this.getSubscription(e2);
    this.subscriptions.delete(e2), this.topicMap.delete(s3.topic, e2), this.events.emit($.deleted, Be2(de3({}, s3), { reason: t }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit($.sync);
  }
  async onRestart() {
    if (this.cached.length) {
      const e2 = [...this.cached], t = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let s3 = 0; s3 < t; s3++) {
        const i4 = e2.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchSubscribe(i4);
      }
    }
    this.events.emit($.resubscribed);
  }
  async restore() {
    try {
      const e2 = await this.getRelayerSubscriptions();
      if (typeof e2 > "u" || !e2.length) return;
      if (this.subscriptions.size) {
        const { message: t } = te2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e2);
    }
  }
  async batchSubscribe(e2) {
    e2.length && (await this.rpcBatchSubscribe(e2), this.onBatchSubscribe(await Promise.all(e2.map(async (t) => Be2(de3({}, t), { id: await this.getSubscriptionId(t.topic) })))));
  }
  async batchFetchMessages(e2) {
    if (!e2.length) return;
    this.logger.trace(`Fetching batch messages for ${e2.length} subscriptions`);
    const t = await this.rpcBatchFetchMessages(e2);
    t && t.messages && (await vo2((0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t.messages));
  }
  async onConnect() {
    await this.restart(), this.reset();
  }
  onDisconnect() {
    this.onDisable();
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
  async restartToComplete(e2) {
    !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e2), await this.relayer.transportOpen());
  }
  async getClientId() {
    return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;
  }
  async getSubscriptionId(e2) {
    return si(e2 + await this.getClientId());
  }
};
var Mn3 = Object.defineProperty;
var _i = Object.getOwnPropertySymbols;
var Kn3 = Object.prototype.hasOwnProperty;
var Bn3 = Object.prototype.propertyIsEnumerable;
var je3 = (n5, e2, t) => e2 in n5 ? Mn3(n5, e2, { enumerable: true, configurable: true, writable: true, value: t }) : n5[e2] = t;
var Ei2 = (n5, e2) => {
  for (var t in e2 || (e2 = {})) Kn3.call(e2, t) && je3(n5, t, e2[t]);
  if (_i) for (var t of _i(e2)) Bn3.call(e2, t) && je3(n5, t, e2[t]);
  return n5;
};
var p3 = (n5, e2, t) => je3(n5, typeof e2 != "symbol" ? e2 + "" : e2, t);
var wi2 = class extends d2 {
  constructor(e2) {
    super(e2), p3(this, "protocol", "wc"), p3(this, "version", 2), p3(this, "core"), p3(this, "logger"), p3(this, "events", new import_events7.EventEmitter()), p3(this, "provider"), p3(this, "messages"), p3(this, "subscriber"), p3(this, "publisher"), p3(this, "name", Rt3), p3(this, "transportExplicitlyClosed", false), p3(this, "initialized", false), p3(this, "connectionAttemptInProgress", false), p3(this, "relayUrl"), p3(this, "projectId"), p3(this, "packageName"), p3(this, "bundleId"), p3(this, "hasExperiencedNetworkDisruption", false), p3(this, "pingTimeout"), p3(this, "heartBeatTimeout", (0, import_time4.toMiliseconds)(import_time4.THIRTY_SECONDS + import_time4.FIVE_SECONDS)), p3(this, "reconnectTimeout"), p3(this, "connectPromise"), p3(this, "reconnectInProgress", false), p3(this, "requestsInFlight", []), p3(this, "connectTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), p3(this, "request", async (t) => {
      var s3, i4;
      this.logger.debug("Publishing Request Payload");
      const r3 = t.id || getBigIntRpcId().toString();
      await this.toEstablishConnection();
      try {
        this.logger.trace({ id: r3, method: t.method, topic: (s3 = t.params) == null ? void 0 : s3.topic }, "relayer.request - publishing...");
        const o4 = `${r3}:${((i4 = t.params) == null ? void 0 : i4.tag) || ""}`;
        this.requestsInFlight.push(o4);
        const a3 = await this.provider.request(t);
        return this.requestsInFlight = this.requestsInFlight.filter((c6) => c6 !== o4), a3;
      } catch (o4) {
        throw this.logger.debug(`Failed to Publish Request: ${r3}`), o4;
      }
    }), p3(this, "resetPingTimeout", () => {
      if (et()) try {
        clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {
          var t, s3, i4;
          this.logger.debug({}, "pingTimeout: Connection stalled, terminating..."), (i4 = (s3 = (t = this.provider) == null ? void 0 : t.connection) == null ? void 0 : s3.socket) == null || i4.terminate();
        }, this.heartBeatTimeout);
      } catch (t) {
        this.logger.warn(t, t == null ? void 0 : t.message);
      }
    }), p3(this, "onPayloadHandler", (t) => {
      this.onProviderPayload(t), this.resetPingTimeout();
    }), p3(this, "onConnectHandler", () => {
      this.logger.warn({}, "Relayer connected 🛜"), this.startPingTimeout(), this.events.emit(T3.connect);
    }), p3(this, "onDisconnectHandler", () => {
      this.logger.warn({}, "Relayer disconnected 🛑"), this.requestsInFlight = [], this.onProviderDisconnect();
    }), p3(this, "onProviderErrorHandler", (t) => {
      this.logger.fatal(`Fatal socket error: ${t.message}`), this.events.emit(T3.error, t), this.logger.fatal("Fatal socket error received, closing transport"), this.transportClose();
    }), p3(this, "registerProviderListeners", () => {
      this.provider.on(L2.payload, this.onPayloadHandler), this.provider.on(L2.connect, this.onConnectHandler), this.provider.on(L2.disconnect, this.onDisconnectHandler), this.provider.on(L2.error, this.onProviderErrorHandler);
    }), this.core = e2.core, this.logger = typeof e2.logger < "u" && typeof e2.logger != "string" ? E2(e2.logger, this.name) : (0, import_pino2.default)(k2({ level: e2.logger || St3 })), this.messages = new Di2(this.logger, e2.core), this.subscriber = new fi2(this, this.logger), this.publisher = new On3(this, this.logger), this.relayUrl = (e2 == null ? void 0 : e2.relayUrl) || $e3, this.projectId = e2.projectId, Wr2() ? this.packageName = Jr2() : zr2() && (this.bundleId = Jr2()), this.provider = {};
  }
  async init() {
    if (this.logger.trace("Initialized"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = true, this.subscriber.hasAnyTopics) try {
      await this.transportOpen();
    } catch (e2) {
      this.logger.warn(e2, e2 == null ? void 0 : e2.message);
    }
  }
  get context() {
    return y2(this.logger);
  }
  get connected() {
    var e2, t, s3;
    return ((s3 = (t = (e2 = this.provider) == null ? void 0 : e2.connection) == null ? void 0 : t.socket) == null ? void 0 : s3.readyState) === 1 || false;
  }
  get connecting() {
    var e2, t, s3;
    return ((s3 = (t = (e2 = this.provider) == null ? void 0 : e2.connection) == null ? void 0 : t.socket) == null ? void 0 : s3.readyState) === 0 || this.connectPromise !== void 0 || false;
  }
  async publish(e2, t, s3) {
    this.isInitialized(), await this.publisher.publish(e2, t, s3), await this.recordMessageEvent({ topic: e2, message: t, publishedAt: Date.now(), transportType: Q3.relay });
  }
  async subscribe(e2, t) {
    var s3, i4, r3;
    this.isInitialized(), (!(t != null && t.transportType) || (t == null ? void 0 : t.transportType) === "relay") && await this.toEstablishConnection();
    const o4 = typeof ((s3 = t == null ? void 0 : t.internal) == null ? void 0 : s3.throwOnFailedPublish) > "u" ? true : (i4 = t == null ? void 0 : t.internal) == null ? void 0 : i4.throwOnFailedPublish;
    let a3 = ((r3 = this.subscriber.topicMap.get(e2)) == null ? void 0 : r3[0]) || "", c6;
    const h5 = (u2) => {
      u2.topic === e2 && (this.subscriber.off($.created, h5), c6());
    };
    return await Promise.all([new Promise((u2) => {
      c6 = u2, this.subscriber.on($.created, h5);
    }), new Promise(async (u2, g3) => {
      a3 = await this.subscriber.subscribe(e2, Ei2({ internal: { throwOnFailedPublish: o4 } }, t)).catch((m3) => {
        o4 && g3(m3);
      }) || a3, u2();
    })]), a3;
  }
  async unsubscribe(e2, t) {
    this.isInitialized(), await this.subscriber.unsubscribe(e2, t);
  }
  on(e2, t) {
    this.events.on(e2, t);
  }
  once(e2, t) {
    this.events.once(e2, t);
  }
  off(e2, t) {
    this.events.off(e2, t);
  }
  removeListener(e2, t) {
    this.events.removeListener(e2, t);
  }
  async transportDisconnect() {
    this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await ao2(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();
  }
  async transportClose() {
    this.transportExplicitlyClosed = true, await this.transportDisconnect();
  }
  async transportOpen(e2) {
    if (!this.subscriber.hasAnyTopics) {
      this.logger.warn("Starting WS connection skipped because the client has no topics to work with.");
      return;
    }
    if (this.connectPromise ? (this.logger.debug({}, "Waiting for existing connection attempt to resolve..."), await this.connectPromise, this.logger.debug({}, "Existing connection attempt resolved")) : (this.connectPromise = new Promise(async (t, s3) => {
      await this.connect(e2).then(t).catch(s3).finally(() => {
        this.connectPromise = void 0;
      });
    }), await this.connectPromise), !this.connected) throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);
  }
  async restartTransport(e2) {
    this.logger.debug({}, "Restarting transport..."), !this.connectionAttemptInProgress && (this.relayUrl = e2 || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
  }
  async confirmOnlineStateOrThrow() {
    if (!await Yi()) throw new Error("No internet connection detected. Please restart your network and try again.");
  }
  async handleBatchMessageEvents(e2) {
    if ((e2 == null ? void 0 : e2.length) === 0) {
      this.logger.trace("Batch message events is empty. Ignoring...");
      return;
    }
    const t = e2.sort((s3, i4) => s3.publishedAt - i4.publishedAt);
    this.logger.debug(`Batch of ${t.length} message events sorted`);
    for (const s3 of t) try {
      await this.onMessageEvent(s3);
    } catch (i4) {
      this.logger.warn(i4, "Error while processing batch message event: " + (i4 == null ? void 0 : i4.message));
    }
    this.logger.trace(`Batch of ${t.length} message events processed`);
  }
  async onLinkMessageEvent(e2, t) {
    const { topic: s3 } = e2;
    if (!t.sessionExists) {
      const i4 = ho2(import_time4.FIVE_MINUTES), r3 = { topic: s3, expiry: i4, relay: { protocol: "irn" }, active: false };
      await this.core.pairing.pairings.set(s3, r3);
    }
    this.events.emit(T3.message, e2), await this.recordMessageEvent(e2);
  }
  async connect(e2) {
    await this.confirmOnlineStateOrThrow(), e2 && e2 !== this.relayUrl && (this.relayUrl = e2, await this.transportDisconnect()), this.connectionAttemptInProgress = true, this.transportExplicitlyClosed = false;
    let t = 1;
    for (; t < 6; ) {
      try {
        if (this.transportExplicitlyClosed) break;
        this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t}...`), await this.createProvider(), await new Promise(async (s3, i4) => {
          const r3 = () => {
            i4(new Error("Connection interrupted while trying to subscribe"));
          };
          this.provider.once(L2.disconnect, r3), await ao2(new Promise((o4, a3) => {
            this.provider.connect().then(o4).catch(a3);
          }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((o4) => {
            i4(o4);
          }).finally(() => {
            this.provider.off(L2.disconnect, r3), clearTimeout(this.reconnectTimeout);
          }), await new Promise(async (o4, a3) => {
            const c6 = () => {
              a3(new Error("Connection interrupted while trying to subscribe"));
            };
            this.provider.once(L2.disconnect, c6), await this.subscriber.start().then(o4).catch(a3).finally(() => {
              this.provider.off(L2.disconnect, c6);
            });
          }), this.hasExperiencedNetworkDisruption = false, s3();
        });
      } catch (s3) {
        await this.subscriber.stop();
        const i4 = s3;
        this.logger.warn({}, i4.message), this.hasExperiencedNetworkDisruption = true;
      } finally {
        this.connectionAttemptInProgress = false;
      }
      if (this.connected) {
        this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t}`);
        break;
      }
      await new Promise((s3) => setTimeout(s3, (0, import_time4.toMiliseconds)(t * 1))), t++;
    }
  }
  startPingTimeout() {
    var e2, t, s3, i4, r3;
    if (et()) try {
      (t = (e2 = this.provider) == null ? void 0 : e2.connection) != null && t.socket && ((r3 = (i4 = (s3 = this.provider) == null ? void 0 : s3.connection) == null ? void 0 : i4.socket) == null || r3.on("ping", () => {
        this.resetPingTimeout();
      })), this.resetPingTimeout();
    } catch (o4) {
      this.logger.warn(o4, o4 == null ? void 0 : o4.message);
    }
  }
  async createProvider() {
    this.provider.connection && this.unregisterProviderListeners();
    const e2 = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new o3(new f4(Zr2({ sdkVersion: me3, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e2, useOnCloseEvent: true, bundleId: this.bundleId, packageName: this.packageName }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e2) {
    const { topic: t, message: s3 } = e2;
    await this.messages.set(t, s3);
  }
  async shouldIgnoreMessageEvent(e2) {
    const { topic: t, message: s3 } = e2;
    if (!s3 || s3.length === 0) return this.logger.warn(`Ignoring invalid/empty message: ${s3}`), true;
    if (!await this.subscriber.isSubscribed(t)) return this.logger.warn(`Ignoring message for non-subscribed topic ${t}`), true;
    const i4 = this.messages.has(t, s3);
    return i4 && this.logger.warn(`Ignoring duplicate message: ${s3}`), i4;
  }
  async onProviderPayload(e2) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e2 }), isJsonRpcRequest(e2)) {
      if (!e2.method.endsWith(xt3)) return;
      const t = e2.params, { topic: s3, message: i4, publishedAt: r3, attestation: o4 } = t.data, a3 = { topic: s3, message: i4, publishedAt: r3, transportType: Q3.relay, attestation: o4 };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(Ei2({ type: "event", event: t.id }, a3)), this.events.emit(t.id, a3), await this.acknowledgePayload(e2), await this.onMessageEvent(a3);
    } else isJsonRpcResponse(e2) && this.events.emit(T3.message_ack, e2);
  }
  async onMessageEvent(e2) {
    await this.shouldIgnoreMessageEvent(e2) || (this.events.emit(T3.message, e2), await this.recordMessageEvent(e2));
  }
  async acknowledgePayload(e2) {
    const t = formatJsonRpcResult(e2.id, true);
    await this.provider.connection.send(t);
  }
  unregisterProviderListeners() {
    this.provider.off(L2.payload, this.onPayloadHandler), this.provider.off(L2.connect, this.onConnectHandler), this.provider.off(L2.disconnect, this.onDisconnectHandler), this.provider.off(L2.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);
  }
  async registerEventListeners() {
    let e2 = await Yi();
    Xi(async (t) => {
      e2 !== t && (e2 = t, t ? await this.transportOpen().catch((s3) => this.logger.error(s3, s3 == null ? void 0 : s3.message)) : (this.hasExperiencedNetworkDisruption = true, await this.transportDisconnect(), this.transportExplicitlyClosed = false));
    });
  }
  async onProviderDisconnect() {
    clearTimeout(this.pingTimeout), this.events.emit(T3.disconnect), this.connectionAttemptInProgress = false, !this.reconnectInProgress && (this.reconnectInProgress = true, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async () => {
      await this.transportOpen().catch((e2) => this.logger.error(e2, e2 == null ? void 0 : e2.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = false;
    }, (0, import_time4.toMiliseconds)(Ot3)))));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
  async toEstablishConnection() {
    await this.confirmOnlineStateOrThrow(), !this.connected && await this.connect();
  }
};
var jn3 = Object.defineProperty;
var Ii = Object.getOwnPropertySymbols;
var Vn3 = Object.prototype.hasOwnProperty;
var qn3 = Object.prototype.propertyIsEnumerable;
var Ve3 = (n5, e2, t) => e2 in n5 ? jn3(n5, e2, { enumerable: true, configurable: true, writable: true, value: t }) : n5[e2] = t;
var Ti2 = (n5, e2) => {
  for (var t in e2 || (e2 = {})) Vn3.call(e2, t) && Ve3(n5, t, e2[t]);
  if (Ii) for (var t of Ii(e2)) qn3.call(e2, t) && Ve3(n5, t, e2[t]);
  return n5;
};
var z4 = (n5, e2, t) => Ve3(n5, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Ci2 = class extends f2 {
  constructor(e2, t, s3, i4 = B2, r3 = void 0) {
    super(e2, t, s3, i4), this.core = e2, this.logger = t, this.name = s3, z4(this, "map", /* @__PURE__ */ new Map()), z4(this, "version", At2), z4(this, "cached", []), z4(this, "initialized", false), z4(this, "getKey"), z4(this, "storagePrefix", B2), z4(this, "recentlyDeleted", []), z4(this, "recentlyDeletedLimit", 200), z4(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((o4) => {
        this.getKey && o4 !== null && !ae(o4) ? this.map.set(this.getKey(o4), o4) : Pi2(o4) ? this.map.set(o4.id, o4) : Li(o4) && this.map.set(o4.topic, o4);
      }), this.cached = [], this.initialized = true);
    }), z4(this, "set", async (o4, a3) => {
      this.isInitialized(), this.map.has(o4) ? await this.update(o4, a3) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: o4, value: a3 }), this.map.set(o4, a3), await this.persist());
    }), z4(this, "get", (o4) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: o4 }), this.getData(o4))), z4(this, "getAll", (o4) => (this.isInitialized(), o4 ? this.values.filter((a3) => Object.keys(o4).every((c6) => (0, import_lodash.default)(a3[c6], o4[c6]))) : this.values)), z4(this, "update", async (o4, a3) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: o4, update: a3 });
      const c6 = Ti2(Ti2({}, this.getData(o4)), a3);
      this.map.set(o4, c6), await this.persist();
    }), z4(this, "delete", async (o4, a3) => {
      this.isInitialized(), this.map.has(o4) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: o4, reason: a3 }), this.map.delete(o4), this.addToRecentlyDeleted(o4), await this.persist());
    }), this.logger = E2(t, this.name), this.storagePrefix = i4, this.getKey = r3;
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  addToRecentlyDeleted(e2) {
    this.recentlyDeleted.push(e2), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
  }
  async setDataStore(e2) {
    await this.core.storage.setItem(this.storageKey, e2);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e2) {
    const t = this.map.get(e2);
    if (!t) {
      if (this.recentlyDeleted.includes(e2)) {
        const { message: i4 } = te2("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e2}`);
        throw this.logger.error(i4), new Error(i4);
      }
      const { message: s3 } = te2("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw this.logger.error(s3), new Error(s3);
    }
    return t;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e2 = await this.getDataStore();
      if (typeof e2 > "u" || !e2.length) return;
      if (this.map.size) {
        const { message: t } = te2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e2);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Gn3 = Object.defineProperty;
var Hn3 = (n5, e2, t) => e2 in n5 ? Gn3(n5, e2, { enumerable: true, configurable: true, writable: true, value: t }) : n5[e2] = t;
var d4 = (n5, e2, t) => Hn3(n5, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Pi3 = class {
  constructor(e2, t) {
    this.core = e2, this.logger = t, d4(this, "name", kt3), d4(this, "version", Ut3), d4(this, "events", new import_events7.default()), d4(this, "pairings"), d4(this, "initialized", false), d4(this, "storagePrefix", B2), d4(this, "ignoredPayloadTypes", [Ie2]), d4(this, "registeredMethods", []), d4(this, "init", async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = true, this.logger.trace("Initialized"));
    }), d4(this, "register", ({ methods: s3 }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...s3])];
    }), d4(this, "create", async (s3) => {
      this.isInitialized();
      const i4 = ni(), r3 = await this.core.crypto.setSymKey(i4), o4 = ho2(import_time4.FIVE_MINUTES), a3 = { protocol: Pt3 }, c6 = { topic: r3, expiry: o4, relay: a3, active: false, methods: s3 == null ? void 0 : s3.methods }, h5 = wi({ protocol: this.core.protocol, version: this.core.version, topic: r3, symKey: i4, relay: a3, expiryTimestamp: o4, methods: s3 == null ? void 0 : s3.methods });
      return this.events.emit(se2.create, c6), this.core.expirer.set(r3, o4), await this.pairings.set(r3, c6), await this.core.relayer.subscribe(r3, { transportType: s3 == null ? void 0 : s3.transportType }), { topic: r3, uri: h5 };
    }), d4(this, "pair", async (s3) => {
      this.isInitialized();
      const i4 = this.core.eventClient.createEvent({ properties: { topic: s3 == null ? void 0 : s3.uri, trace: [q2.pairing_started] } });
      this.isValidPair(s3, i4);
      const { topic: r3, symKey: o4, relay: a3, expiryTimestamp: c6, methods: h5 } = bi(s3.uri);
      i4.props.properties.topic = r3, i4.addTrace(q2.pairing_uri_validation_success), i4.addTrace(q2.pairing_uri_not_expired);
      let u2;
      if (this.pairings.keys.includes(r3)) {
        if (u2 = this.pairings.get(r3), i4.addTrace(q2.existing_pairing), u2.active) throw i4.setError(J4.active_pairing_already_exists), new Error(`Pairing already exists: ${r3}. Please try again with a new connection URI.`);
        i4.addTrace(q2.pairing_not_expired);
      }
      const g3 = c6 || ho2(import_time4.FIVE_MINUTES), m3 = { topic: r3, relay: a3, expiry: g3, active: false, methods: h5 };
      this.core.expirer.set(r3, g3), await this.pairings.set(r3, m3), i4.addTrace(q2.store_new_pairing), s3.activatePairing && await this.activate({ topic: r3 }), this.events.emit(se2.create, m3), i4.addTrace(q2.emit_inactive_pairing), this.core.crypto.keychain.has(r3) || await this.core.crypto.setSymKey(o4, r3), i4.addTrace(q2.subscribing_pairing_topic);
      try {
        await this.core.relayer.confirmOnlineStateOrThrow();
      } catch {
        i4.setError(J4.no_internet_connection);
      }
      try {
        await this.core.relayer.subscribe(r3, { relay: a3 });
      } catch (A3) {
        throw i4.setError(J4.subscribe_pairing_topic_failure), A3;
      }
      return i4.addTrace(q2.subscribe_pairing_topic_success), m3;
    }), d4(this, "activate", async ({ topic: s3 }) => {
      this.isInitialized();
      const i4 = ho2(import_time4.FIVE_MINUTES);
      this.core.expirer.set(s3, i4), await this.pairings.update(s3, { active: true, expiry: i4 });
    }), d4(this, "ping", async (s3) => {
      this.isInitialized(), await this.isValidPing(s3), this.logger.warn("ping() is deprecated and will be removed in the next major release.");
      const { topic: i4 } = s3;
      if (this.pairings.keys.includes(i4)) {
        const r3 = await this.sendRequest(i4, "wc_pairingPing", {}), { done: o4, resolve: a3, reject: c6 } = co2();
        this.events.once(go2("pairing_ping", r3), ({ error: h5 }) => {
          h5 ? c6(h5) : a3();
        }), await o4();
      }
    }), d4(this, "updateExpiry", async ({ topic: s3, expiry: i4 }) => {
      this.isInitialized(), await this.pairings.update(s3, { expiry: i4 });
    }), d4(this, "updateMetadata", async ({ topic: s3, metadata: i4 }) => {
      this.isInitialized(), await this.pairings.update(s3, { peerMetadata: i4 });
    }), d4(this, "getPairings", () => (this.isInitialized(), this.pairings.values)), d4(this, "disconnect", async (s3) => {
      this.isInitialized(), await this.isValidDisconnect(s3);
      const { topic: i4 } = s3;
      this.pairings.keys.includes(i4) && (await this.sendRequest(i4, "wc_pairingDelete", de2("USER_DISCONNECTED")), await this.deletePairing(i4));
    }), d4(this, "formatUriFromPairing", (s3) => {
      this.isInitialized();
      const { topic: i4, relay: r3, expiry: o4, methods: a3 } = s3, c6 = this.core.crypto.keychain.get(i4);
      return wi({ protocol: this.core.protocol, version: this.core.version, topic: i4, symKey: c6, relay: r3, expiryTimestamp: o4, methods: a3 });
    }), d4(this, "sendRequest", async (s3, i4, r3) => {
      const o4 = formatJsonRpcRequest(i4, r3), a3 = await this.core.crypto.encode(s3, o4), c6 = ie2[i4].req;
      return this.core.history.set(s3, o4), this.core.relayer.publish(s3, a3, c6), o4.id;
    }), d4(this, "sendResult", async (s3, i4, r3) => {
      const o4 = formatJsonRpcResult(s3, r3), a3 = await this.core.crypto.encode(i4, o4), c6 = (await this.core.history.get(i4, s3)).request.method, h5 = ie2[c6].res;
      await this.core.relayer.publish(i4, a3, h5), await this.core.history.resolve(o4);
    }), d4(this, "sendError", async (s3, i4, r3) => {
      const o4 = formatJsonRpcError(s3, r3), a3 = await this.core.crypto.encode(i4, o4), c6 = (await this.core.history.get(i4, s3)).request.method, h5 = ie2[c6] ? ie2[c6].res : ie2.unregistered_method.res;
      await this.core.relayer.publish(i4, a3, h5), await this.core.history.resolve(o4);
    }), d4(this, "deletePairing", async (s3, i4) => {
      await this.core.relayer.unsubscribe(s3), await Promise.all([this.pairings.delete(s3, de2("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(s3), i4 ? Promise.resolve() : this.core.expirer.del(s3)]);
    }), d4(this, "cleanup", async () => {
      const s3 = this.pairings.getAll().filter((i4) => po2(i4.expiry));
      await Promise.all(s3.map((i4) => this.deletePairing(i4.topic)));
    }), d4(this, "onRelayEventRequest", (s3) => {
      const { topic: i4, payload: r3 } = s3;
      switch (r3.method) {
        case "wc_pairingPing":
          return this.onPairingPingRequest(i4, r3);
        case "wc_pairingDelete":
          return this.onPairingDeleteRequest(i4, r3);
        default:
          return this.onUnknownRpcMethodRequest(i4, r3);
      }
    }), d4(this, "onRelayEventResponse", async (s3) => {
      const { topic: i4, payload: r3 } = s3, o4 = (await this.core.history.get(i4, r3.id)).request.method;
      switch (o4) {
        case "wc_pairingPing":
          return this.onPairingPingResponse(i4, r3);
        default:
          return this.onUnknownRpcMethodResponse(o4);
      }
    }), d4(this, "onPairingPingRequest", async (s3, i4) => {
      const { id: r3 } = i4;
      try {
        this.isValidPing({ topic: s3 }), await this.sendResult(r3, s3, true), this.events.emit(se2.ping, { id: r3, topic: s3 });
      } catch (o4) {
        await this.sendError(r3, s3, o4), this.logger.error(o4);
      }
    }), d4(this, "onPairingPingResponse", (s3, i4) => {
      const { id: r3 } = i4;
      setTimeout(() => {
        isJsonRpcResult(i4) ? this.events.emit(go2("pairing_ping", r3), {}) : isJsonRpcError(i4) && this.events.emit(go2("pairing_ping", r3), { error: i4.error });
      }, 500);
    }), d4(this, "onPairingDeleteRequest", async (s3, i4) => {
      const { id: r3 } = i4;
      try {
        this.isValidDisconnect({ topic: s3 }), await this.deletePairing(s3), this.events.emit(se2.delete, { id: r3, topic: s3 });
      } catch (o4) {
        await this.sendError(r3, s3, o4), this.logger.error(o4);
      }
    }), d4(this, "onUnknownRpcMethodRequest", async (s3, i4) => {
      const { id: r3, method: o4 } = i4;
      try {
        if (this.registeredMethods.includes(o4)) return;
        const a3 = de2("WC_METHOD_UNSUPPORTED", o4);
        await this.sendError(r3, s3, a3), this.logger.error(a3);
      } catch (a3) {
        await this.sendError(r3, s3, a3), this.logger.error(a3);
      }
    }), d4(this, "onUnknownRpcMethodResponse", (s3) => {
      this.registeredMethods.includes(s3) || this.logger.error(de2("WC_METHOD_UNSUPPORTED", s3));
    }), d4(this, "isValidPair", (s3, i4) => {
      var r3;
      if (!Di(s3)) {
        const { message: a3 } = te2("MISSING_OR_INVALID", `pair() params: ${s3}`);
        throw i4.setError(J4.malformed_pairing_uri), new Error(a3);
      }
      if (!Ri(s3.uri)) {
        const { message: a3 } = te2("MISSING_OR_INVALID", `pair() uri: ${s3.uri}`);
        throw i4.setError(J4.malformed_pairing_uri), new Error(a3);
      }
      const o4 = bi(s3 == null ? void 0 : s3.uri);
      if (!((r3 = o4 == null ? void 0 : o4.relay) != null && r3.protocol)) {
        const { message: a3 } = te2("MISSING_OR_INVALID", "pair() uri#relay-protocol");
        throw i4.setError(J4.malformed_pairing_uri), new Error(a3);
      }
      if (!(o4 != null && o4.symKey)) {
        const { message: a3 } = te2("MISSING_OR_INVALID", "pair() uri#symKey");
        throw i4.setError(J4.malformed_pairing_uri), new Error(a3);
      }
      if (o4 != null && o4.expiryTimestamp && (0, import_time4.toMiliseconds)(o4 == null ? void 0 : o4.expiryTimestamp) < Date.now()) {
        i4.setError(J4.pairing_expired);
        const { message: a3 } = te2("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
        throw new Error(a3);
      }
    }), d4(this, "isValidPing", async (s3) => {
      if (!Di(s3)) {
        const { message: r3 } = te2("MISSING_OR_INVALID", `ping() params: ${s3}`);
        throw new Error(r3);
      }
      const { topic: i4 } = s3;
      await this.isValidPairingTopic(i4);
    }), d4(this, "isValidDisconnect", async (s3) => {
      if (!Di(s3)) {
        const { message: r3 } = te2("MISSING_OR_INVALID", `disconnect() params: ${s3}`);
        throw new Error(r3);
      }
      const { topic: i4 } = s3;
      await this.isValidPairingTopic(i4);
    }), d4(this, "isValidPairingTopic", async (s3) => {
      if (!q(s3, false)) {
        const { message: i4 } = te2("MISSING_OR_INVALID", `pairing topic should be a string: ${s3}`);
        throw new Error(i4);
      }
      if (!this.pairings.keys.includes(s3)) {
        const { message: i4 } = te2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${s3}`);
        throw new Error(i4);
      }
      if (po2(this.pairings.get(s3).expiry)) {
        await this.deletePairing(s3);
        const { message: i4 } = te2("EXPIRED", `pairing topic: ${s3}`);
        throw new Error(i4);
      }
    }), this.core = e2, this.logger = E2(t, this.name), this.pairings = new Ci2(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return y2(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(T3.message, async (e2) => {
      const { topic: t, message: s3, transportType: i4 } = e2;
      if (!this.pairings.keys.includes(t) || i4 === Q3.link_mode || this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(s3))) return;
      const r3 = await this.core.crypto.decode(t, s3);
      try {
        isJsonRpcRequest(r3) ? (this.core.history.set(t, r3), this.onRelayEventRequest({ topic: t, payload: r3 })) : isJsonRpcResponse(r3) && (await this.core.history.resolve(r3), await this.onRelayEventResponse({ topic: t, payload: r3 }), this.core.history.delete(t, r3.id));
      } catch (o4) {
        this.logger.error(o4);
      }
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on(M4.expired, async (e2) => {
      const { topic: t } = lo2(e2.target);
      t && this.pairings.keys.includes(t) && (await this.deletePairing(t, true), this.events.emit(se2.expire, { topic: t }));
    });
  }
};
var Yn3 = Object.defineProperty;
var Jn3 = (n5, e2, t) => e2 in n5 ? Yn3(n5, e2, { enumerable: true, configurable: true, writable: true, value: t }) : n5[e2] = t;
var S3 = (n5, e2, t) => Jn3(n5, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Si = class extends I2 {
  constructor(e2, t) {
    super(e2, t), this.core = e2, this.logger = t, S3(this, "records", /* @__PURE__ */ new Map()), S3(this, "events", new import_events7.EventEmitter()), S3(this, "name", Ft3), S3(this, "version", Mt2), S3(this, "cached", []), S3(this, "initialized", false), S3(this, "storagePrefix", B2), S3(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((s3) => this.records.set(s3.id, s3)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), S3(this, "set", (s3, i4, r3) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: s3, request: i4, chainId: r3 }), this.records.has(i4.id)) return;
      const o4 = { id: i4.id, topic: s3, request: { method: i4.method, params: i4.params || null }, chainId: r3, expiry: ho2(import_time4.THIRTY_DAYS) };
      this.records.set(o4.id, o4), this.persist(), this.events.emit(F2.created, o4);
    }), S3(this, "resolve", async (s3) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: s3 }), !this.records.has(s3.id)) return;
      const i4 = await this.getRecord(s3.id);
      typeof i4.response > "u" && (i4.response = isJsonRpcError(s3) ? { error: s3.error } : { result: s3.result }, this.records.set(i4.id, i4), this.persist(), this.events.emit(F2.updated, i4));
    }), S3(this, "get", async (s3, i4) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: s3, id: i4 }), await this.getRecord(i4))), S3(this, "delete", (s3, i4) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: i4 }), this.values.forEach((r3) => {
        if (r3.topic === s3) {
          if (typeof i4 < "u" && r3.id !== i4) return;
          this.records.delete(r3.id), this.events.emit(F2.deleted, r3);
        }
      }), this.persist();
    }), S3(this, "exists", async (s3, i4) => (this.isInitialized(), this.records.has(i4) ? (await this.getRecord(i4)).topic === s3 : false)), S3(this, "on", (s3, i4) => {
      this.events.on(s3, i4);
    }), S3(this, "once", (s3, i4) => {
      this.events.once(s3, i4);
    }), S3(this, "off", (s3, i4) => {
      this.events.off(s3, i4);
    }), S3(this, "removeListener", (s3, i4) => {
      this.events.removeListener(s3, i4);
    }), this.logger = E2(t, this.name);
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e2 = [];
    return this.values.forEach((t) => {
      if (typeof t.response < "u") return;
      const s3 = { topic: t.topic, request: formatJsonRpcRequest(t.request.method, t.request.params, t.id), chainId: t.chainId };
      return e2.push(s3);
    }), e2;
  }
  async setJsonRpcRecords(e2) {
    await this.core.storage.setItem(this.storageKey, e2);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e2) {
    this.isInitialized();
    const t = this.records.get(e2);
    if (!t) {
      const { message: s3 } = te2("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw new Error(s3);
    }
    return t;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(F2.sync);
  }
  async restore() {
    try {
      const e2 = await this.getJsonRpcRecords();
      if (typeof e2 > "u" || !e2.length) return;
      if (this.records.size) {
        const { message: t } = te2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e2);
    }
  }
  registerEventListeners() {
    this.events.on(F2.created, (e2) => {
      const t = F2.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e2 });
    }), this.events.on(F2.updated, (e2) => {
      const t = F2.updated;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e2 });
    }), this.events.on(F2.deleted, (e2) => {
      const t = F2.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e2 });
    }), this.core.heartbeat.on(r.pulse, () => {
      this.cleanup();
    });
  }
  cleanup() {
    try {
      this.isInitialized();
      let e2 = false;
      this.records.forEach((t) => {
        (0, import_time4.toMiliseconds)(t.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t.id}`), this.records.delete(t.id), this.events.emit(F2.deleted, t, false), e2 = true);
      }), e2 && this.persist();
    } catch (e2) {
      this.logger.warn(e2);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Xn3 = Object.defineProperty;
var Wn3 = (n5, e2, t) => e2 in n5 ? Xn3(n5, e2, { enumerable: true, configurable: true, writable: true, value: t }) : n5[e2] = t;
var x5 = (n5, e2, t) => Wn3(n5, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Ri2 = class extends S2 {
  constructor(e2, t) {
    super(e2, t), this.core = e2, this.logger = t, x5(this, "expirations", /* @__PURE__ */ new Map()), x5(this, "events", new import_events7.EventEmitter()), x5(this, "name", Kt2), x5(this, "version", Bt3), x5(this, "cached", []), x5(this, "initialized", false), x5(this, "storagePrefix", B2), x5(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((s3) => this.expirations.set(s3.target, s3)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), x5(this, "has", (s3) => {
      try {
        const i4 = this.formatTarget(s3);
        return typeof this.getExpiration(i4) < "u";
      } catch {
        return false;
      }
    }), x5(this, "set", (s3, i4) => {
      this.isInitialized();
      const r3 = this.formatTarget(s3), o4 = { target: r3, expiry: i4 };
      this.expirations.set(r3, o4), this.checkExpiry(r3, o4), this.events.emit(M4.created, { target: r3, expiration: o4 });
    }), x5(this, "get", (s3) => {
      this.isInitialized();
      const i4 = this.formatTarget(s3);
      return this.getExpiration(i4);
    }), x5(this, "del", (s3) => {
      if (this.isInitialized(), this.has(s3)) {
        const i4 = this.formatTarget(s3), r3 = this.getExpiration(i4);
        this.expirations.delete(i4), this.events.emit(M4.deleted, { target: i4, expiration: r3 });
      }
    }), x5(this, "on", (s3, i4) => {
      this.events.on(s3, i4);
    }), x5(this, "once", (s3, i4) => {
      this.events.once(s3, i4);
    }), x5(this, "off", (s3, i4) => {
      this.events.off(s3, i4);
    }), x5(this, "removeListener", (s3, i4) => {
      this.events.removeListener(s3, i4);
    }), this.logger = E2(t, this.name);
  }
  get context() {
    return y2(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e2) {
    if (typeof e2 == "string") return uo2(e2);
    if (typeof e2 == "number") return fo2(e2);
    const { message: t } = te2("UNKNOWN_TYPE", `Target type: ${typeof e2}`);
    throw new Error(t);
  }
  async setExpirations(e2) {
    await this.core.storage.setItem(this.storageKey, e2);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit(M4.sync);
  }
  async restore() {
    try {
      const e2 = await this.getExpirations();
      if (typeof e2 > "u" || !e2.length) return;
      if (this.expirations.size) {
        const { message: t } = te2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e2);
    }
  }
  getExpiration(e2) {
    const t = this.expirations.get(e2);
    if (!t) {
      const { message: s3 } = te2("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw this.logger.warn(s3), new Error(s3);
    }
    return t;
  }
  checkExpiry(e2, t) {
    const { expiry: s3 } = t;
    (0, import_time4.toMiliseconds)(s3) - Date.now() <= 0 && this.expire(e2, t);
  }
  expire(e2, t) {
    this.expirations.delete(e2), this.events.emit(M4.expired, { target: e2, expiration: t });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e2, t) => this.checkExpiry(t, e2));
  }
  registerEventListeners() {
    this.core.heartbeat.on(r.pulse, () => this.checkExpirations()), this.events.on(M4.created, (e2) => {
      const t = M4.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e2 }), this.persist();
    }), this.events.on(M4.expired, (e2) => {
      const t = M4.expired;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e2 }), this.persist();
    }), this.events.on(M4.deleted, (e2) => {
      const t = M4.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e2 }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Zn3 = Object.defineProperty;
var Qn3 = (n5, e2, t) => e2 in n5 ? Zn3(n5, e2, { enumerable: true, configurable: true, writable: true, value: t }) : n5[e2] = t;
var _3 = (n5, e2, t) => Qn3(n5, typeof e2 != "symbol" ? e2 + "" : e2, t);
var xi = class extends M {
  constructor(e2, t, s3) {
    super(e2, t, s3), this.core = e2, this.logger = t, this.store = s3, _3(this, "name", jt3), _3(this, "abortController"), _3(this, "isDevEnv"), _3(this, "verifyUrlV3", qt2), _3(this, "storagePrefix", B2), _3(this, "version", Oe3), _3(this, "publicKey"), _3(this, "fetchPromise"), _3(this, "init", async () => {
      var i4;
      this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0, import_time4.toMiliseconds)((i4 = this.publicKey) == null ? void 0 : i4.expiresAt) < Date.now() && (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
    }), _3(this, "register", async (i4) => {
      if (!Ae2() || this.isDevEnv) return;
      const r3 = window.location.origin, { id: o4, decryptedId: a3 } = i4, c6 = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${r3}&id=${o4}&decryptedId=${a3}`;
      try {
        const h5 = (0, import_window_getters2.getDocument)(), u2 = this.startAbortTimer(import_time4.ONE_SECOND * 5), g3 = await new Promise((m3, A3) => {
          const l6 = () => {
            window.removeEventListener("message", O4), h5.body.removeChild(y4), A3("attestation aborted");
          };
          this.abortController.signal.addEventListener("abort", l6);
          const y4 = h5.createElement("iframe");
          y4.src = c6, y4.style.display = "none", y4.addEventListener("error", l6, { signal: this.abortController.signal });
          const O4 = (w3) => {
            if (w3.data && typeof w3.data == "string") try {
              const v5 = JSON.parse(w3.data);
              if (v5.type === "verify_attestation") {
                if (sn(v5.attestation).payload.id !== o4) return;
                clearInterval(u2), h5.body.removeChild(y4), this.abortController.signal.removeEventListener("abort", l6), window.removeEventListener("message", O4), m3(v5.attestation === null ? "" : v5.attestation);
              }
            } catch (v5) {
              this.logger.warn(v5);
            }
          };
          h5.body.appendChild(y4), window.addEventListener("message", O4, { signal: this.abortController.signal });
        });
        return this.logger.debug("jwt attestation", g3), g3;
      } catch (h5) {
        this.logger.warn(h5);
      }
      return "";
    }), _3(this, "resolve", async (i4) => {
      if (this.isDevEnv) return "";
      const { attestationId: r3, hash: o4, encryptedId: a3 } = i4;
      if (r3 === "") {
        this.logger.debug("resolve: attestationId is empty, skipping");
        return;
      }
      if (r3) {
        if (sn(r3).payload.id !== a3) return;
        const h5 = await this.isValidJwtAttestation(r3);
        if (h5) {
          if (!h5.isVerified) {
            this.logger.warn("resolve: jwt attestation: origin url not verified");
            return;
          }
          return h5;
        }
      }
      if (!o4) return;
      const c6 = this.getVerifyUrl(i4 == null ? void 0 : i4.verifyUrl);
      return this.fetchAttestation(o4, c6);
    }), _3(this, "fetchAttestation", async (i4, r3) => {
      this.logger.debug(`resolving attestation: ${i4} from url: ${r3}`);
      const o4 = this.startAbortTimer(import_time4.ONE_SECOND * 5), a3 = await fetch(`${r3}/attestation/${i4}?v2Supported=true`, { signal: this.abortController.signal });
      return clearTimeout(o4), a3.status === 200 ? await a3.json() : void 0;
    }), _3(this, "getVerifyUrl", (i4) => {
      let r3 = i4 || le3;
      return Gt3.includes(r3) || (this.logger.info(`verify url: ${r3}, not included in trusted list, assigning default: ${le3}`), r3 = le3), r3;
    }), _3(this, "fetchPublicKey", async () => {
      try {
        this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
        const i4 = this.startAbortTimer(import_time4.FIVE_SECONDS), r3 = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
        return clearTimeout(i4), await r3.json();
      } catch (i4) {
        this.logger.warn(i4);
      }
    }), _3(this, "persistPublicKey", async (i4) => {
      this.logger.debug("persisting public key to local storage", i4), await this.store.setItem(this.storeKey, i4), this.publicKey = i4;
    }), _3(this, "removePublicKey", async () => {
      this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;
    }), _3(this, "isValidJwtAttestation", async (i4) => {
      const r3 = await this.getPublicKey();
      try {
        if (r3) return this.validateAttestation(i4, r3);
      } catch (a3) {
        this.logger.error(a3), this.logger.warn("error validating attestation");
      }
      const o4 = await this.fetchAndPersistPublicKey();
      try {
        if (o4) return this.validateAttestation(i4, o4);
      } catch (a3) {
        this.logger.error(a3), this.logger.warn("error validating attestation");
      }
    }), _3(this, "getPublicKey", async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), _3(this, "fetchAndPersistPublicKey", async () => {
      if (this.fetchPromise) return await this.fetchPromise, this.publicKey;
      this.fetchPromise = new Promise(async (r3) => {
        const o4 = await this.fetchPublicKey();
        o4 && (await this.persistPublicKey(o4), r3(o4));
      });
      const i4 = await this.fetchPromise;
      return this.fetchPromise = void 0, i4;
    }), _3(this, "validateAttestation", (i4, r3) => {
      const o4 = gi(i4, r3.publicKey), a3 = { hasExpired: (0, import_time4.toMiliseconds)(o4.exp) < Date.now(), payload: o4 };
      if (a3.hasExpired) throw this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired");
      return { origin: a3.payload.origin, isScam: a3.payload.isScam, isVerified: a3.payload.isVerified };
    }), this.logger = E2(t, this.name), this.abortController = new AbortController(), this.isDevEnv = Eo2(), this.init();
  }
  get storeKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
  }
  get context() {
    return y2(this.logger);
  }
  startAbortTimer(e2) {
    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), (0, import_time4.toMiliseconds)(e2));
  }
};
var eo2 = Object.defineProperty;
var to2 = (n5, e2, t) => e2 in n5 ? eo2(n5, e2, { enumerable: true, configurable: true, writable: true, value: t }) : n5[e2] = t;
var Oi = (n5, e2, t) => to2(n5, typeof e2 != "symbol" ? e2 + "" : e2, t);
var Ai = class extends O3 {
  constructor(e2, t) {
    super(e2, t), this.projectId = e2, this.logger = t, Oi(this, "context", Ht2), Oi(this, "registerDeviceToken", async (s3) => {
      const { clientId: i4, token: r3, notificationType: o4, enableEncrypted: a3 = false } = s3, c6 = `${Yt3}/${this.projectId}/clients`;
      await fetch(c6, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ client_id: i4, type: o4, token: r3, always_raw: a3 }) });
    }), this.logger = E2(t, this.context);
  }
};
var io2 = Object.defineProperty;
var Ni = Object.getOwnPropertySymbols;
var so2 = Object.prototype.hasOwnProperty;
var ro3 = Object.prototype.propertyIsEnumerable;
var qe3 = (n5, e2, t) => e2 in n5 ? io2(n5, e2, { enumerable: true, configurable: true, writable: true, value: t }) : n5[e2] = t;
var pe2 = (n5, e2) => {
  for (var t in e2 || (e2 = {})) so2.call(e2, t) && qe3(n5, t, e2[t]);
  if (Ni) for (var t of Ni(e2)) ro3.call(e2, t) && qe3(n5, t, e2[t]);
  return n5;
};
var E3 = (n5, e2, t) => qe3(n5, typeof e2 != "symbol" ? e2 + "" : e2, t);
var $i2 = class extends R {
  constructor(e2, t, s3 = true) {
    super(e2, t, s3), this.core = e2, this.logger = t, E3(this, "context", Xt2), E3(this, "storagePrefix", B2), E3(this, "storageVersion", Jt3), E3(this, "events", /* @__PURE__ */ new Map()), E3(this, "shouldPersist", false), E3(this, "init", async () => {
      if (!Eo2()) try {
        const i4 = { eventId: wo2(), timestamp: Date.now(), domain: this.getAppDomain(), props: { event: "INIT", type: "", properties: { client_id: await this.core.crypto.getClientId(), user_agent: Yt2(this.core.relayer.protocol, this.core.relayer.version, me3) } } };
        await this.sendEvent([i4]);
      } catch (i4) {
        this.logger.warn(i4);
      }
    }), E3(this, "createEvent", (i4) => {
      const { event: r3 = "ERROR", type: o4 = "", properties: { topic: a3, trace: c6 } } = i4, h5 = wo2(), u2 = this.core.projectId || "", g3 = Date.now(), m3 = pe2({ eventId: h5, timestamp: g3, props: { event: r3, type: o4, properties: { topic: a3, trace: c6 } }, bundleId: u2, domain: this.getAppDomain() }, this.setMethods(h5));
      return this.telemetryEnabled && (this.events.set(h5, m3), this.shouldPersist = true), m3;
    }), E3(this, "getEvent", (i4) => {
      const { eventId: r3, topic: o4 } = i4;
      if (r3) return this.events.get(r3);
      const a3 = Array.from(this.events.values()).find((c6) => c6.props.properties.topic === o4);
      if (a3) return pe2(pe2({}, a3), this.setMethods(a3.eventId));
    }), E3(this, "deleteEvent", (i4) => {
      const { eventId: r3 } = i4;
      this.events.delete(r3), this.shouldPersist = true;
    }), E3(this, "setEventListeners", () => {
      this.core.heartbeat.on(r.pulse, async () => {
        this.shouldPersist && await this.persist(), this.events.forEach((i4) => {
          (0, import_time4.fromMiliseconds)(Date.now()) - (0, import_time4.fromMiliseconds)(i4.timestamp) > Wt3 && (this.events.delete(i4.eventId), this.shouldPersist = true);
        });
      });
    }), E3(this, "setMethods", (i4) => ({ addTrace: (r3) => this.addTrace(i4, r3), setError: (r3) => this.setError(i4, r3) })), E3(this, "addTrace", (i4, r3) => {
      const o4 = this.events.get(i4);
      o4 && (o4.props.properties.trace.push(r3), this.events.set(i4, o4), this.shouldPersist = true);
    }), E3(this, "setError", (i4, r3) => {
      const o4 = this.events.get(i4);
      o4 && (o4.props.type = r3, o4.timestamp = Date.now(), this.events.set(i4, o4), this.shouldPersist = true);
    }), E3(this, "persist", async () => {
      await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = false;
    }), E3(this, "restore", async () => {
      try {
        const i4 = await this.core.storage.getItem(this.storageKey) || [];
        if (!i4.length) return;
        i4.forEach((r3) => {
          this.events.set(r3.eventId, pe2(pe2({}, r3), this.setMethods(r3.eventId)));
        });
      } catch (i4) {
        this.logger.warn(i4);
      }
    }), E3(this, "submit", async () => {
      if (!this.telemetryEnabled || this.events.size === 0) return;
      const i4 = [];
      for (const [r3, o4] of this.events) o4.props.type && i4.push(o4);
      if (i4.length !== 0) try {
        if ((await this.sendEvent(i4)).ok) for (const r3 of i4) this.events.delete(r3.eventId), this.shouldPersist = true;
      } catch (r3) {
        this.logger.warn(r3);
      }
    }), E3(this, "sendEvent", async (i4) => {
      const r3 = this.getAppDomain() ? "" : "&sp=desktop";
      return await fetch(`${Zt2}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${me3}${r3}`, { method: "POST", body: JSON.stringify(i4) });
    }), E3(this, "getAppDomain", () => Yr2().url), this.logger = E2(t, this.context), this.telemetryEnabled = s3, s3 ? this.restore().then(async () => {
      await this.submit(), this.setEventListeners();
    }) : this.persist();
  }
  get storageKey() {
    return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
  }
};
var no3 = Object.defineProperty;
var zi2 = Object.getOwnPropertySymbols;
var oo2 = Object.prototype.hasOwnProperty;
var ao3 = Object.prototype.propertyIsEnumerable;
var Ge3 = (n5, e2, t) => e2 in n5 ? no3(n5, e2, { enumerable: true, configurable: true, writable: true, value: t }) : n5[e2] = t;
var Li2 = (n5, e2) => {
  for (var t in e2 || (e2 = {})) oo2.call(e2, t) && Ge3(n5, t, e2[t]);
  if (zi2) for (var t of zi2(e2)) ao3.call(e2, t) && Ge3(n5, t, e2[t]);
  return n5;
};
var f5 = (n5, e2, t) => Ge3(n5, typeof e2 != "symbol" ? e2 + "" : e2, t);
var _e3 = class __e extends h3 {
  constructor(e2) {
    var t;
    super(e2), f5(this, "protocol", xe3), f5(this, "version", Oe3), f5(this, "name", he2), f5(this, "relayUrl"), f5(this, "projectId"), f5(this, "customStoragePrefix"), f5(this, "events", new import_events7.EventEmitter()), f5(this, "logger"), f5(this, "heartbeat"), f5(this, "relayer"), f5(this, "crypto"), f5(this, "storage"), f5(this, "history"), f5(this, "expirer"), f5(this, "pairing"), f5(this, "verify"), f5(this, "echoClient"), f5(this, "linkModeSupportedApps"), f5(this, "eventClient"), f5(this, "initialized", false), f5(this, "logChunkController"), f5(this, "on", (o4, a3) => this.events.on(o4, a3)), f5(this, "once", (o4, a3) => this.events.once(o4, a3)), f5(this, "off", (o4, a3) => this.events.off(o4, a3)), f5(this, "removeListener", (o4, a3) => this.events.removeListener(o4, a3)), f5(this, "dispatchEnvelope", ({ topic: o4, message: a3, sessionExists: c6 }) => {
      if (!o4 || !a3) return;
      const h5 = { topic: o4, message: a3, publishedAt: Date.now(), transportType: Q3.link_mode };
      this.relayer.onLinkMessageEvent(h5, { sessionExists: c6 });
    }), this.projectId = e2 == null ? void 0 : e2.projectId, this.relayUrl = (e2 == null ? void 0 : e2.relayUrl) || $e3, this.customStoragePrefix = e2 != null && e2.customStoragePrefix ? `:${e2.customStoragePrefix}` : "";
    const s3 = k2({ level: typeof (e2 == null ? void 0 : e2.logger) == "string" && e2.logger ? e2.logger : mt2.logger, name: he2 }), { logger: i4, chunkLoggerController: r3 } = A({ opts: s3, maxSizeInBytes: e2 == null ? void 0 : e2.maxLogBlobSizeInBytes, loggerOverride: e2 == null ? void 0 : e2.logger });
    this.logChunkController = r3, (t = this.logChunkController) != null && t.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {
      var o4, a3;
      (o4 = this.logChunkController) != null && o4.downloadLogsBlobInBrowser && ((a3 = this.logChunkController) == null || a3.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
    }), this.logger = E2(i4, this.name), this.heartbeat = new i(), this.crypto = new bi2(this, this.logger, e2 == null ? void 0 : e2.keychain), this.history = new Si(this, this.logger), this.expirer = new Ri2(this, this.logger), this.storage = e2 != null && e2.storage ? e2.storage : new h(Li2(Li2({}, vt3), e2 == null ? void 0 : e2.storageOptions)), this.relayer = new wi2({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new Pi3(this, this.logger), this.verify = new xi(this, this.logger, this.storage), this.echoClient = new Ai(this.projectId || "", this.logger), this.linkModeSupportedApps = [], this.eventClient = new $i2(this, this.logger, e2 == null ? void 0 : e2.telemetryEnabled);
  }
  static async init(e2) {
    const t = new __e(e2);
    await t.initialize();
    const s3 = await t.crypto.getClientId();
    return await t.storage.setItem(Nt3, s3), t;
  }
  get context() {
    return y2(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async getLogsBlob() {
    var e2;
    return (e2 = this.logChunkController) == null ? void 0 : e2.logsToBlob({ clientId: await this.crypto.getClientId() });
  }
  async addLinkModeSupportedApp(e2) {
    this.linkModeSupportedApps.includes(e2) || (this.linkModeSupportedApps.push(e2), await this.storage.setItem(ze3, this.linkModeSupportedApps));
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = await this.storage.getItem(ze3) || [], this.initialized = true, this.logger.info("Core Initialization Success");
    } catch (e2) {
      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e2), this.logger.error(e2.message), e2;
    }
  }
};
var co3 = _e3;

// node_modules/@walletconnect/sign-client/dist/index.es.js
var import_time5 = __toESM(require_cjs2());
var import_events8 = __toESM(require_events());
var De3 = "wc";
var Le4 = 2;
var Me4 = "client";
var me4 = `${De3}@${Le4}:${Me4}:`;
var _e4 = { name: Me4, logger: "error", controller: false, relayUrl: "wss://relay.walletconnect.org" };
var ke4 = "WALLETCONNECT_DEEPLINK_CHOICE";
var pt2 = "proposal";
var $e4 = "Proposal expired";
var ht3 = "session";
var Y2 = import_time5.SEVEN_DAYS;
var dt3 = "engine";
var N10 = { wc_sessionPropose: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1100 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1101 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1120 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1121 } }, wc_sessionSettle: { req: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1102 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1104 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1105 } }, wc_sessionExtend: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1106 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1107 } }, wc_sessionRequest: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1108 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1109 } }, wc_sessionEvent: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1110 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1111 } }, wc_sessionDelete: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1112 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1113 } }, wc_sessionPing: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1114 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1115 } }, wc_sessionAuthenticate: { req: { ttl: import_time5.ONE_HOUR, prompt: true, tag: 1116 }, res: { ttl: import_time5.ONE_HOUR, prompt: false, tag: 1117 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1118 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1119 } } };
var Ee4 = { min: import_time5.FIVE_MINUTES, max: import_time5.SEVEN_DAYS };
var $2 = { idle: "IDLE", active: "ACTIVE" };
var Ke4 = { eth_sendTransaction: { key: "" }, eth_sendRawTransaction: { key: "" }, wallet_sendCalls: { key: "" }, solana_signTransaction: { key: "signature" }, solana_signAllTransactions: { key: "transactions" }, solana_signAndSendTransaction: { key: "signature" } };
var ut3 = "request";
var gt3 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"];
var yt3 = "wc";
var wt4 = "auth";
var mt3 = "authKeys";
var _t4 = "pairingTopics";
var Et4 = "requests";
var ce2 = `${yt3}@${1.5}:${wt4}:`;
var le4 = `${ce2}:PUB_KEY`;
var Rs2 = Object.defineProperty;
var fs2 = Object.defineProperties;
var Is2 = Object.getOwnPropertyDescriptors;
var St4 = Object.getOwnPropertySymbols;
var vs2 = Object.prototype.hasOwnProperty;
var qs3 = Object.prototype.propertyIsEnumerable;
var Ue4 = (S4, n5, e2) => n5 in S4 ? Rs2(S4, n5, { enumerable: true, configurable: true, writable: true, value: e2 }) : S4[n5] = e2;
var v4 = (S4, n5) => {
  for (var e2 in n5 || (n5 = {})) vs2.call(n5, e2) && Ue4(S4, e2, n5[e2]);
  if (St4) for (var e2 of St4(n5)) qs3.call(n5, e2) && Ue4(S4, e2, n5[e2]);
  return S4;
};
var x6 = (S4, n5) => fs2(S4, Is2(n5));
var c5 = (S4, n5, e2) => Ue4(S4, typeof n5 != "symbol" ? n5 + "" : n5, e2);
var Ts2 = class extends V {
  constructor(n5) {
    super(n5), c5(this, "name", dt3), c5(this, "events", new import_events8.default()), c5(this, "initialized", false), c5(this, "requestQueue", { state: $2.idle, queue: [] }), c5(this, "sessionRequestQueue", { state: $2.idle, queue: [] }), c5(this, "requestQueueDelay", import_time5.ONE_SECOND), c5(this, "expectedPairingMethodMap", /* @__PURE__ */ new Map()), c5(this, "recentlyDeletedMap", /* @__PURE__ */ new Map()), c5(this, "recentlyDeletedLimit", 200), c5(this, "relayMessageCache", []), c5(this, "pendingSessions", /* @__PURE__ */ new Map()), c5(this, "init", async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({ methods: Object.keys(N10) }), this.initialized = true, setTimeout(() => {
        this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
      }, (0, import_time5.toMiliseconds)(this.requestQueueDelay)));
    }), c5(this, "connect", async (e2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      const t = x6(v4({}, e2), { requiredNamespaces: e2.requiredNamespaces || {}, optionalNamespaces: e2.optionalNamespaces || {} });
      await this.isValidConnect(t);
      const { pairingTopic: s3, requiredNamespaces: i4, optionalNamespaces: r3, sessionProperties: o4, relays: a3 } = t;
      let l6 = s3, u2, g3 = false;
      try {
        if (l6) {
          const R3 = this.client.core.pairing.pairings.get(l6);
          this.client.logger.warn("connect() with existing pairing topic is deprecated and will be removed in the next major release."), g3 = R3.active;
        }
      } catch (R3) {
        throw this.client.logger.error(`connect() -> pairing.get(${l6}) failed`), R3;
      }
      if (!l6 || !g3) {
        const { topic: R3, uri: D3 } = await this.client.core.pairing.create();
        l6 = R3, u2 = D3;
      }
      if (!l6) {
        const { message: R3 } = te2("NO_MATCHING_KEY", `connect() pairing topic: ${l6}`);
        throw new Error(R3);
      }
      const h5 = await this.client.core.crypto.generateKeyPair(), d5 = N10.wc_sessionPropose.req.ttl || import_time5.FIVE_MINUTES, y4 = ho2(d5), m3 = x6(v4({ requiredNamespaces: i4, optionalNamespaces: r3, relays: a3 ?? [{ protocol: Pt3 }], proposer: { publicKey: h5, metadata: this.client.metadata }, expiryTimestamp: y4, pairingTopic: l6 }, o4 && { sessionProperties: o4 }), { id: payloadId() }), I3 = go2("session_connect", m3.id), { reject: p4, resolve: E4, done: V3 } = co2(d5, $e4), q3 = ({ id: R3 }) => {
        R3 === m3.id && (this.client.events.off("proposal_expire", q3), this.pendingSessions.delete(m3.id), this.events.emit(I3, { error: { message: $e4, code: 0 } }));
      };
      return this.client.events.on("proposal_expire", q3), this.events.once(I3, ({ error: R3, session: D3 }) => {
        this.client.events.off("proposal_expire", q3), R3 ? p4(R3) : D3 && E4(D3);
      }), await this.sendRequest({ topic: l6, method: "wc_sessionPropose", params: m3, throwOnFailedPublish: true, clientRpcId: m3.id }), await this.setProposal(m3.id, m3), { uri: u2, approval: V3 };
    }), c5(this, "pair", async (e2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        return await this.client.core.pairing.pair(e2);
      } catch (t) {
        throw this.client.logger.error("pair() failed"), t;
      }
    }), c5(this, "approve", async (e2) => {
      var t, s3, i4;
      const r3 = this.client.core.eventClient.createEvent({ properties: { topic: (t = e2 == null ? void 0 : e2.id) == null ? void 0 : t.toString(), trace: [qs2.session_approve_started] } });
      try {
        this.isInitialized(), await this.confirmOnlineStateOrThrow();
      } catch (P4) {
        throw r3.setError(Gs2.no_internet_connection), P4;
      }
      try {
        await this.isValidProposalId(e2 == null ? void 0 : e2.id);
      } catch (P4) {
        throw this.client.logger.error(`approve() -> proposal.get(${e2 == null ? void 0 : e2.id}) failed`), r3.setError(Gs2.proposal_not_found), P4;
      }
      try {
        await this.isValidApprove(e2);
      } catch (P4) {
        throw this.client.logger.error("approve() -> isValidApprove() failed"), r3.setError(Gs2.session_approve_namespace_validation_failure), P4;
      }
      const { id: o4, relayProtocol: a3, namespaces: l6, sessionProperties: u2, sessionConfig: g3 } = e2, h5 = this.client.proposal.get(o4);
      this.client.core.eventClient.deleteEvent({ eventId: r3.eventId });
      const { pairingTopic: d5, proposer: y4, requiredNamespaces: m3, optionalNamespaces: I3 } = h5;
      let p4 = (s3 = this.client.core.eventClient) == null ? void 0 : s3.getEvent({ topic: d5 });
      p4 || (p4 = (i4 = this.client.core.eventClient) == null ? void 0 : i4.createEvent({ type: qs2.session_approve_started, properties: { topic: d5, trace: [qs2.session_approve_started, qs2.session_namespaces_validation_success] } }));
      const E4 = await this.client.core.crypto.generateKeyPair(), V3 = y4.publicKey, q3 = await this.client.core.crypto.generateSharedKey(E4, V3), R3 = v4(v4({ relay: { protocol: a3 ?? "irn" }, namespaces: l6, controller: { publicKey: E4, metadata: this.client.metadata }, expiry: ho2(Y2) }, u2 && { sessionProperties: u2 }), g3 && { sessionConfig: g3 }), D3 = Q3.relay;
      p4.addTrace(qs2.subscribing_session_topic);
      try {
        await this.client.core.relayer.subscribe(q3, { transportType: D3 });
      } catch (P4) {
        throw p4.setError(Gs2.subscribe_session_topic_failure), P4;
      }
      p4.addTrace(qs2.subscribe_session_topic_success);
      const ee3 = x6(v4({}, R3), { topic: q3, requiredNamespaces: m3, optionalNamespaces: I3, pairingTopic: d5, acknowledged: false, self: R3.controller, peer: { publicKey: y4.publicKey, metadata: y4.metadata }, controller: E4, transportType: Q3.relay });
      await this.client.session.set(q3, ee3), p4.addTrace(qs2.store_session);
      try {
        p4.addTrace(qs2.publishing_session_settle), await this.sendRequest({ topic: q3, method: "wc_sessionSettle", params: R3, throwOnFailedPublish: true }).catch((P4) => {
          throw p4 == null ? void 0 : p4.setError(Gs2.session_settle_publish_failure), P4;
        }), p4.addTrace(qs2.session_settle_publish_success), p4.addTrace(qs2.publishing_session_approve), await this.sendResult({ id: o4, topic: d5, result: { relay: { protocol: a3 ?? "irn" }, responderPublicKey: E4 }, throwOnFailedPublish: true }).catch((P4) => {
          throw p4 == null ? void 0 : p4.setError(Gs2.session_approve_publish_failure), P4;
        }), p4.addTrace(qs2.session_approve_publish_success);
      } catch (P4) {
        throw this.client.logger.error(P4), this.client.session.delete(q3, de2("USER_DISCONNECTED")), await this.client.core.relayer.unsubscribe(q3), P4;
      }
      return this.client.core.eventClient.deleteEvent({ eventId: p4.eventId }), await this.client.core.pairing.updateMetadata({ topic: d5, metadata: y4.metadata }), await this.client.proposal.delete(o4, de2("USER_DISCONNECTED")), await this.client.core.pairing.activate({ topic: d5 }), await this.setExpiry(q3, ho2(Y2)), { topic: q3, acknowledged: () => Promise.resolve(this.client.session.get(q3)) };
    }), c5(this, "reject", async (e2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidReject(e2);
      } catch (r3) {
        throw this.client.logger.error("reject() -> isValidReject() failed"), r3;
      }
      const { id: t, reason: s3 } = e2;
      let i4;
      try {
        i4 = this.client.proposal.get(t).pairingTopic;
      } catch (r3) {
        throw this.client.logger.error(`reject() -> proposal.get(${t}) failed`), r3;
      }
      i4 && (await this.sendError({ id: t, topic: i4, error: s3, rpcOpts: N10.wc_sessionPropose.reject }), await this.client.proposal.delete(t, de2("USER_DISCONNECTED")));
    }), c5(this, "update", async (e2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidUpdate(e2);
      } catch (g3) {
        throw this.client.logger.error("update() -> isValidUpdate() failed"), g3;
      }
      const { topic: t, namespaces: s3 } = e2, { done: i4, resolve: r3, reject: o4 } = co2(), a3 = payloadId(), l6 = getBigIntRpcId().toString(), u2 = this.client.session.get(t).namespaces;
      return this.events.once(go2("session_update", a3), ({ error: g3 }) => {
        g3 ? o4(g3) : r3();
      }), await this.client.session.update(t, { namespaces: s3 }), await this.sendRequest({ topic: t, method: "wc_sessionUpdate", params: { namespaces: s3 }, throwOnFailedPublish: true, clientRpcId: a3, relayRpcId: l6 }).catch((g3) => {
        this.client.logger.error(g3), this.client.session.update(t, { namespaces: u2 }), o4(g3);
      }), { acknowledged: i4 };
    }), c5(this, "extend", async (e2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidExtend(e2);
      } catch (a3) {
        throw this.client.logger.error("extend() -> isValidExtend() failed"), a3;
      }
      const { topic: t } = e2, s3 = payloadId(), { done: i4, resolve: r3, reject: o4 } = co2();
      return this.events.once(go2("session_extend", s3), ({ error: a3 }) => {
        a3 ? o4(a3) : r3();
      }), await this.setExpiry(t, ho2(Y2)), this.sendRequest({ topic: t, method: "wc_sessionExtend", params: {}, clientRpcId: s3, throwOnFailedPublish: true }).catch((a3) => {
        o4(a3);
      }), { acknowledged: i4 };
    }), c5(this, "request", async (e2) => {
      this.isInitialized();
      try {
        await this.isValidRequest(e2);
      } catch (p4) {
        throw this.client.logger.error("request() -> isValidRequest() failed"), p4;
      }
      const { chainId: t, request: s3, topic: i4, expiry: r3 = N10.wc_sessionRequest.req.ttl } = e2, o4 = this.client.session.get(i4);
      (o4 == null ? void 0 : o4.transportType) === Q3.relay && await this.confirmOnlineStateOrThrow();
      const a3 = payloadId(), l6 = getBigIntRpcId().toString(), { done: u2, resolve: g3, reject: h5 } = co2(r3, "Request expired. Please try again.");
      this.events.once(go2("session_request", a3), ({ error: p4, result: E4 }) => {
        p4 ? h5(p4) : g3(E4);
      });
      const d5 = "wc_sessionRequest", y4 = this.getAppLinkIfEnabled(o4.peer.metadata, o4.transportType);
      if (y4) return await this.sendRequest({ clientRpcId: a3, relayRpcId: l6, topic: i4, method: d5, params: { request: x6(v4({}, s3), { expiryTimestamp: ho2(r3) }), chainId: t }, expiry: r3, throwOnFailedPublish: true, appLink: y4 }).catch((p4) => h5(p4)), this.client.events.emit("session_request_sent", { topic: i4, request: s3, chainId: t, id: a3 }), await u2();
      const m3 = { request: x6(v4({}, s3), { expiryTimestamp: ho2(r3) }), chainId: t }, I3 = this.shouldSetTVF(d5, m3);
      return await Promise.all([new Promise(async (p4) => {
        await this.sendRequest(v4({ clientRpcId: a3, relayRpcId: l6, topic: i4, method: d5, params: m3, expiry: r3, throwOnFailedPublish: true }, I3 && { tvf: this.getTVFParams(a3, m3) })).catch((E4) => h5(E4)), this.client.events.emit("session_request_sent", { topic: i4, request: s3, chainId: t, id: a3 }), p4();
      }), new Promise(async (p4) => {
        var E4;
        if (!((E4 = o4.sessionConfig) != null && E4.disableDeepLink)) {
          const V3 = await mo2(this.client.core.storage, ke4);
          await yo2({ id: a3, topic: i4, wcDeepLink: V3 });
        }
        p4();
      }), u2()]).then((p4) => p4[2]);
    }), c5(this, "respond", async (e2) => {
      this.isInitialized(), await this.isValidRespond(e2);
      const { topic: t, response: s3 } = e2, { id: i4 } = s3, r3 = this.client.session.get(t);
      r3.transportType === Q3.relay && await this.confirmOnlineStateOrThrow();
      const o4 = this.getAppLinkIfEnabled(r3.peer.metadata, r3.transportType);
      isJsonRpcResult(s3) ? await this.sendResult({ id: i4, topic: t, result: s3.result, throwOnFailedPublish: true, appLink: o4 }) : isJsonRpcError(s3) && await this.sendError({ id: i4, topic: t, error: s3.error, appLink: o4 }), this.cleanupAfterResponse(e2);
    }), c5(this, "ping", async (e2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidPing(e2);
      } catch (s3) {
        throw this.client.logger.error("ping() -> isValidPing() failed"), s3;
      }
      const { topic: t } = e2;
      if (this.client.session.keys.includes(t)) {
        const s3 = payloadId(), i4 = getBigIntRpcId().toString(), { done: r3, resolve: o4, reject: a3 } = co2();
        this.events.once(go2("session_ping", s3), ({ error: l6 }) => {
          l6 ? a3(l6) : o4();
        }), await Promise.all([this.sendRequest({ topic: t, method: "wc_sessionPing", params: {}, throwOnFailedPublish: true, clientRpcId: s3, relayRpcId: i4 }), r3()]);
      } else this.client.core.pairing.pairings.keys.includes(t) && (this.client.logger.warn("ping() on pairing topic is deprecated and will be removed in the next major release."), await this.client.core.pairing.ping({ topic: t }));
    }), c5(this, "emit", async (e2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(e2);
      const { topic: t, event: s3, chainId: i4 } = e2, r3 = getBigIntRpcId().toString(), o4 = payloadId();
      await this.sendRequest({ topic: t, method: "wc_sessionEvent", params: { event: s3, chainId: i4 }, throwOnFailedPublish: true, relayRpcId: r3, clientRpcId: o4 });
    }), c5(this, "disconnect", async (e2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(e2);
      const { topic: t } = e2;
      if (this.client.session.keys.includes(t)) await this.sendRequest({ topic: t, method: "wc_sessionDelete", params: de2("USER_DISCONNECTED"), throwOnFailedPublish: true }), await this.deleteSession({ topic: t, emitEvent: false });
      else if (this.client.core.pairing.pairings.keys.includes(t)) await this.client.core.pairing.disconnect({ topic: t });
      else {
        const { message: s3 } = te2("MISMATCHED_TOPIC", `Session or pairing topic not found: ${t}`);
        throw new Error(s3);
      }
    }), c5(this, "find", (e2) => (this.isInitialized(), this.client.session.getAll().filter((t) => $i(t, e2)))), c5(this, "getPendingSessionRequests", () => this.client.pendingRequest.getAll()), c5(this, "authenticate", async (e2, t) => {
      var s3;
      this.isInitialized(), this.isValidAuthenticate(e2);
      const i4 = t && this.client.core.linkModeSupportedApps.includes(t) && ((s3 = this.client.metadata.redirect) == null ? void 0 : s3.linkMode), r3 = i4 ? Q3.link_mode : Q3.relay;
      r3 === Q3.relay && await this.confirmOnlineStateOrThrow();
      const { chains: o4, statement: a3 = "", uri: l6, domain: u2, nonce: g3, type: h5, exp: d5, nbf: y4, methods: m3 = [], expiry: I3 } = e2, p4 = [...e2.resources || []], { topic: E4, uri: V3 } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r3 });
      this.client.logger.info({ message: "Generated new pairing", pairing: { topic: E4, uri: V3 } });
      const q3 = await this.client.core.crypto.generateKeyPair(), R3 = oi(q3);
      if (await Promise.all([this.client.auth.authKeys.set(le4, { responseTopic: R3, publicKey: q3 }), this.client.auth.pairingTopics.set(R3, { topic: R3, pairingTopic: E4 })]), await this.client.core.relayer.subscribe(R3, { transportType: r3 }), this.client.logger.info(`sending request to new pairing topic: ${E4}`), m3.length > 0) {
        const { namespace: b4 } = Ye2(o4[0]);
        let L3 = ts(b4, "request", m3);
        Me2(p4) && (L3 = ns(L3, p4.pop())), p4.push(L3);
      }
      const D3 = I3 && I3 > N10.wc_sessionAuthenticate.req.ttl ? I3 : N10.wc_sessionAuthenticate.req.ttl, ee3 = { authPayload: { type: h5 ?? "caip122", chains: o4, statement: a3, aud: l6, domain: u2, version: "1", nonce: g3, iat: (/* @__PURE__ */ new Date()).toISOString(), exp: d5, nbf: y4, resources: p4 }, requester: { publicKey: q3, metadata: this.client.metadata }, expiryTimestamp: ho2(D3) }, P4 = { eip155: { chains: o4, methods: [.../* @__PURE__ */ new Set(["personal_sign", ...m3])], events: ["chainChanged", "accountsChanged"] } }, X = { requiredNamespaces: {}, optionalNamespaces: P4, relays: [{ protocol: "irn" }], pairingTopic: E4, proposer: { publicKey: q3, metadata: this.client.metadata }, expiryTimestamp: ho2(N10.wc_sessionPropose.req.ttl), id: payloadId() }, { done: ft4, resolve: Fe3, reject: Re3 } = co2(D3, "Request expired"), te4 = payloadId(), pe3 = go2("session_connect", X.id), fe4 = go2("session_request", te4), he3 = async ({ error: b4, session: L3 }) => {
        this.events.off(fe4, Ie4), b4 ? Re3(b4) : L3 && Fe3({ session: L3 });
      }, Ie4 = async (b4) => {
        var L3, je4, Qe2;
        if (await this.deletePendingAuthRequest(te4, { message: "fulfilled", code: 0 }), b4.error) {
          const ie3 = de2("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
          return b4.error.code === ie3.code ? void 0 : (this.events.off(pe3, he3), Re3(b4.error.message));
        }
        await this.deleteProposal(X.id), this.events.off(pe3, he3);
        const { cacaos: He3, responder: Q4 } = b4.result, qe4 = [], ze4 = [];
        for (const ie3 of He3) {
          await Yo2({ cacao: ie3, projectId: this.client.core.projectId }) || (this.client.logger.error(ie3, "Signature verification failed"), Re3(de2("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
          const { p: Te3 } = ie3, Ne4 = Me2(Te3.resources), Ye4 = [On2(Te3.iss)], It4 = ut2(Te3.iss);
          if (Ne4) {
            const Pe3 = rs(Ne4), vt4 = os(Ne4);
            qe4.push(...Pe3), Ye4.push(...vt4);
          }
          for (const Pe3 of Ye4) ze4.push(`${Pe3}:${It4}`);
        }
        const se3 = await this.client.core.crypto.generateSharedKey(q3, Q4.publicKey);
        let de4;
        qe4.length > 0 && (de4 = { topic: se3, acknowledged: true, self: { publicKey: q3, metadata: this.client.metadata }, peer: Q4, controller: Q4.publicKey, expiry: ho2(Y2), requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: E4, namespaces: Ti([...new Set(qe4)], [...new Set(ze4)]), transportType: r3 }, await this.client.core.relayer.subscribe(se3, { transportType: r3 }), await this.client.session.set(se3, de4), E4 && await this.client.core.pairing.updateMetadata({ topic: E4, metadata: Q4.metadata }), de4 = this.client.session.get(se3)), (L3 = this.client.metadata.redirect) != null && L3.linkMode && (je4 = Q4.metadata.redirect) != null && je4.linkMode && (Qe2 = Q4.metadata.redirect) != null && Qe2.universal && t && (this.client.core.addLinkModeSupportedApp(Q4.metadata.redirect.universal), this.client.session.update(se3, { transportType: Q3.link_mode })), Fe3({ auths: He3, session: de4 });
      };
      this.events.once(pe3, he3), this.events.once(fe4, Ie4);
      let ve4;
      try {
        if (i4) {
          const b4 = formatJsonRpcRequest("wc_sessionAuthenticate", ee3, te4);
          this.client.core.history.set(E4, b4);
          const L3 = await this.client.core.crypto.encode("", b4, { type: _e2, encoding: Qs });
          ve4 = Ei(t, E4, L3);
        } else await Promise.all([this.sendRequest({ topic: E4, method: "wc_sessionAuthenticate", params: ee3, expiry: e2.expiry, throwOnFailedPublish: true, clientRpcId: te4 }), this.sendRequest({ topic: E4, method: "wc_sessionPropose", params: X, expiry: N10.wc_sessionPropose.req.ttl, throwOnFailedPublish: true, clientRpcId: X.id })]);
      } catch (b4) {
        throw this.events.off(pe3, he3), this.events.off(fe4, Ie4), b4;
      }
      return await this.setProposal(X.id, X), await this.setAuthRequest(te4, { request: x6(v4({}, ee3), { verifyContext: {} }), pairingTopic: E4, transportType: r3 }), { uri: ve4 ?? V3, response: ft4 };
    }), c5(this, "approveSessionAuthenticate", async (e2) => {
      const { id: t, auths: s3 } = e2, i4 = this.client.core.eventClient.createEvent({ properties: { topic: t.toString(), trace: [Hs2.authenticated_session_approve_started] } });
      try {
        this.isInitialized();
      } catch (I3) {
        throw i4.setError(Ys2.no_internet_connection), I3;
      }
      const r3 = this.getPendingAuthRequest(t);
      if (!r3) throw i4.setError(Ys2.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${t}`);
      const o4 = r3.transportType || Q3.relay;
      o4 === Q3.relay && await this.confirmOnlineStateOrThrow();
      const a3 = r3.requester.publicKey, l6 = await this.client.core.crypto.generateKeyPair(), u2 = oi(a3), g3 = { type: Ie2, receiverPublicKey: a3, senderPublicKey: l6 }, h5 = [], d5 = [];
      for (const I3 of s3) {
        if (!await Yo2({ cacao: I3, projectId: this.client.core.projectId })) {
          i4.setError(Ys2.invalid_cacao);
          const R3 = de2("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
          throw await this.sendError({ id: t, topic: u2, error: R3, encodeOpts: g3 }), new Error(R3.message);
        }
        i4.addTrace(Hs2.cacaos_verified);
        const { p: p4 } = I3, E4 = Me2(p4.resources), V3 = [On2(p4.iss)], q3 = ut2(p4.iss);
        if (E4) {
          const R3 = rs(E4), D3 = os(E4);
          h5.push(...R3), V3.push(...D3);
        }
        for (const R3 of V3) d5.push(`${R3}:${q3}`);
      }
      const y4 = await this.client.core.crypto.generateSharedKey(l6, a3);
      i4.addTrace(Hs2.create_authenticated_session_topic);
      let m3;
      if ((h5 == null ? void 0 : h5.length) > 0) {
        m3 = { topic: y4, acknowledged: true, self: { publicKey: l6, metadata: this.client.metadata }, peer: { publicKey: a3, metadata: r3.requester.metadata }, controller: a3, expiry: ho2(Y2), authentication: s3, requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: r3.pairingTopic, namespaces: Ti([...new Set(h5)], [...new Set(d5)]), transportType: o4 }, i4.addTrace(Hs2.subscribing_authenticated_session_topic);
        try {
          await this.client.core.relayer.subscribe(y4, { transportType: o4 });
        } catch (I3) {
          throw i4.setError(Ys2.subscribe_authenticated_session_topic_failure), I3;
        }
        i4.addTrace(Hs2.subscribe_authenticated_session_topic_success), await this.client.session.set(y4, m3), i4.addTrace(Hs2.store_authenticated_session), await this.client.core.pairing.updateMetadata({ topic: r3.pairingTopic, metadata: r3.requester.metadata });
      }
      i4.addTrace(Hs2.publishing_authenticated_session_approve);
      try {
        await this.sendResult({ topic: u2, id: t, result: { cacaos: s3, responder: { publicKey: l6, metadata: this.client.metadata } }, encodeOpts: g3, throwOnFailedPublish: true, appLink: this.getAppLinkIfEnabled(r3.requester.metadata, o4) });
      } catch (I3) {
        throw i4.setError(Ys2.authenticated_session_approve_publish_failure), I3;
      }
      return await this.client.auth.requests.delete(t, { message: "fulfilled", code: 0 }), await this.client.core.pairing.activate({ topic: r3.pairingTopic }), this.client.core.eventClient.deleteEvent({ eventId: i4.eventId }), { session: m3 };
    }), c5(this, "rejectSessionAuthenticate", async (e2) => {
      this.isInitialized();
      const { id: t, reason: s3 } = e2, i4 = this.getPendingAuthRequest(t);
      if (!i4) throw new Error(`Could not find pending auth request with id ${t}`);
      i4.transportType === Q3.relay && await this.confirmOnlineStateOrThrow();
      const r3 = i4.requester.publicKey, o4 = await this.client.core.crypto.generateKeyPair(), a3 = oi(r3), l6 = { type: Ie2, receiverPublicKey: r3, senderPublicKey: o4 };
      await this.sendError({ id: t, topic: a3, error: s3, encodeOpts: l6, rpcOpts: N10.wc_sessionAuthenticate.reject, appLink: this.getAppLinkIfEnabled(i4.requester.metadata, i4.transportType) }), await this.client.auth.requests.delete(t, { message: "rejected", code: 0 }), await this.client.proposal.delete(t, de2("USER_DISCONNECTED"));
    }), c5(this, "formatAuthMessage", (e2) => {
      this.isInitialized();
      const { request: t, iss: s3 } = e2;
      return In2(t, s3);
    }), c5(this, "processRelayMessageCache", () => {
      setTimeout(async () => {
        if (this.relayMessageCache.length !== 0) for (; this.relayMessageCache.length > 0; ) try {
          const e2 = this.relayMessageCache.shift();
          e2 && await this.onRelayMessage(e2);
        } catch (e2) {
          this.client.logger.error(e2);
        }
      }, 50);
    }), c5(this, "cleanupDuplicatePairings", async (e2) => {
      if (e2.pairingTopic) try {
        const t = this.client.core.pairing.pairings.get(e2.pairingTopic), s3 = this.client.core.pairing.pairings.getAll().filter((i4) => {
          var r3, o4;
          return ((r3 = i4.peerMetadata) == null ? void 0 : r3.url) && ((o4 = i4.peerMetadata) == null ? void 0 : o4.url) === e2.peer.metadata.url && i4.topic && i4.topic !== t.topic;
        });
        if (s3.length === 0) return;
        this.client.logger.info(`Cleaning up ${s3.length} duplicate pairing(s)`), await Promise.all(s3.map((i4) => this.client.core.pairing.disconnect({ topic: i4.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
      } catch (t) {
        this.client.logger.error(t);
      }
    }), c5(this, "deleteSession", async (e2) => {
      var t;
      const { topic: s3, expirerHasDeleted: i4 = false, emitEvent: r3 = true, id: o4 = 0 } = e2, { self: a3 } = this.client.session.get(s3);
      await this.client.core.relayer.unsubscribe(s3), await this.client.session.delete(s3, de2("USER_DISCONNECTED")), this.addToRecentlyDeleted(s3, "session"), this.client.core.crypto.keychain.has(a3.publicKey) && await this.client.core.crypto.deleteKeyPair(a3.publicKey), this.client.core.crypto.keychain.has(s3) && await this.client.core.crypto.deleteSymKey(s3), i4 || this.client.core.expirer.del(s3), this.client.core.storage.removeItem(ke4).catch((l6) => this.client.logger.warn(l6)), this.getPendingSessionRequests().forEach((l6) => {
        l6.topic === s3 && this.deletePendingSessionRequest(l6.id, de2("USER_DISCONNECTED"));
      }), s3 === ((t = this.sessionRequestQueue.queue[0]) == null ? void 0 : t.topic) && (this.sessionRequestQueue.state = $2.idle), r3 && this.client.events.emit("session_delete", { id: o4, topic: s3 });
    }), c5(this, "deleteProposal", async (e2, t) => {
      if (t) try {
        const s3 = this.client.proposal.get(e2), i4 = this.client.core.eventClient.getEvent({ topic: s3.pairingTopic });
        i4 == null ? void 0 : i4.setError(Gs2.proposal_expired);
      } catch {
      }
      await Promise.all([this.client.proposal.delete(e2, de2("USER_DISCONNECTED")), t ? Promise.resolve() : this.client.core.expirer.del(e2)]), this.addToRecentlyDeleted(e2, "proposal");
    }), c5(this, "deletePendingSessionRequest", async (e2, t, s3 = false) => {
      await Promise.all([this.client.pendingRequest.delete(e2, t), s3 ? Promise.resolve() : this.client.core.expirer.del(e2)]), this.addToRecentlyDeleted(e2, "request"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i4) => i4.id !== e2), s3 && (this.sessionRequestQueue.state = $2.idle, this.client.events.emit("session_request_expire", { id: e2 }));
    }), c5(this, "deletePendingAuthRequest", async (e2, t, s3 = false) => {
      await Promise.all([this.client.auth.requests.delete(e2, t), s3 ? Promise.resolve() : this.client.core.expirer.del(e2)]);
    }), c5(this, "setExpiry", async (e2, t) => {
      this.client.session.keys.includes(e2) && (this.client.core.expirer.set(e2, t), await this.client.session.update(e2, { expiry: t }));
    }), c5(this, "setProposal", async (e2, t) => {
      this.client.core.expirer.set(e2, ho2(N10.wc_sessionPropose.req.ttl)), await this.client.proposal.set(e2, t);
    }), c5(this, "setAuthRequest", async (e2, t) => {
      const { request: s3, pairingTopic: i4, transportType: r3 = Q3.relay } = t;
      this.client.core.expirer.set(e2, s3.expiryTimestamp), await this.client.auth.requests.set(e2, { authPayload: s3.authPayload, requester: s3.requester, expiryTimestamp: s3.expiryTimestamp, id: e2, pairingTopic: i4, verifyContext: s3.verifyContext, transportType: r3 });
    }), c5(this, "setPendingSessionRequest", async (e2) => {
      const { id: t, topic: s3, params: i4, verifyContext: r3 } = e2, o4 = i4.request.expiryTimestamp || ho2(N10.wc_sessionRequest.req.ttl);
      this.client.core.expirer.set(t, o4), await this.client.pendingRequest.set(t, { id: t, topic: s3, params: i4, verifyContext: r3 });
    }), c5(this, "sendRequest", async (e2) => {
      const { topic: t, method: s3, params: i4, expiry: r3, relayRpcId: o4, clientRpcId: a3, throwOnFailedPublish: l6, appLink: u2, tvf: g3 } = e2, h5 = formatJsonRpcRequest(s3, i4, a3);
      let d5;
      const y4 = !!u2;
      try {
        const p4 = y4 ? Qs : At;
        d5 = await this.client.core.crypto.encode(t, h5, { encoding: p4 });
      } catch (p4) {
        throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${t} failed`), p4;
      }
      let m3;
      if (gt3.includes(s3)) {
        const p4 = si(JSON.stringify(h5)), E4 = si(d5);
        m3 = await this.client.core.verify.register({ id: E4, decryptedId: p4 });
      }
      const I3 = N10[s3].req;
      if (I3.attestation = m3, r3 && (I3.ttl = r3), o4 && (I3.id = o4), this.client.core.history.set(t, h5), y4) {
        const p4 = Ei(u2, t, d5);
        await global.Linking.openURL(p4, this.client.name);
      } else {
        const p4 = N10[s3].req;
        r3 && (p4.ttl = r3), o4 && (p4.id = o4), p4.tvf = x6(v4({}, g3), { correlationId: h5.id }), l6 ? (p4.internal = x6(v4({}, p4.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(t, d5, p4)) : this.client.core.relayer.publish(t, d5, p4).catch((E4) => this.client.logger.error(E4));
      }
      return h5.id;
    }), c5(this, "sendResult", async (e2) => {
      const { id: t, topic: s3, result: i4, throwOnFailedPublish: r3, encodeOpts: o4, appLink: a3 } = e2, l6 = formatJsonRpcResult(t, i4);
      let u2;
      const g3 = a3 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const y4 = g3 ? Qs : At;
        u2 = await this.client.core.crypto.encode(s3, l6, x6(v4({}, o4 || {}), { encoding: y4 }));
      } catch (y4) {
        throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s3} failed`), y4;
      }
      let h5, d5;
      try {
        h5 = await this.client.core.history.get(s3, t);
        const y4 = h5.request;
        try {
          this.shouldSetTVF(y4.method, y4.params) && (d5 = this.getTVFParams(t, y4.params, i4));
        } catch (m3) {
          this.client.logger.warn("sendResult() -> getTVFParams() failed", m3);
        }
      } catch (y4) {
        throw this.client.logger.error(`sendResult() -> history.get(${s3}, ${t}) failed`), y4;
      }
      if (g3) {
        const y4 = Ei(a3, s3, u2);
        await global.Linking.openURL(y4, this.client.name);
      } else {
        const y4 = h5.request.method, m3 = N10[y4].res;
        m3.tvf = x6(v4({}, d5), { correlationId: t }), r3 ? (m3.internal = x6(v4({}, m3.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(s3, u2, m3)) : this.client.core.relayer.publish(s3, u2, m3).catch((I3) => this.client.logger.error(I3));
      }
      await this.client.core.history.resolve(l6);
    }), c5(this, "sendError", async (e2) => {
      const { id: t, topic: s3, error: i4, encodeOpts: r3, rpcOpts: o4, appLink: a3 } = e2, l6 = formatJsonRpcError(t, i4);
      let u2;
      const g3 = a3 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const d5 = g3 ? Qs : At;
        u2 = await this.client.core.crypto.encode(s3, l6, x6(v4({}, r3 || {}), { encoding: d5 }));
      } catch (d5) {
        throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s3} failed`), d5;
      }
      let h5;
      try {
        h5 = await this.client.core.history.get(s3, t);
      } catch (d5) {
        throw this.client.logger.error(`sendError() -> history.get(${s3}, ${t}) failed`), d5;
      }
      if (g3) {
        const d5 = Ei(a3, s3, u2);
        await global.Linking.openURL(d5, this.client.name);
      } else {
        const d5 = h5.request.method, y4 = o4 || N10[d5].res;
        this.client.core.relayer.publish(s3, u2, y4);
      }
      await this.client.core.history.resolve(l6);
    }), c5(this, "cleanup", async () => {
      const e2 = [], t = [];
      this.client.session.getAll().forEach((s3) => {
        let i4 = false;
        po2(s3.expiry) && (i4 = true), this.client.core.crypto.keychain.has(s3.topic) || (i4 = true), i4 && e2.push(s3.topic);
      }), this.client.proposal.getAll().forEach((s3) => {
        po2(s3.expiryTimestamp) && t.push(s3.id);
      }), await Promise.all([...e2.map((s3) => this.deleteSession({ topic: s3 })), ...t.map((s3) => this.deleteProposal(s3))]);
    }), c5(this, "onRelayEventRequest", async (e2) => {
      this.requestQueue.queue.push(e2), await this.processRequestsQueue();
    }), c5(this, "processRequestsQueue", async () => {
      if (this.requestQueue.state === $2.active) {
        this.client.logger.info("Request queue already active, skipping...");
        return;
      }
      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
        this.requestQueue.state = $2.active;
        const e2 = this.requestQueue.queue.shift();
        if (e2) try {
          await this.processRequest(e2);
        } catch (t) {
          this.client.logger.warn(t);
        }
      }
      this.requestQueue.state = $2.idle;
    }), c5(this, "processRequest", async (e2) => {
      const { topic: t, payload: s3, attestation: i4, transportType: r3, encryptedId: o4 } = e2, a3 = s3.method;
      if (!this.shouldIgnorePairingRequest({ topic: t, requestMethod: a3 })) switch (a3) {
        case "wc_sessionPropose":
          return await this.onSessionProposeRequest({ topic: t, payload: s3, attestation: i4, encryptedId: o4 });
        case "wc_sessionSettle":
          return await this.onSessionSettleRequest(t, s3);
        case "wc_sessionUpdate":
          return await this.onSessionUpdateRequest(t, s3);
        case "wc_sessionExtend":
          return await this.onSessionExtendRequest(t, s3);
        case "wc_sessionPing":
          return await this.onSessionPingRequest(t, s3);
        case "wc_sessionDelete":
          return await this.onSessionDeleteRequest(t, s3);
        case "wc_sessionRequest":
          return await this.onSessionRequest({ topic: t, payload: s3, attestation: i4, encryptedId: o4, transportType: r3 });
        case "wc_sessionEvent":
          return await this.onSessionEventRequest(t, s3);
        case "wc_sessionAuthenticate":
          return await this.onSessionAuthenticateRequest({ topic: t, payload: s3, attestation: i4, encryptedId: o4, transportType: r3 });
        default:
          return this.client.logger.info(`Unsupported request method ${a3}`);
      }
    }), c5(this, "onRelayEventResponse", async (e2) => {
      const { topic: t, payload: s3, transportType: i4 } = e2, r3 = (await this.client.core.history.get(t, s3.id)).request.method;
      switch (r3) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(t, s3, i4);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(t, s3);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(t, s3);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(t, s3);
        case "wc_sessionPing":
          return this.onSessionPingResponse(t, s3);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(t, s3);
        case "wc_sessionAuthenticate":
          return this.onSessionAuthenticateResponse(t, s3);
        default:
          return this.client.logger.info(`Unsupported response method ${r3}`);
      }
    }), c5(this, "onRelayEventUnknownPayload", (e2) => {
      const { topic: t } = e2, { message: s3 } = te2("MISSING_OR_INVALID", `Decoded payload on topic ${t} is not identifiable as a JSON-RPC request or a response.`);
      throw new Error(s3);
    }), c5(this, "shouldIgnorePairingRequest", (e2) => {
      const { topic: t, requestMethod: s3 } = e2, i4 = this.expectedPairingMethodMap.get(t);
      return !i4 || i4.includes(s3) ? false : !!(i4.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
    }), c5(this, "onSessionProposeRequest", async (e2) => {
      const { topic: t, payload: s3, attestation: i4, encryptedId: r3 } = e2, { params: o4, id: a3 } = s3;
      try {
        const l6 = this.client.core.eventClient.getEvent({ topic: t });
        this.client.events.listenerCount("session_proposal") === 0 && (console.warn("No listener for session_proposal event"), l6 == null ? void 0 : l6.setError(J4.proposal_listener_not_found)), this.isValidConnect(v4({}, s3.params));
        const u2 = o4.expiryTimestamp || ho2(N10.wc_sessionPropose.req.ttl), g3 = v4({ id: a3, pairingTopic: t, expiryTimestamp: u2 }, o4);
        await this.setProposal(a3, g3);
        const h5 = await this.getVerifyContext({ attestationId: i4, hash: si(JSON.stringify(s3)), encryptedId: r3, metadata: g3.proposer.metadata });
        l6 == null ? void 0 : l6.addTrace(q2.emit_session_proposal), this.client.events.emit("session_proposal", { id: a3, params: g3, verifyContext: h5 });
      } catch (l6) {
        await this.sendError({ id: a3, topic: t, error: l6, rpcOpts: N10.wc_sessionPropose.autoReject }), this.client.logger.error(l6);
      }
    }), c5(this, "onSessionProposeResponse", async (e2, t, s3) => {
      const { id: i4 } = t;
      if (isJsonRpcResult(t)) {
        const { result: r3 } = t;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r3 });
        const o4 = this.client.proposal.get(i4);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: o4 });
        const a3 = o4.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a3 });
        const l6 = r3.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: l6 });
        const u2 = await this.client.core.crypto.generateSharedKey(a3, l6);
        this.pendingSessions.set(i4, { sessionTopic: u2, pairingTopic: e2, proposalId: i4, publicKey: a3 });
        const g3 = await this.client.core.relayer.subscribe(u2, { transportType: s3 });
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: g3 }), await this.client.core.pairing.activate({ topic: e2 });
      } else if (isJsonRpcError(t)) {
        await this.client.proposal.delete(i4, de2("USER_DISCONNECTED"));
        const r3 = go2("session_connect", i4);
        if (this.events.listenerCount(r3) === 0) throw new Error(`emitting ${r3} without any listeners, 954`);
        this.events.emit(r3, { error: t.error });
      }
    }), c5(this, "onSessionSettleRequest", async (e2, t) => {
      const { id: s3, params: i4 } = t;
      try {
        this.isValidSessionSettleRequest(i4);
        const { relay: r3, controller: o4, expiry: a3, namespaces: l6, sessionProperties: u2, sessionConfig: g3 } = t.params, h5 = [...this.pendingSessions.values()].find((m3) => m3.sessionTopic === e2);
        if (!h5) return this.client.logger.error(`Pending session not found for topic ${e2}`);
        const d5 = this.client.proposal.get(h5.proposalId), y4 = x6(v4(v4({ topic: e2, relay: r3, expiry: a3, namespaces: l6, acknowledged: true, pairingTopic: h5.pairingTopic, requiredNamespaces: d5.requiredNamespaces, optionalNamespaces: d5.optionalNamespaces, controller: o4.publicKey, self: { publicKey: h5.publicKey, metadata: this.client.metadata }, peer: { publicKey: o4.publicKey, metadata: o4.metadata } }, u2 && { sessionProperties: u2 }), g3 && { sessionConfig: g3 }), { transportType: Q3.relay });
        await this.client.session.set(y4.topic, y4), await this.setExpiry(y4.topic, y4.expiry), await this.client.core.pairing.updateMetadata({ topic: h5.pairingTopic, metadata: y4.peer.metadata }), this.client.events.emit("session_connect", { session: y4 }), this.events.emit(go2("session_connect", h5.proposalId), { session: y4 }), this.pendingSessions.delete(h5.proposalId), this.deleteProposal(h5.proposalId, false), this.cleanupDuplicatePairings(y4), await this.sendResult({ id: t.id, topic: e2, result: true, throwOnFailedPublish: true });
      } catch (r3) {
        await this.sendError({ id: s3, topic: e2, error: r3 }), this.client.logger.error(r3);
      }
    }), c5(this, "onSessionSettleResponse", async (e2, t) => {
      const { id: s3 } = t;
      isJsonRpcResult(t) ? (await this.client.session.update(e2, { acknowledged: true }), this.events.emit(go2("session_approve", s3), {})) : isJsonRpcError(t) && (await this.client.session.delete(e2, de2("USER_DISCONNECTED")), this.events.emit(go2("session_approve", s3), { error: t.error }));
    }), c5(this, "onSessionUpdateRequest", async (e2, t) => {
      const { params: s3, id: i4 } = t;
      try {
        const r3 = `${e2}_session_update`, o4 = Zi.get(r3);
        if (o4 && this.isRequestOutOfSync(o4, i4)) {
          this.client.logger.warn(`Discarding out of sync request - ${i4}`), this.sendError({ id: i4, topic: e2, error: de2("INVALID_UPDATE_REQUEST") });
          return;
        }
        this.isValidUpdate(v4({ topic: e2 }, s3));
        try {
          Zi.set(r3, i4), await this.client.session.update(e2, { namespaces: s3.namespaces }), await this.sendResult({ id: i4, topic: e2, result: true, throwOnFailedPublish: true });
        } catch (a3) {
          throw Zi.delete(r3), a3;
        }
        this.client.events.emit("session_update", { id: i4, topic: e2, params: s3 });
      } catch (r3) {
        await this.sendError({ id: i4, topic: e2, error: r3 }), this.client.logger.error(r3);
      }
    }), c5(this, "isRequestOutOfSync", (e2, t) => t.toString().slice(0, -3) < e2.toString().slice(0, -3)), c5(this, "onSessionUpdateResponse", (e2, t) => {
      const { id: s3 } = t, i4 = go2("session_update", s3);
      if (this.events.listenerCount(i4) === 0) throw new Error(`emitting ${i4} without any listeners`);
      isJsonRpcResult(t) ? this.events.emit(go2("session_update", s3), {}) : isJsonRpcError(t) && this.events.emit(go2("session_update", s3), { error: t.error });
    }), c5(this, "onSessionExtendRequest", async (e2, t) => {
      const { id: s3 } = t;
      try {
        this.isValidExtend({ topic: e2 }), await this.setExpiry(e2, ho2(Y2)), await this.sendResult({ id: s3, topic: e2, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_extend", { id: s3, topic: e2 });
      } catch (i4) {
        await this.sendError({ id: s3, topic: e2, error: i4 }), this.client.logger.error(i4);
      }
    }), c5(this, "onSessionExtendResponse", (e2, t) => {
      const { id: s3 } = t, i4 = go2("session_extend", s3);
      if (this.events.listenerCount(i4) === 0) throw new Error(`emitting ${i4} without any listeners`);
      isJsonRpcResult(t) ? this.events.emit(go2("session_extend", s3), {}) : isJsonRpcError(t) && this.events.emit(go2("session_extend", s3), { error: t.error });
    }), c5(this, "onSessionPingRequest", async (e2, t) => {
      const { id: s3 } = t;
      try {
        this.isValidPing({ topic: e2 }), await this.sendResult({ id: s3, topic: e2, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_ping", { id: s3, topic: e2 });
      } catch (i4) {
        await this.sendError({ id: s3, topic: e2, error: i4 }), this.client.logger.error(i4);
      }
    }), c5(this, "onSessionPingResponse", (e2, t) => {
      const { id: s3 } = t, i4 = go2("session_ping", s3);
      if (this.events.listenerCount(i4) === 0) throw new Error(`emitting ${i4} without any listeners`);
      setTimeout(() => {
        isJsonRpcResult(t) ? this.events.emit(go2("session_ping", s3), {}) : isJsonRpcError(t) && this.events.emit(go2("session_ping", s3), { error: t.error });
      }, 500);
    }), c5(this, "onSessionDeleteRequest", async (e2, t) => {
      const { id: s3 } = t;
      try {
        this.isValidDisconnect({ topic: e2, reason: t.params }), Promise.all([new Promise((i4) => {
          this.client.core.relayer.once(T3.publish, async () => {
            i4(await this.deleteSession({ topic: e2, id: s3 }));
          });
        }), this.sendResult({ id: s3, topic: e2, result: true, throwOnFailedPublish: true }), this.cleanupPendingSentRequestsForTopic({ topic: e2, error: de2("USER_DISCONNECTED") })]).catch((i4) => this.client.logger.error(i4));
      } catch (i4) {
        this.client.logger.error(i4);
      }
    }), c5(this, "onSessionRequest", async (e2) => {
      var t, s3, i4;
      const { topic: r3, payload: o4, attestation: a3, encryptedId: l6, transportType: u2 } = e2, { id: g3, params: h5 } = o4;
      try {
        await this.isValidRequest(v4({ topic: r3 }, h5));
        const d5 = this.client.session.get(r3), y4 = await this.getVerifyContext({ attestationId: a3, hash: si(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", h5, g3))), encryptedId: l6, metadata: d5.peer.metadata, transportType: u2 }), m3 = { id: g3, topic: r3, params: h5, verifyContext: y4 };
        await this.setPendingSessionRequest(m3), u2 === Q3.link_mode && (t = d5.peer.metadata.redirect) != null && t.universal && this.client.core.addLinkModeSupportedApp((s3 = d5.peer.metadata.redirect) == null ? void 0 : s3.universal), (i4 = this.client.signConfig) != null && i4.disableRequestQueue ? this.emitSessionRequest(m3) : (this.addSessionRequestToSessionRequestQueue(m3), this.processSessionRequestQueue());
      } catch (d5) {
        await this.sendError({ id: g3, topic: r3, error: d5 }), this.client.logger.error(d5);
      }
    }), c5(this, "onSessionRequestResponse", (e2, t) => {
      const { id: s3 } = t, i4 = go2("session_request", s3);
      if (this.events.listenerCount(i4) === 0) throw new Error(`emitting ${i4} without any listeners`);
      isJsonRpcResult(t) ? this.events.emit(go2("session_request", s3), { result: t.result }) : isJsonRpcError(t) && this.events.emit(go2("session_request", s3), { error: t.error });
    }), c5(this, "onSessionEventRequest", async (e2, t) => {
      const { id: s3, params: i4 } = t;
      try {
        const r3 = `${e2}_session_event_${i4.event.name}`, o4 = Zi.get(r3);
        if (o4 && this.isRequestOutOfSync(o4, s3)) {
          this.client.logger.info(`Discarding out of sync request - ${s3}`);
          return;
        }
        this.isValidEmit(v4({ topic: e2 }, i4)), this.client.events.emit("session_event", { id: s3, topic: e2, params: i4 }), Zi.set(r3, s3);
      } catch (r3) {
        await this.sendError({ id: s3, topic: e2, error: r3 }), this.client.logger.error(r3);
      }
    }), c5(this, "onSessionAuthenticateResponse", (e2, t) => {
      const { id: s3 } = t;
      this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: e2, payload: t }), isJsonRpcResult(t) ? this.events.emit(go2("session_request", s3), { result: t.result }) : isJsonRpcError(t) && this.events.emit(go2("session_request", s3), { error: t.error });
    }), c5(this, "onSessionAuthenticateRequest", async (e2) => {
      var t;
      const { topic: s3, payload: i4, attestation: r3, encryptedId: o4, transportType: a3 } = e2;
      try {
        const { requester: l6, authPayload: u2, expiryTimestamp: g3 } = i4.params, h5 = await this.getVerifyContext({ attestationId: r3, hash: si(JSON.stringify(i4)), encryptedId: o4, metadata: l6.metadata, transportType: a3 }), d5 = { requester: l6, pairingTopic: s3, id: i4.id, authPayload: u2, verifyContext: h5, expiryTimestamp: g3 };
        await this.setAuthRequest(i4.id, { request: d5, pairingTopic: s3, transportType: a3 }), a3 === Q3.link_mode && (t = l6.metadata.redirect) != null && t.universal && this.client.core.addLinkModeSupportedApp(l6.metadata.redirect.universal), this.client.events.emit("session_authenticate", { topic: s3, params: i4.params, id: i4.id, verifyContext: h5 });
      } catch (l6) {
        this.client.logger.error(l6);
        const u2 = i4.params.requester.publicKey, g3 = await this.client.core.crypto.generateKeyPair(), h5 = this.getAppLinkIfEnabled(i4.params.requester.metadata, a3), d5 = { type: Ie2, receiverPublicKey: u2, senderPublicKey: g3 };
        await this.sendError({ id: i4.id, topic: s3, error: l6, encodeOpts: d5, rpcOpts: N10.wc_sessionAuthenticate.autoReject, appLink: h5 });
      }
    }), c5(this, "addSessionRequestToSessionRequestQueue", (e2) => {
      this.sessionRequestQueue.queue.push(e2);
    }), c5(this, "cleanupAfterResponse", (e2) => {
      this.deletePendingSessionRequest(e2.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
        this.sessionRequestQueue.state = $2.idle, this.processSessionRequestQueue();
      }, (0, import_time5.toMiliseconds)(this.requestQueueDelay));
    }), c5(this, "cleanupPendingSentRequestsForTopic", ({ topic: e2, error: t }) => {
      const s3 = this.client.core.history.pending;
      s3.length > 0 && s3.filter((i4) => i4.topic === e2 && i4.request.method === "wc_sessionRequest").forEach((i4) => {
        const r3 = i4.request.id, o4 = go2("session_request", r3);
        if (this.events.listenerCount(o4) === 0) throw new Error(`emitting ${o4} without any listeners`);
        this.events.emit(go2("session_request", i4.request.id), { error: t });
      });
    }), c5(this, "processSessionRequestQueue", () => {
      if (this.sessionRequestQueue.state === $2.active) {
        this.client.logger.info("session request queue is already active.");
        return;
      }
      const e2 = this.sessionRequestQueue.queue[0];
      if (!e2) {
        this.client.logger.info("session request queue is empty.");
        return;
      }
      try {
        this.sessionRequestQueue.state = $2.active, this.emitSessionRequest(e2);
      } catch (t) {
        this.client.logger.error(t);
      }
    }), c5(this, "emitSessionRequest", (e2) => {
      this.client.events.emit("session_request", e2);
    }), c5(this, "onPairingCreated", (e2) => {
      if (e2.methods && this.expectedPairingMethodMap.set(e2.topic, e2.methods), e2.active) return;
      const t = this.client.proposal.getAll().find((s3) => s3.pairingTopic === e2.topic);
      t && this.onSessionProposeRequest({ topic: e2.topic, payload: formatJsonRpcRequest("wc_sessionPropose", { requiredNamespaces: t.requiredNamespaces, optionalNamespaces: t.optionalNamespaces, relays: t.relays, proposer: t.proposer, sessionProperties: t.sessionProperties }, t.id) });
    }), c5(this, "isValidConnect", async (e2) => {
      if (!Di(e2)) {
        const { message: a3 } = te2("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(e2)}`);
        throw new Error(a3);
      }
      const { pairingTopic: t, requiredNamespaces: s3, optionalNamespaces: i4, sessionProperties: r3, relays: o4 } = e2;
      if (ae(t) || await this.isValidPairingTopic(t), !Ci(o4, true)) {
        const { message: a3 } = te2("MISSING_OR_INVALID", `connect() relays: ${o4}`);
        throw new Error(a3);
      }
      !ae(s3) && qe2(s3) !== 0 && this.validateNamespaces(s3, "requiredNamespaces"), !ae(i4) && qe2(i4) !== 0 && this.validateNamespaces(i4, "optionalNamespaces"), ae(r3) || this.validateSessionProps(r3, "sessionProperties");
    }), c5(this, "validateNamespaces", (e2, t) => {
      const s3 = ji(e2, "connect()", t);
      if (s3) throw new Error(s3.message);
    }), c5(this, "isValidApprove", async (e2) => {
      if (!Di(e2)) throw new Error(te2("MISSING_OR_INVALID", `approve() params: ${e2}`).message);
      const { id: t, namespaces: s3, relayProtocol: i4, sessionProperties: r3 } = e2;
      this.checkRecentlyDeleted(t), await this.isValidProposalId(t);
      const o4 = this.client.proposal.get(t), a3 = Ir2(s3, "approve()");
      if (a3) throw new Error(a3.message);
      const l6 = Nr2(o4.requiredNamespaces, s3, "approve()");
      if (l6) throw new Error(l6.message);
      if (!q(i4, true)) {
        const { message: u2 } = te2("MISSING_OR_INVALID", `approve() relayProtocol: ${i4}`);
        throw new Error(u2);
      }
      ae(r3) || this.validateSessionProps(r3, "sessionProperties");
    }), c5(this, "isValidReject", async (e2) => {
      if (!Di(e2)) {
        const { message: i4 } = te2("MISSING_OR_INVALID", `reject() params: ${e2}`);
        throw new Error(i4);
      }
      const { id: t, reason: s3 } = e2;
      if (this.checkRecentlyDeleted(t), await this.isValidProposalId(t), !Mi(s3)) {
        const { message: i4 } = te2("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s3)}`);
        throw new Error(i4);
      }
    }), c5(this, "isValidSessionSettleRequest", (e2) => {
      if (!Di(e2)) {
        const { message: l6 } = te2("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${e2}`);
        throw new Error(l6);
      }
      const { relay: t, controller: s3, namespaces: i4, expiry: r3 } = e2;
      if (!Ar2(t)) {
        const { message: l6 } = te2("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(l6);
      }
      const o4 = Bi(s3, "onSessionSettleRequest()");
      if (o4) throw new Error(o4.message);
      const a3 = Ir2(i4, "onSessionSettleRequest()");
      if (a3) throw new Error(a3.message);
      if (po2(r3)) {
        const { message: l6 } = te2("EXPIRED", "onSessionSettleRequest()");
        throw new Error(l6);
      }
    }), c5(this, "isValidUpdate", async (e2) => {
      if (!Di(e2)) {
        const { message: a3 } = te2("MISSING_OR_INVALID", `update() params: ${e2}`);
        throw new Error(a3);
      }
      const { topic: t, namespaces: s3 } = e2;
      this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);
      const i4 = this.client.session.get(t), r3 = Ir2(s3, "update()");
      if (r3) throw new Error(r3.message);
      const o4 = Nr2(i4.requiredNamespaces, s3, "update()");
      if (o4) throw new Error(o4.message);
    }), c5(this, "isValidExtend", async (e2) => {
      if (!Di(e2)) {
        const { message: s3 } = te2("MISSING_OR_INVALID", `extend() params: ${e2}`);
        throw new Error(s3);
      }
      const { topic: t } = e2;
      this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);
    }), c5(this, "isValidRequest", async (e2) => {
      if (!Di(e2)) {
        const { message: a3 } = te2("MISSING_OR_INVALID", `request() params: ${e2}`);
        throw new Error(a3);
      }
      const { topic: t, request: s3, chainId: i4, expiry: r3 } = e2;
      this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);
      const { namespaces: o4 } = this.client.session.get(t);
      if (!Fi(o4, i4)) {
        const { message: a3 } = te2("MISSING_OR_INVALID", `request() chainId: ${i4}`);
        throw new Error(a3);
      }
      if (!Vi(s3)) {
        const { message: a3 } = te2("MISSING_OR_INVALID", `request() ${JSON.stringify(s3)}`);
        throw new Error(a3);
      }
      if (!qi(o4, i4, s3.method)) {
        const { message: a3 } = te2("MISSING_OR_INVALID", `request() method: ${s3.method}`);
        throw new Error(a3);
      }
      if (r3 && !Ji(r3, Ee4)) {
        const { message: a3 } = te2("MISSING_OR_INVALID", `request() expiry: ${r3}. Expiry must be a number (in seconds) between ${Ee4.min} and ${Ee4.max}`);
        throw new Error(a3);
      }
    }), c5(this, "isValidRespond", async (e2) => {
      var t;
      if (!Di(e2)) {
        const { message: r3 } = te2("MISSING_OR_INVALID", `respond() params: ${e2}`);
        throw new Error(r3);
      }
      const { topic: s3, response: i4 } = e2;
      try {
        await this.isValidSessionTopic(s3);
      } catch (r3) {
        throw (t = e2 == null ? void 0 : e2.response) != null && t.id && this.cleanupAfterResponse(e2), r3;
      }
      if (!Hi(i4)) {
        const { message: r3 } = te2("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i4)}`);
        throw new Error(r3);
      }
    }), c5(this, "isValidPing", async (e2) => {
      if (!Di(e2)) {
        const { message: s3 } = te2("MISSING_OR_INVALID", `ping() params: ${e2}`);
        throw new Error(s3);
      }
      const { topic: t } = e2;
      await this.isValidSessionOrPairingTopic(t);
    }), c5(this, "isValidEmit", async (e2) => {
      if (!Di(e2)) {
        const { message: o4 } = te2("MISSING_OR_INVALID", `emit() params: ${e2}`);
        throw new Error(o4);
      }
      const { topic: t, event: s3, chainId: i4 } = e2;
      await this.isValidSessionTopic(t);
      const { namespaces: r3 } = this.client.session.get(t);
      if (!Fi(r3, i4)) {
        const { message: o4 } = te2("MISSING_OR_INVALID", `emit() chainId: ${i4}`);
        throw new Error(o4);
      }
      if (!Ki(s3)) {
        const { message: o4 } = te2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s3)}`);
        throw new Error(o4);
      }
      if (!Gi(r3, i4, s3.name)) {
        const { message: o4 } = te2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s3)}`);
        throw new Error(o4);
      }
    }), c5(this, "isValidDisconnect", async (e2) => {
      if (!Di(e2)) {
        const { message: s3 } = te2("MISSING_OR_INVALID", `disconnect() params: ${e2}`);
        throw new Error(s3);
      }
      const { topic: t } = e2;
      await this.isValidSessionOrPairingTopic(t);
    }), c5(this, "isValidAuthenticate", (e2) => {
      const { chains: t, uri: s3, domain: i4, nonce: r3 } = e2;
      if (!Array.isArray(t) || t.length === 0) throw new Error("chains is required and must be a non-empty array");
      if (!q(s3, false)) throw new Error("uri is required parameter");
      if (!q(i4, false)) throw new Error("domain is required parameter");
      if (!q(r3, false)) throw new Error("nonce is required parameter");
      if ([...new Set(t.map((a3) => Ye2(a3).namespace))].length > 1) throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
      const { namespace: o4 } = Ye2(t[0]);
      if (o4 !== "eip155") throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
    }), c5(this, "getVerifyContext", async (e2) => {
      const { attestationId: t, hash: s3, encryptedId: i4, metadata: r3, transportType: o4 } = e2, a3 = { verified: { verifyUrl: r3.verifyUrl || le3, validation: "UNKNOWN", origin: r3.url || "" } };
      try {
        if (o4 === Q3.link_mode) {
          const u2 = this.getAppLinkIfEnabled(r3, o4);
          return a3.verified.validation = u2 && new URL(u2).origin === new URL(r3.url).origin ? "VALID" : "INVALID", a3;
        }
        const l6 = await this.client.core.verify.resolve({ attestationId: t, hash: s3, encryptedId: i4, verifyUrl: r3.verifyUrl });
        l6 && (a3.verified.origin = l6.origin, a3.verified.isScam = l6.isScam, a3.verified.validation = l6.origin === new URL(r3.url).origin ? "VALID" : "INVALID");
      } catch (l6) {
        this.client.logger.warn(l6);
      }
      return this.client.logger.debug(`Verify context: ${JSON.stringify(a3)}`), a3;
    }), c5(this, "validateSessionProps", (e2, t) => {
      Object.values(e2).forEach((s3) => {
        if (!q(s3, false)) {
          const { message: i4 } = te2("MISSING_OR_INVALID", `${t} must be in Record<string, string> format. Received: ${JSON.stringify(s3)}`);
          throw new Error(i4);
        }
      });
    }), c5(this, "getPendingAuthRequest", (e2) => {
      const t = this.client.auth.requests.get(e2);
      return typeof t == "object" ? t : void 0;
    }), c5(this, "addToRecentlyDeleted", (e2, t) => {
      if (this.recentlyDeletedMap.set(e2, t), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {
        let s3 = 0;
        const i4 = this.recentlyDeletedLimit / 2;
        for (const r3 of this.recentlyDeletedMap.keys()) {
          if (s3++ >= i4) break;
          this.recentlyDeletedMap.delete(r3);
        }
      }
    }), c5(this, "checkRecentlyDeleted", (e2) => {
      const t = this.recentlyDeletedMap.get(e2);
      if (t) {
        const { message: s3 } = te2("MISSING_OR_INVALID", `Record was recently deleted - ${t}: ${e2}`);
        throw new Error(s3);
      }
    }), c5(this, "isLinkModeEnabled", (e2, t) => {
      var s3, i4, r3, o4, a3, l6, u2, g3, h5;
      return !e2 || t !== Q3.link_mode ? false : ((i4 = (s3 = this.client.metadata) == null ? void 0 : s3.redirect) == null ? void 0 : i4.linkMode) === true && ((o4 = (r3 = this.client.metadata) == null ? void 0 : r3.redirect) == null ? void 0 : o4.universal) !== void 0 && ((l6 = (a3 = this.client.metadata) == null ? void 0 : a3.redirect) == null ? void 0 : l6.universal) !== "" && ((u2 = e2 == null ? void 0 : e2.redirect) == null ? void 0 : u2.universal) !== void 0 && ((g3 = e2 == null ? void 0 : e2.redirect) == null ? void 0 : g3.universal) !== "" && ((h5 = e2 == null ? void 0 : e2.redirect) == null ? void 0 : h5.linkMode) === true && this.client.core.linkModeSupportedApps.includes(e2.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < "u";
    }), c5(this, "getAppLinkIfEnabled", (e2, t) => {
      var s3;
      return this.isLinkModeEnabled(e2, t) ? (s3 = e2 == null ? void 0 : e2.redirect) == null ? void 0 : s3.universal : void 0;
    }), c5(this, "handleLinkModeMessage", ({ url: e2 }) => {
      if (!e2 || !e2.includes("wc_ev") || !e2.includes("topic")) return;
      const t = bo2(e2, "topic") || "", s3 = decodeURIComponent(bo2(e2, "wc_ev") || ""), i4 = this.client.session.keys.includes(t);
      i4 && this.client.session.update(t, { transportType: Q3.link_mode }), this.client.core.dispatchEnvelope({ topic: t, message: s3, sessionExists: i4 });
    }), c5(this, "registerLinkModeListeners", async () => {
      var e2;
      if (Eo2() || ne() && (e2 = this.client.metadata.redirect) != null && e2.linkMode) {
        const t = global == null ? void 0 : global.Linking;
        if (typeof t < "u") {
          t.addEventListener("url", this.handleLinkModeMessage, this.client.name);
          const s3 = await t.getInitialURL();
          s3 && setTimeout(() => {
            this.handleLinkModeMessage({ url: s3 });
          }, 50);
        }
      }
    }), c5(this, "shouldSetTVF", (e2, t) => {
      if (!t || e2 !== "wc_sessionRequest") return false;
      const { request: s3 } = t;
      return Object.keys(Ke4).includes(s3.method);
    }), c5(this, "getTVFParams", (e2, t, s3) => {
      var i4, r3;
      try {
        const o4 = t.request.method, a3 = this.extractTxHashesFromResult(o4, s3);
        return x6(v4({ correlationId: e2, rpcMethods: [o4], chainId: t.chainId }, this.isValidContractData(t.request.params) && { contractAddresses: [(r3 = (i4 = t.request.params) == null ? void 0 : i4[0]) == null ? void 0 : r3.to] }), { txHashes: a3 });
      } catch (o4) {
        this.client.logger.warn("Error getting TVF params", o4);
      }
      return {};
    }), c5(this, "isValidContractData", (e2) => {
      var t;
      if (!e2) return false;
      try {
        const s3 = (e2 == null ? void 0 : e2.data) || ((t = e2 == null ? void 0 : e2[0]) == null ? void 0 : t.data);
        if (!s3.startsWith("0x")) return false;
        const i4 = s3.slice(2);
        return /^[0-9a-fA-F]*$/.test(i4) ? i4.length % 2 === 0 : false;
      } catch {
      }
      return false;
    }), c5(this, "extractTxHashesFromResult", (e2, t) => {
      try {
        const s3 = Ke4[e2];
        if (typeof t == "string") return [t];
        const i4 = t[s3.key];
        if ($e2(i4)) return i4;
        if (typeof i4 == "string") return [i4];
      } catch (s3) {
        this.client.logger.warn("Error extracting tx hashes from result", s3);
      }
      return [];
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: n5 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(n5);
    }
  }
  async confirmOnlineStateOrThrow() {
    await this.client.core.relayer.confirmOnlineStateOrThrow();
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(T3.message, (n5) => {
      !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(n5) : this.onRelayMessage(n5);
    });
  }
  async onRelayMessage(n5) {
    const { topic: e2, message: t, attestation: s3, transportType: i4 } = n5, { publicKey: r3 } = this.client.auth.authKeys.keys.includes(le4) ? this.client.auth.authKeys.get(le4) : { responseTopic: void 0, publicKey: void 0 }, o4 = await this.client.core.crypto.decode(e2, t, { receiverPublicKey: r3, encoding: i4 === Q3.link_mode ? Qs : At });
    try {
      isJsonRpcRequest(o4) ? (this.client.core.history.set(e2, o4), this.onRelayEventRequest({ topic: e2, payload: o4, attestation: s3, transportType: i4, encryptedId: si(t) })) : isJsonRpcResponse(o4) ? (await this.client.core.history.resolve(o4), await this.onRelayEventResponse({ topic: e2, payload: o4, transportType: i4 }), this.client.core.history.delete(e2, o4.id)) : this.onRelayEventUnknownPayload({ topic: e2, payload: o4, transportType: i4 });
    } catch (a3) {
      this.client.logger.error(a3);
    }
  }
  registerExpirerEvents() {
    this.client.core.expirer.on(M4.expired, async (n5) => {
      const { topic: e2, id: t } = lo2(n5.target);
      if (t && this.client.pendingRequest.keys.includes(t)) return await this.deletePendingSessionRequest(t, te2("EXPIRED"), true);
      if (t && this.client.auth.requests.keys.includes(t)) return await this.deletePendingAuthRequest(t, te2("EXPIRED"), true);
      e2 ? this.client.session.keys.includes(e2) && (await this.deleteSession({ topic: e2, expirerHasDeleted: true }), this.client.events.emit("session_expire", { topic: e2 })) : t && (await this.deleteProposal(t, true), this.client.events.emit("proposal_expire", { id: t }));
    });
  }
  registerPairingEvents() {
    this.client.core.pairing.events.on(se2.create, (n5) => this.onPairingCreated(n5)), this.client.core.pairing.events.on(se2.delete, (n5) => {
      this.addToRecentlyDeleted(n5.topic, "pairing");
    });
  }
  isValidPairingTopic(n5) {
    if (!q(n5, false)) {
      const { message: e2 } = te2("MISSING_OR_INVALID", `pairing topic should be a string: ${n5}`);
      throw new Error(e2);
    }
    if (!this.client.core.pairing.pairings.keys.includes(n5)) {
      const { message: e2 } = te2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${n5}`);
      throw new Error(e2);
    }
    if (po2(this.client.core.pairing.pairings.get(n5).expiry)) {
      const { message: e2 } = te2("EXPIRED", `pairing topic: ${n5}`);
      throw new Error(e2);
    }
  }
  async isValidSessionTopic(n5) {
    if (!q(n5, false)) {
      const { message: e2 } = te2("MISSING_OR_INVALID", `session topic should be a string: ${n5}`);
      throw new Error(e2);
    }
    if (this.checkRecentlyDeleted(n5), !this.client.session.keys.includes(n5)) {
      const { message: e2 } = te2("NO_MATCHING_KEY", `session topic doesn't exist: ${n5}`);
      throw new Error(e2);
    }
    if (po2(this.client.session.get(n5).expiry)) {
      await this.deleteSession({ topic: n5 });
      const { message: e2 } = te2("EXPIRED", `session topic: ${n5}`);
      throw new Error(e2);
    }
    if (!this.client.core.crypto.keychain.has(n5)) {
      const { message: e2 } = te2("MISSING_OR_INVALID", `session topic does not exist in keychain: ${n5}`);
      throw await this.deleteSession({ topic: n5 }), new Error(e2);
    }
  }
  async isValidSessionOrPairingTopic(n5) {
    if (this.checkRecentlyDeleted(n5), this.client.session.keys.includes(n5)) await this.isValidSessionTopic(n5);
    else if (this.client.core.pairing.pairings.keys.includes(n5)) this.isValidPairingTopic(n5);
    else if (q(n5, false)) {
      const { message: e2 } = te2("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${n5}`);
      throw new Error(e2);
    } else {
      const { message: e2 } = te2("MISSING_OR_INVALID", `session or pairing topic should be a string: ${n5}`);
      throw new Error(e2);
    }
  }
  async isValidProposalId(n5) {
    if (!ki(n5)) {
      const { message: e2 } = te2("MISSING_OR_INVALID", `proposal id should be a number: ${n5}`);
      throw new Error(e2);
    }
    if (!this.client.proposal.keys.includes(n5)) {
      const { message: e2 } = te2("NO_MATCHING_KEY", `proposal id doesn't exist: ${n5}`);
      throw new Error(e2);
    }
    if (po2(this.client.proposal.get(n5).expiryTimestamp)) {
      await this.deleteProposal(n5);
      const { message: e2 } = te2("EXPIRED", `proposal id: ${n5}`);
      throw new Error(e2);
    }
  }
};
var Ns2 = class extends Ci2 {
  constructor(n5, e2) {
    super(n5, e2, pt2, me4), this.core = n5, this.logger = e2;
  }
};
var Rt4 = class extends Ci2 {
  constructor(n5, e2) {
    super(n5, e2, ht3, me4), this.core = n5, this.logger = e2;
  }
};
var Ps2 = class extends Ci2 {
  constructor(n5, e2) {
    super(n5, e2, ut3, me4, (t) => t.id), this.core = n5, this.logger = e2;
  }
};
var Os2 = class extends Ci2 {
  constructor(n5, e2) {
    super(n5, e2, mt3, ce2, () => le4), this.core = n5, this.logger = e2;
  }
};
var bs2 = class extends Ci2 {
  constructor(n5, e2) {
    super(n5, e2, _t4, ce2), this.core = n5, this.logger = e2;
  }
};
var As2 = class extends Ci2 {
  constructor(n5, e2) {
    super(n5, e2, Et4, ce2, (t) => t.id), this.core = n5, this.logger = e2;
  }
};
var Cs2 = Object.defineProperty;
var xs2 = (S4, n5, e2) => n5 in S4 ? Cs2(S4, n5, { enumerable: true, configurable: true, writable: true, value: e2 }) : S4[n5] = e2;
var Ge4 = (S4, n5, e2) => xs2(S4, typeof n5 != "symbol" ? n5 + "" : n5, e2);
var Vs2 = class {
  constructor(n5, e2) {
    this.core = n5, this.logger = e2, Ge4(this, "authKeys"), Ge4(this, "pairingTopics"), Ge4(this, "requests"), this.authKeys = new Os2(this.core, this.logger), this.pairingTopics = new bs2(this.core, this.logger), this.requests = new As2(this.core, this.logger);
  }
  async init() {
    await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
  }
};
var Ds2 = Object.defineProperty;
var Ls3 = (S4, n5, e2) => n5 in S4 ? Ds2(S4, n5, { enumerable: true, configurable: true, writable: true, value: e2 }) : S4[n5] = e2;
var _4 = (S4, n5, e2) => Ls3(S4, typeof n5 != "symbol" ? n5 + "" : n5, e2);
var Se3 = class _Se extends J {
  constructor(n5) {
    super(n5), _4(this, "protocol", De3), _4(this, "version", Le4), _4(this, "name", _e4.name), _4(this, "metadata"), _4(this, "core"), _4(this, "logger"), _4(this, "events", new import_events8.EventEmitter()), _4(this, "engine"), _4(this, "session"), _4(this, "proposal"), _4(this, "pendingRequest"), _4(this, "auth"), _4(this, "signConfig"), _4(this, "on", (t, s3) => this.events.on(t, s3)), _4(this, "once", (t, s3) => this.events.once(t, s3)), _4(this, "off", (t, s3) => this.events.off(t, s3)), _4(this, "removeListener", (t, s3) => this.events.removeListener(t, s3)), _4(this, "removeAllListeners", (t) => this.events.removeAllListeners(t)), _4(this, "connect", async (t) => {
      try {
        return await this.engine.connect(t);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), _4(this, "pair", async (t) => {
      try {
        return await this.engine.pair(t);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), _4(this, "approve", async (t) => {
      try {
        return await this.engine.approve(t);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), _4(this, "reject", async (t) => {
      try {
        return await this.engine.reject(t);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), _4(this, "update", async (t) => {
      try {
        return await this.engine.update(t);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), _4(this, "extend", async (t) => {
      try {
        return await this.engine.extend(t);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), _4(this, "request", async (t) => {
      try {
        return await this.engine.request(t);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), _4(this, "respond", async (t) => {
      try {
        return await this.engine.respond(t);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), _4(this, "ping", async (t) => {
      try {
        return await this.engine.ping(t);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), _4(this, "emit", async (t) => {
      try {
        return await this.engine.emit(t);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), _4(this, "disconnect", async (t) => {
      try {
        return await this.engine.disconnect(t);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), _4(this, "find", (t) => {
      try {
        return this.engine.find(t);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), _4(this, "getPendingSessionRequests", () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (t) {
        throw this.logger.error(t.message), t;
      }
    }), _4(this, "authenticate", async (t, s3) => {
      try {
        return await this.engine.authenticate(t, s3);
      } catch (i4) {
        throw this.logger.error(i4.message), i4;
      }
    }), _4(this, "formatAuthMessage", (t) => {
      try {
        return this.engine.formatAuthMessage(t);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), _4(this, "approveSessionAuthenticate", async (t) => {
      try {
        return await this.engine.approveSessionAuthenticate(t);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), _4(this, "rejectSessionAuthenticate", async (t) => {
      try {
        return await this.engine.rejectSessionAuthenticate(t);
      } catch (s3) {
        throw this.logger.error(s3.message), s3;
      }
    }), this.name = (n5 == null ? void 0 : n5.name) || _e4.name, this.metadata = (n5 == null ? void 0 : n5.metadata) || Yr2(), this.signConfig = n5 == null ? void 0 : n5.signConfig;
    const e2 = typeof (n5 == null ? void 0 : n5.logger) < "u" && typeof (n5 == null ? void 0 : n5.logger) != "string" ? n5.logger : (0, import_pino2.default)(k2({ level: (n5 == null ? void 0 : n5.logger) || _e4.logger }));
    this.core = (n5 == null ? void 0 : n5.core) || new co3(n5), this.logger = E2(e2, this.name), this.session = new Rt4(this.core, this.logger), this.proposal = new Ns2(this.core, this.logger), this.pendingRequest = new Ps2(this.core, this.logger), this.engine = new Ts2(this), this.auth = new Vs2(this.core, this.logger);
  }
  static async init(n5) {
    const e2 = new _Se(n5);
    return await e2.initialize(), e2;
  }
  get context() {
    return y2(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info("SignClient Initialization Success"), setTimeout(() => {
        this.engine.processRelayMessageCache();
      }, (0, import_time5.toMiliseconds)(import_time5.ONE_SECOND));
    } catch (n5) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(n5.message), n5;
    }
  }
};

// node_modules/@web3auth/wallet-connect-v2-adapter/dist/lib.esm/walletConnectV2adapter.js
var import_bs584 = __toESM(require_bs58());
var import_deepmerge = __toESM(require_cjs());

// node_modules/@web3auth/solana-provider/dist/lib.esm/rpc/solanaRpcMiddlewares.js
function createGetAccountsMiddleware({
  getAccounts: getAccounts2
}) {
  return createAsyncMiddleware(async (request, response, next) => {
    const {
      method
    } = request;
    if (method !== "getAccounts") return next();
    if (!getAccounts2) throw new Error("WalletMiddleware - opts.getAccounts not provided");
    const accounts = await getAccounts2(request);
    response.result = accounts;
    return void 0;
  });
}
function createRequestAccountsMiddleware({
  requestAccounts
}) {
  return createAsyncMiddleware(async (request, response, next) => {
    const {
      method
    } = request;
    if (method !== "requestAccounts") return next();
    if (!requestAccounts) throw new Error("WalletMiddleware - opts.requestAccounts not provided");
    const accounts = await requestAccounts(request);
    response.result = accounts;
    return void 0;
  });
}
function createGenericJRPCMiddleware(targetMethod, handler) {
  return createAsyncMiddleware(async (request, response, next) => {
    const {
      method
    } = request;
    if (method !== targetMethod) return next();
    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);
    const result = await handler(request);
    response.result = result;
    return void 0;
  });
}
function createSolanaMiddleware(providerHandlers) {
  const {
    getAccounts: getAccounts2,
    requestAccounts,
    signTransaction: signTransaction2,
    signAndSendTransaction,
    signAllTransactions,
    signMessage: signMessage2,
    getPrivateKey,
    getSecretKey,
    getPublicKey
  } = providerHandlers;
  return mergeMiddleware([createRequestAccountsMiddleware({
    requestAccounts
  }), createGetAccountsMiddleware({
    getAccounts: getAccounts2
  }), createGenericJRPCMiddleware("signTransaction", signTransaction2), createGenericJRPCMiddleware("signAndSendTransaction", signAndSendTransaction), createGenericJRPCMiddleware("signAllTransactions", signAllTransactions), createGenericJRPCMiddleware("signMessage", signMessage2), createGenericJRPCMiddleware("solanaPrivateKey", getPrivateKey), createGenericJRPCMiddleware("private_key", getPrivateKey), createGenericJRPCMiddleware("public_key", getPublicKey), createGenericJRPCMiddleware("solanaPublicKey", getPublicKey), createGenericJRPCMiddleware("solanaSecretKey", getSecretKey)]);
}
function createChainSwitchMiddleware2({
  addNewChainConfig,
  switchSolanaChain
}) {
  return mergeMiddleware([createGenericJRPCMiddleware("addSolanaChain", addNewChainConfig), createGenericJRPCMiddleware("switchSolanaChain", switchSolanaChain)]);
}
function createAccountMiddleware({
  updatePrivatekey
}) {
  return mergeMiddleware([createGenericJRPCMiddleware("updateAccount", updatePrivatekey)]);
}

// node_modules/@web3auth/solana-provider/dist/lib.esm/rpc/JrpcClient.js
function createChainIdMiddleware(chainId) {
  return (req, res, next, end) => {
    if (req.method === "solana_chainId") {
      res.result = chainId;
      return end();
    }
    return next();
  };
}
function createProviderConfigMiddleware(providerConfig) {
  return (req, res, next, end) => {
    if (req.method === "solana_provider_config") {
      res.result = providerConfig;
      return end();
    }
    return next();
  };
}
function createConfigMiddleware(providerConfig) {
  const {
    chainId
  } = providerConfig;
  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);
}
function createJsonRpcClient2(providerConfig) {
  const {
    rpcTarget
  } = providerConfig;
  const fetchMiddleware = createFetchMiddleware({
    rpcTarget
  });
  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);
  return {
    networkMiddleware,
    fetchMiddleware
  };
}

// node_modules/@web3auth/solana-provider/dist/lib.esm/providers/injectedProviders/base/providerHandlers.js
var import_bs58 = __toESM(require_bs582());

// node_modules/@web3auth/solana-provider/dist/lib.esm/providers/privateKeyProvider/solanaPrivateKeyUtils.js
var import_tweetnacl_js = __toESM(require_nacl_fast());
var import_bs582 = __toESM(require_bs582());
async function getProviderHandlers({
  privKey,
  keyExportEnabled,
  getProviderEngineProxy
}) {
  const keyPairGenerator = () => {
    return Keypair.fromSecretKey(Buffer.from(privKey, "hex"));
  };
  if (typeof privKey !== "string") throw WalletInitializationError.invalidParams("privKey must be a string");
  const keyPair = keyPairGenerator();
  const providerHandlers = {
    requestAccounts: async () => {
      return [keyPair.publicKey.toBase58()];
    },
    getAccounts: async () => [keyPair.publicKey.toBase58()],
    getPublicKey: async () => keyPair.publicKey.toBase58(),
    getPrivateKey: async () => {
      if (!keyExportEnabled) {
        throw providerErrors.custom({
          message: "Private key export is disabled",
          code: 4902
        });
      }
      return privKey;
    },
    getSecretKey: async () => import_bs582.default.encode(keyPair.secretKey),
    signTransaction: async (req) => {
      var _req$params;
      if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message)) {
        throw rpcErrors.invalidParams("message");
      }
      const transaction = req.params.message;
      if (transaction.version !== void 0 || transaction instanceof VersionedTransaction) {
        transaction.sign([keyPair]);
      } else {
        transaction.partialSign(keyPair);
      }
      return transaction;
    },
    signMessage: async (req) => {
      var _req$params2;
      if (!((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message)) {
        throw rpcErrors.invalidParams("message");
      }
      const signedMsg = import_tweetnacl_js.default.sign.detached(req.params.message, keyPair.secretKey);
      return signedMsg;
    },
    signAndSendTransaction: async (req) => {
      var _req$params3;
      if (!((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message)) {
        throw rpcErrors.invalidParams("message");
      }
      const _providerEngineProxy = getProviderEngineProxy();
      if (!_providerEngineProxy) throw providerErrors.custom({
        message: "Provider is not initialized",
        code: 4902
      });
      const transaction = req.params.message;
      if (transaction.version !== void 0 || transaction instanceof VersionedTransaction) {
        transaction.sign([keyPair]);
      } else {
        transaction.partialSign(keyPair);
      }
      const sig = await _providerEngineProxy.request({
        method: "sendTransaction",
        params: [Buffer.from(transaction.serialize()).toString("base64"), {
          encoding: "base64",
          preflightCommitment: "confirmed"
        }]
      });
      return {
        signature: sig
      };
    },
    signAllTransactions: async (req) => {
      var _req$params4, _req$params5, _req$params6;
      if (!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length)) {
        throw rpcErrors.invalidParams("message");
      }
      const txns = (_req$params6 = req.params) === null || _req$params6 === void 0 ? void 0 : _req$params6.message;
      for (const tx of txns || []) {
        const transaction = tx;
        if (transaction.version !== void 0 || transaction instanceof VersionedTransaction) {
          transaction.sign([keyPair]);
        } else {
          transaction.partialSign(keyPair);
        }
      }
      return txns;
    }
  };
  return providerHandlers;
}

// node_modules/@web3auth/solana-provider/dist/lib.esm/providers/privateKeyProvider/solanaPrivateKeyProvider.js
var _SolanaPrivateKeyProvider;
var SolanaPrivateKeyProvider = class extends BaseProvider {
  constructor({
    config,
    state
  }) {
    super({
      config,
      state
    });
    _defineProperty(this, "PROVIDER_CHAIN_NAMESPACE", CHAIN_NAMESPACES.SOLANA);
  }
  async enable() {
    if (!this.state.privateKey) throw providerErrors.custom({
      message: "Private key is not found in state, plz pass it in constructor state param",
      code: 4902
    });
    await this.setupProvider(this.state.privateKey);
    return this._providerEngineProxy.request({
      method: "eth_accounts"
    });
  }
  getEd25519Key(privateKey) {
    return getED25519Key(privateKey).sk.toString("hex").padStart(128, "0");
  }
  async setupProvider(privKey) {
    const {
      chainNamespace
    } = this.config.chainConfig;
    if (chainNamespace !== this.PROVIDER_CHAIN_NAMESPACE) throw WalletInitializationError.incompatibleChainNameSpace("Invalid chain namespace");
    const providerHandlers = await getProviderHandlers({
      privKey,
      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),
      keyExportEnabled: this.config.keyExportEnabled
    });
    const solanaMiddleware = createSolanaMiddleware(providerHandlers);
    const engine = new JRPCEngine();
    const {
      networkMiddleware
    } = createJsonRpcClient2(this.config.chainConfig);
    engine.push(this.getChainSwitchMiddleware());
    engine.push(this.getAccountMiddleware());
    engine.push(solanaMiddleware);
    engine.push(networkMiddleware);
    const provider = providerFromEngine(engine);
    this.updateProviderEngineProxy(provider);
    await this.lookupNetwork();
  }
  async updateAccount(params) {
    if (!this._providerEngineProxy) throw providerErrors.custom({
      message: "Provider is not initialized",
      code: 4902
    });
    const existingKey = await this._providerEngineProxy.request({
      method: "solanaPrivateKey"
    });
    if (existingKey !== params.privateKey) {
      await this.setupProvider(params.privateKey);
      const accounts = await this._providerEngineProxy.request({
        method: "requestAccounts"
      });
      this.emit("accountsChanged", accounts);
    }
  }
  async switchChain(params) {
    if (!this._providerEngineProxy) throw providerErrors.custom({
      message: "Provider is not initialized",
      code: 4902
    });
    const chainConfig = this.getChainConfig(params.chainId);
    this.update({
      chainId: "loading"
    });
    this.configure({
      chainConfig
    });
    const privKey = await this._providerEngineProxy.request({
      method: "solanaPrivateKey"
    });
    await this.setupProvider(privKey);
  }
  async lookupNetwork() {
    if (!this._providerEngineProxy) throw providerErrors.custom({
      message: "Provider is not initialized",
      code: 4902
    });
    const health = await this._providerEngineProxy.request({
      method: "getHealth",
      params: []
    });
    const {
      chainConfig
    } = this.config;
    if (health !== "ok") throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);
    this.update({
      chainId: chainConfig.chainId
    });
    if (this.state.chainId !== chainConfig.chainId) {
      this.emit("chainChanged", this.state.chainId);
      this.emit("connect", {
        chainId: this.state.chainId
      });
    }
    return this.state.chainId;
  }
  getChainSwitchMiddleware() {
    const chainSwitchHandlers = {
      addNewChainConfig: async (req) => {
        if (!req.params) throw rpcErrors.invalidParams("Missing request params");
        const {
          chainId,
          chainName,
          rpcUrls,
          blockExplorerUrls,
          nativeCurrency,
          iconUrls
        } = req.params;
        if (!chainId) throw rpcErrors.invalidParams("Missing chainId in chainParams");
        if (!rpcUrls || rpcUrls.length === 0) throw rpcErrors.invalidParams("Missing rpcUrls in chainParams");
        if (!nativeCurrency) throw rpcErrors.invalidParams("Missing nativeCurrency in chainParams");
        this.addChain({
          chainNamespace: CHAIN_NAMESPACES.SOLANA,
          chainId,
          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || "SOL",
          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || "Solana",
          displayName: chainName,
          rpcTarget: rpcUrls[0],
          blockExplorerUrl: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || "",
          decimals: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.decimals) || 9,
          logo: (iconUrls === null || iconUrls === void 0 ? void 0 : iconUrls[0]) || "https://images.toruswallet.io/sol.svg"
        });
      },
      switchSolanaChain: async (req) => {
        if (!req.params) throw rpcErrors.invalidParams("Missing request params");
        if (!req.params.chainId) throw rpcErrors.invalidParams("Missing chainId");
        await this.switchChain(req.params);
      }
    };
    const chainSwitchMiddleware = createChainSwitchMiddleware2(chainSwitchHandlers);
    return chainSwitchMiddleware;
  }
  getAccountMiddleware() {
    const accountHandlers = {
      updatePrivatekey: async (req) => {
        if (!req.params) throw rpcErrors.invalidParams("Missing request params");
        if (!req.params.privateKey) throw rpcErrors.invalidParams("Missing privateKey");
        const {
          privateKey
        } = req.params;
        await this.updateAccount({
          privateKey
        });
      }
    };
    return createAccountMiddleware(accountHandlers);
  }
};
_SolanaPrivateKeyProvider = SolanaPrivateKeyProvider;
_defineProperty(SolanaPrivateKeyProvider, "getProviderInstance", async (params) => {
  const providerFactory = new _SolanaPrivateKeyProvider({
    config: {
      chainConfig: params.chainConfig
    }
  });
  await providerFactory.setupProvider(params.privKey);
  return providerFactory;
});

// node_modules/@web3auth/wallet-connect-v2-adapter/dist/lib.esm/walletConnectV2Utils.js
var import_bs583 = __toESM(require_bs58());
async function getLastActiveSession(signClient) {
  if (signClient.session.length) {
    const lastKeyIndex = signClient.session.keys.length - 1;
    return signClient.session.get(signClient.session.keys[lastKeyIndex]);
  }
  return null;
}
function isMobileDevice() {
  return /Mobi|Android|iPhone|iPad|iPod|Opera Mini|IEMobile|WPDesktop/i.test(window.navigator.userAgent);
}
function isSolanaChain(chainId) {
  return chainId.startsWith("solana:");
}
async function sendJrpcRequest(signClient, chainId, method, params) {
  const session = await getLastActiveSession(signClient);
  if (!session) {
    throw providerErrors.disconnected();
  }
  if (typeof window !== "undefined" && isMobileDevice()) {
    if (session.peer.metadata.redirect && session.peer.metadata.redirect.native) {
      window.open(session.peer.metadata.redirect.native, "_blank");
    }
  }
  return signClient.request({
    topic: session.topic,
    chainId,
    request: {
      method,
      params: isSolanaChain(chainId) ? _objectSpread2(_objectSpread2({}, params), {}, {
        pubkey: session.self.publicKey
      }) : params
    }
  });
}
async function getAccounts(signClient) {
  const session = await getLastActiveSession(signClient);
  if (!session) {
    throw providerErrors.disconnected();
  }
  const accounts = Hr2(session.namespaces);
  if (accounts && accounts.length) {
    return [...new Set(accounts.map((add) => {
      return Xe2(add).address;
    }))];
  }
  throw WalletLoginError.connectionError("Failed to get accounts");
}
function getEthProviderHandlers({
  connector,
  chainId
}) {
  return {
    getPrivateKey: async () => {
      throw rpcErrors.methodNotSupported();
    },
    getPublicKey: async () => {
      throw rpcErrors.methodNotSupported();
    },
    getAccounts: async (_5) => {
      return getAccounts(connector);
    },
    processTransaction: async (txParams, _5) => {
      const methodRes = await sendJrpcRequest(connector, `eip155:${chainId}`, "eth_sendTransaction", [txParams]);
      return methodRes;
    },
    processSignTransaction: async (txParams, _5) => {
      const methodRes = await sendJrpcRequest(connector, `eip155:${chainId}`, "eth_signTransaction", [txParams]);
      return methodRes;
    },
    processEthSignMessage: async (msgParams, _5) => {
      const methodRes = await sendJrpcRequest(connector, `eip155:${chainId}`, "eth_sign", [msgParams.from, msgParams.data]);
      return methodRes;
    },
    processPersonalMessage: async (msgParams, _5) => {
      const methodRes = await sendJrpcRequest(connector, `eip155:${chainId}`, "personal_sign", [msgParams.data, msgParams.from]);
      return methodRes;
    },
    processTypedMessageV4: async (msgParams) => {
      const methodRes = await sendJrpcRequest(connector, `eip155:${chainId}`, "eth_signTypedData_v4", [msgParams.from, msgParams.data]);
      return methodRes;
    }
  };
}
function getSolProviderHandlers({
  connector,
  chainId
}) {
  return {
    requestAccounts: async (_5) => {
      return getAccounts(connector);
    },
    getPrivateKey: async () => {
      throw rpcErrors.methodNotSupported();
    },
    getSecretKey: async () => {
      throw rpcErrors.methodNotSupported();
    },
    getPublicKey: async () => {
      throw rpcErrors.methodNotSupported();
    },
    getAccounts: async (_5) => {
      return getAccounts(connector);
    },
    signAllTransactions: async (_5) => {
      throw rpcErrors.methodNotSupported();
    },
    signAndSendTransaction: async (_5) => {
      throw rpcErrors.methodNotSupported();
    },
    signMessage: async (req) => {
      const methodRes = await sendJrpcRequest(connector, `solana:${SOLANA_CAIP_CHAIN_MAP[chainId]}`, "solana_signMessage", {
        message: import_bs583.default.encode(req.params.message)
      });
      return import_bs583.default.decode(methodRes.signature);
    },
    signTransaction: async (req) => {
      const [{
        PublicKey
      }, accounts] = await Promise.all([import("./index.browser.esm-K7YAHJZA.js"), getAccounts(connector)]);
      if (accounts.length === 0) {
        throw providerErrors.disconnected();
      }
      const methodRes = await sendJrpcRequest(connector, `solana:${SOLANA_CAIP_CHAIN_MAP[chainId]}`, "solana_signTransaction", {
        transaction: req.params.message.serialize({
          requireAllSignatures: false
        }).toString("base64")
      });
      const finalTransaction = req.params.message;
      finalTransaction.addSignature(new PublicKey(accounts[0]), Buffer.from(import_bs583.default.decode(methodRes.signature)));
      return finalTransaction;
    }
  };
}
async function switchChain2({
  connector,
  chainId,
  newChainId
}) {
  await sendJrpcRequest(connector, `eip155:${chainId}`, "wallet_switchEthereumChain", [{
    chainId: newChainId
  }]);
}
async function addChain2({
  connector,
  chainId,
  chainConfig
}) {
  await sendJrpcRequest(connector, `eip155:${chainId}`, "wallet_addEthereumChain", [chainConfig]);
}

// node_modules/@web3auth/wallet-connect-v2-adapter/dist/lib.esm/WalletConnectV2Provider.js
var _WalletConnectV2Provider;
var WalletConnectV2Provider = class extends BaseProvider {
  constructor({
    clientId,
    config,
    state,
    connector
  }) {
    super({
      config: {
        chainConfig: config.chainConfig,
        skipLookupNetwork: !!config.skipLookupNetwork
      },
      state: _objectSpread2(_objectSpread2({}, state || {}), {}, {
        chainId: "loading",
        accounts: []
      })
    });
    _defineProperty(this, "connector", null);
    _defineProperty(this, "clientId", void 0);
    this.connector = connector || null;
    this.clientId = clientId;
  }
  async enable() {
    if (!this.connector) throw providerErrors.custom({
      message: "Connector is not initialized, pass wallet connect connector in constructor",
      code: 4902
    });
    await this.setupProvider(this.connector);
    return this._providerEngineProxy.request({
      method: "eth_accounts"
    });
  }
  async setupProvider(connector) {
    this.onConnectorStateUpdate(connector);
    await this.setupEngine(connector);
  }
  async switchChain({
    chainId
  }) {
    if (!this.connector) throw providerErrors.custom({
      message: "Connector is not initialized, pass wallet connect connector in constructor",
      code: 4902
    });
    const currentChainConfig = this.getChainConfig(chainId);
    const {
      chainId: currentChainId
    } = this.config.chainConfig;
    const currentNumChainId = parseInt(currentChainId, 16);
    await switchChain2({
      connector: this.connector,
      chainId: currentNumChainId,
      newChainId: chainId
    });
    this.configure({
      chainConfig: currentChainConfig
    });
    await this.setupEngine(this.connector);
    this.lookupNetwork(this.connector);
  }
  async addChain(chainConfig) {
    const {
      chainId: currentChainId
    } = this.config.chainConfig;
    const numChainId = parseInt(currentChainId, 16);
    await addChain2({
      connector: this.connector,
      chainId: numChainId,
      chainConfig: {
        chainId: chainConfig.chainId,
        chainName: chainConfig.displayName,
        nativeCurrency: {
          name: chainConfig.tickerName,
          symbol: chainConfig.ticker.toLocaleUpperCase(),
          decimals: chainConfig.decimals || 18
        },
        rpcUrls: [chainConfig.rpcTarget],
        blockExplorerUrls: [chainConfig.blockExplorerUrl],
        iconUrls: [chainConfig.logo]
      }
    });
    super.addChain(chainConfig);
  }
  // no need to implement this method in wallet connect v2.
  async lookupNetwork(_5) {
    const newChainId = this.config.chainConfig.chainId;
    this.update({
      chainId: newChainId
    });
    this.emit("chainChanged", newChainId);
    this.emit("connect", {
      chainId: newChainId
    });
    return this.config.chainConfig.chainId;
  }
  async setupEngine(connector) {
    if (this.config.chainConfig.chainNamespace === CHAIN_NAMESPACES.EIP155) {
      return this.setupEthEngine(connector);
    } else if (this.config.chainConfig.chainNamespace === CHAIN_NAMESPACES.SOLANA) {
      return this.setupSolEngine(connector);
    }
    throw new Error(`Unsupported chainNamespace: ${this.config.chainConfig.chainNamespace}`);
  }
  async setupEthEngine(connector) {
    const {
      chainId
    } = this.config.chainConfig;
    const numChainId = parseInt(chainId, 16);
    const providerHandlers = getEthProviderHandlers({
      connector,
      chainId: numChainId
    });
    const jrpcRes = await getAccounts(connector);
    this.update({
      accounts: jrpcRes || []
    });
    const ethMiddleware = createEthMiddleware(providerHandlers);
    const chainSwitchMiddleware = this.getEthChainSwitchMiddleware();
    const engine = new JRPCEngine();
    const {
      networkMiddleware
    } = createJsonRpcClient(this.config.chainConfig);
    engine.push(ethMiddleware);
    engine.push(chainSwitchMiddleware);
    engine.push(networkMiddleware);
    const provider = providerFromEngine(engine);
    this.updateProviderEngineProxy(provider);
  }
  async setupSolEngine(connector) {
    const {
      chainId
    } = this.config.chainConfig;
    const providerHandlers = getSolProviderHandlers({
      connector,
      chainId
    });
    const jrpcRes = await getAccounts(connector);
    this.update({
      accounts: jrpcRes || []
    });
    const solMiddleware = createSolanaMiddleware(providerHandlers);
    const engine = new JRPCEngine();
    const {
      networkMiddleware
    } = createJsonRpcClient2(this.config.chainConfig);
    engine.push(solMiddleware);
    engine.push(networkMiddleware);
    const provider = providerFromEngine(engine);
    this.updateProviderEngineProxy(provider);
  }
  getEthChainSwitchMiddleware() {
    const chainSwitchHandlers = {
      addChain: async (params) => {
        const {
          chainId,
          chainName,
          rpcUrls,
          blockExplorerUrls,
          nativeCurrency,
          iconUrls
        } = params;
        this.addChain({
          chainNamespace: CHAIN_NAMESPACES.EIP155,
          chainId,
          ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || "ETH",
          tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || "Ether",
          displayName: chainName,
          rpcTarget: rpcUrls[0],
          blockExplorerUrl: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || "",
          decimals: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.decimals) || 18,
          logo: (iconUrls === null || iconUrls === void 0 ? void 0 : iconUrls[0]) || "https://images.toruswallet.io/eth.svg"
        });
      },
      switchChain: async (params) => {
        const {
          chainId
        } = params;
        await this.switchChain({
          chainId
        });
      }
    };
    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);
    return chainSwitchMiddleware;
  }
  connectedTopic() {
    var _this$connector;
    if (!this.connector) throw WalletLoginError.notConnectedError("Wallet connect connector is not connected");
    if ((_this$connector = this.connector) !== null && _this$connector !== void 0 && (_this$connector = _this$connector.session) !== null && _this$connector !== void 0 && _this$connector.length) {
      var _this$connector$sessi;
      const lastKeyIndex = this.connector.session.keys.length - 1;
      return (_this$connector$sessi = this.connector.session.get(this.connector.session.keys[lastKeyIndex])) === null || _this$connector$sessi === void 0 ? void 0 : _this$connector$sessi.topic;
    }
    return void 0;
  }
  checkIfAccountAllowed(address) {
    if (!this.connector || !this.connectedTopic()) return false;
    const sessionData = this.connector.session.get(this.connectedTopic());
    const allAccounts = Hr2(sessionData.namespaces);
    let accountAllowed = false;
    for (const account of allAccounts) {
      var _parsedAccount$addres;
      const parsedAccount = Xe2(account);
      if (((_parsedAccount$addres = parsedAccount.address) === null || _parsedAccount$addres === void 0 ? void 0 : _parsedAccount$addres.toLowerCase()) === (address === null || address === void 0 ? void 0 : address.toLowerCase())) {
        accountAllowed = true;
        break;
      }
    }
    return accountAllowed;
  }
  async onConnectorStateUpdate(connector) {
    connector.events.on("session_event", async (payload) => {
      loglevel.debug("session_event data", payload);
      if (!this.provider) throw WalletLoginError.notConnectedError("Wallet connect connector is not connected");
      const {
        event
      } = payload.params;
      const {
        name: name2,
        data
      } = event || {};
      if (name2 === "accountsChanged" && data !== null && data !== void 0 && data.length && this.state.accounts[0] !== data[0] && this.checkIfAccountAllowed(data[0])) {
        this.update({
          accounts: data
        });
        this.emit("accountsChanged", data);
      }
      if (event.name === "chainChanged") {
        if (!data) return;
        const connectedChainId = data;
        const connectedHexChainId = `0x${connectedChainId.toString(16)}`;
        if (connectedHexChainId && this.state.chainId !== connectedHexChainId) {
          const maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedHexChainId, this.clientId);
          this.configure({
            chainConfig: _objectSpread2(_objectSpread2({}, maybeConfig), {}, {
              chainId: connectedHexChainId,
              chainNamespace: CHAIN_NAMESPACES.EIP155
            })
          });
          await this.setupEngine(connector);
        }
      }
    });
  }
};
_WalletConnectV2Provider = WalletConnectV2Provider;
_defineProperty(WalletConnectV2Provider, "getProviderInstance", async (params) => {
  const providerFactory = new _WalletConnectV2Provider({
    clientId: params.clientId,
    config: {
      chainConfig: params.chainConfig,
      skipLookupNetwork: params.skipLookupNetwork
    }
  });
  await providerFactory.setupProvider(params.connector);
  return providerFactory;
});

// node_modules/@web3auth/wallet-connect-v2-adapter/dist/lib.esm/walletConnectV2adapter.js
var WalletConnectV2Adapter = class extends BaseAdapter {
  constructor(options = {}) {
    super(options);
    _defineProperty(this, "name", WALLET_ADAPTERS.WALLET_CONNECT_V2);
    _defineProperty(this, "adapterNamespace", ADAPTER_NAMESPACES.MULTICHAIN);
    _defineProperty(this, "currentChainNamespace", CHAIN_NAMESPACES.OTHER);
    _defineProperty(this, "type", ADAPTER_CATEGORY.EXTERNAL);
    _defineProperty(this, "adapterOptions", {});
    _defineProperty(this, "status", ADAPTER_STATUS.NOT_READY);
    _defineProperty(this, "adapterData", {
      uri: ""
    });
    _defineProperty(this, "connector", null);
    _defineProperty(this, "activeSession", null);
    _defineProperty(this, "wcProvider", null);
    this.adapterOptions = _objectSpread2({}, options);
    this.setAdapterSettings(options);
  }
  get connected() {
    return !!this.activeSession;
  }
  get provider() {
    if (this.status !== ADAPTER_STATUS.NOT_READY && this.wcProvider) {
      return this.wcProvider;
    }
    return null;
  }
  set provider(_5) {
    throw new Error("Not implemented");
  }
  async init(options) {
    var _this$adapterOptions$, _this$chainConfig, _this$chainConfig2;
    super.checkInitializationRequirements();
    const projectId = (_this$adapterOptions$ = this.adapterOptions.adapterSettings) === null || _this$adapterOptions$ === void 0 || (_this$adapterOptions$ = _this$adapterOptions$.walletConnectInitOptions) === null || _this$adapterOptions$ === void 0 ? void 0 : _this$adapterOptions$.projectId;
    if (!projectId) {
      throw WalletInitializationError.invalidParams("Wallet connect project id is required in wallet connect v2 adapter");
    }
    const wc2Settings = await getWalletConnectV2Settings((_this$chainConfig = this.chainConfig) === null || _this$chainConfig === void 0 ? void 0 : _this$chainConfig.chainNamespace, [(_this$chainConfig2 = this.chainConfig) === null || _this$chainConfig2 === void 0 ? void 0 : _this$chainConfig2.chainId], projectId);
    if (!this.adapterOptions.loginSettings || Object.keys(this.adapterOptions.loginSettings).length === 0) {
      this.adapterOptions.loginSettings = wc2Settings.loginSettings;
    }
    this.adapterOptions.adapterSettings = (0, import_deepmerge.default)(wc2Settings.adapterSettings || {}, this.adapterOptions.adapterSettings || {});
    const {
      adapterSettings
    } = this.adapterOptions;
    this.connector = await Se3.init(adapterSettings === null || adapterSettings === void 0 ? void 0 : adapterSettings.walletConnectInitOptions);
    this.wcProvider = new WalletConnectV2Provider({
      clientId: this.clientId,
      config: {
        chainConfig: this.chainConfig
      },
      connector: this.connector
    });
    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V2);
    this.status = ADAPTER_STATUS.READY;
    loglevel.debug("initializing wallet connect v2 adapter");
    if (options.autoConnect) {
      await this.checkForPersistedSession();
      if (this.connected) {
        this.rehydrated = true;
        try {
          await this.onConnectHandler();
        } catch (error) {
          loglevel.error("wallet auto connect", error);
          this.emit(ADAPTER_EVENTS.ERRORED, error);
        }
      } else {
        this.status = ADAPTER_STATUS.NOT_READY;
        this.emit(ADAPTER_EVENTS.CACHE_CLEAR);
      }
    }
  }
  async connect() {
    super.checkConnectionRequirements();
    if (!this.connector) throw WalletInitializationError.notReady("Wallet adapter is not ready yet");
    try {
      if (this.connected) {
        await this.onConnectHandler();
        return this.provider;
      }
      if (this.status !== ADAPTER_STATUS.CONNECTING) {
        await this.createNewSession();
      }
      return this.provider;
    } catch (error) {
      loglevel.error("Wallet connect v2 adapter error while connecting", error);
      this.status = ADAPTER_STATUS.READY;
      this.rehydrated = true;
      this.emit(ADAPTER_EVENTS.ERRORED, error);
      const finalError = error instanceof Web3AuthError ? error : WalletLoginError.connectionError(`Failed to login with wallet connect: ${(error === null || error === void 0 ? void 0 : error.message) || ""}`, error);
      throw finalError;
    }
  }
  // should be called only before initialization.
  setAdapterSettings(adapterSettings) {
    var _this$adapterOptions$2, _this$adapterOptions, _this$adapterOptions$3, _this$adapterOptions2, _this$adapterOptions$4;
    super.setAdapterSettings(adapterSettings);
    const {
      qrcodeModal,
      walletConnectInitOptions
    } = (adapterSettings === null || adapterSettings === void 0 ? void 0 : adapterSettings.adapterSettings) || {};
    this.adapterOptions = _objectSpread2(_objectSpread2({}, this.adapterOptions), {}, {
      adapterSettings: (_this$adapterOptions$2 = (_this$adapterOptions = this.adapterOptions) === null || _this$adapterOptions === void 0 ? void 0 : _this$adapterOptions.adapterSettings) !== null && _this$adapterOptions$2 !== void 0 ? _this$adapterOptions$2 : {},
      loginSettings: (_this$adapterOptions$3 = (_this$adapterOptions2 = this.adapterOptions) === null || _this$adapterOptions2 === void 0 ? void 0 : _this$adapterOptions2.loginSettings) !== null && _this$adapterOptions$3 !== void 0 ? _this$adapterOptions$3 : {}
    });
    if (qrcodeModal) this.adapterOptions.adapterSettings.qrcodeModal = qrcodeModal;
    if (walletConnectInitOptions) this.adapterOptions.adapterSettings.walletConnectInitOptions = _objectSpread2(_objectSpread2({}, (_this$adapterOptions$4 = this.adapterOptions.adapterSettings.walletConnectInitOptions) !== null && _this$adapterOptions$4 !== void 0 ? _this$adapterOptions$4 : {}), walletConnectInitOptions);
    const {
      loginSettings
    } = adapterSettings;
    if (loginSettings) this.adapterOptions.loginSettings = _objectSpread2(_objectSpread2({}, this.adapterOptions.loginSettings || {}), loginSettings);
  }
  async addChain(chainConfig, init = false) {
    var _this$wcProvider;
    super.checkAddChainRequirements(chainConfig, init);
    await ((_this$wcProvider = this.wcProvider) === null || _this$wcProvider === void 0 ? void 0 : _this$wcProvider.addChain(chainConfig));
    this.addChainConfig(chainConfig);
  }
  async switchChain(params, init = false) {
    var _this$wcProvider2;
    super.checkSwitchChainRequirements(params, init);
    await ((_this$wcProvider2 = this.wcProvider) === null || _this$wcProvider2 === void 0 ? void 0 : _this$wcProvider2.switchChain({
      chainId: params.chainId
    }));
    this.setAdapterSettings({
      chainConfig: this.getChainConfig(params.chainId)
    });
  }
  async getUserInfo() {
    if (!this.connected) throw WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
    return {};
  }
  async disconnect(options = {
    cleanup: false,
    sessionRemovedByWallet: false
  }) {
    var _this$activeSession, _this$activeSession2;
    const {
      cleanup
    } = options;
    if (!this.connector || !this.connected || !((_this$activeSession = this.activeSession) !== null && _this$activeSession !== void 0 && _this$activeSession.topic)) throw WalletLoginError.notConnectedError("Not connected with wallet");
    if (!options.sessionRemovedByWallet) await this.connector.disconnect({
      topic: (_this$activeSession2 = this.activeSession) === null || _this$activeSession2 === void 0 ? void 0 : _this$activeSession2.topic,
      reason: de2("USER_DISCONNECTED")
    });
    this.rehydrated = false;
    if (cleanup) {
      this.connector = null;
      this.status = ADAPTER_STATUS.NOT_READY;
      this.wcProvider = null;
    } else {
      this.status = ADAPTER_STATUS.READY;
    }
    this.activeSession = null;
    this.emit(ADAPTER_EVENTS.DISCONNECTED);
  }
  async authenticateUser() {
    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();
    const {
      chainNamespace,
      chainId
    } = this.chainConfig;
    const accounts = await this.provider.request({
      method: chainNamespace === CHAIN_NAMESPACES.EIP155 ? "eth_accounts" : "getAccounts"
    });
    if (accounts && accounts.length > 0) {
      const existingToken = getSavedToken(accounts[0], this.name);
      if (existingToken) {
        const isExpired = checkIfTokenIsExpired(existingToken);
        if (!isExpired) {
          return {
            idToken: existingToken
          };
        }
      }
      const payload = {
        domain: window.location.origin,
        uri: window.location.href,
        address: accounts[0],
        chainId: parseInt(chainId, 16),
        version: "1",
        nonce: Math.random().toString(36).slice(2),
        issuedAt: (/* @__PURE__ */ new Date()).toISOString()
      };
      const challenge = await signChallenge(payload, chainNamespace);
      const signedMessage = await this._getSignedMessage(challenge, accounts, chainNamespace);
      const idToken = await verifySignedChallenge(chainNamespace, signedMessage, challenge, this.name, this.sessionTime, this.clientId, this.web3AuthNetwork);
      saveToken(accounts[0], this.name, idToken);
      return {
        idToken
      };
    }
    throw WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
  }
  async enableMFA() {
    throw new Error("Method Not implemented");
  }
  async manageMFA() {
    throw new Error("Method Not implemented");
  }
  cleanupPendingPairings() {
    if (!this.connector) throw WalletInitializationError.notReady("Wallet adapter is not ready yet");
    const inactivePairings = this.connector.pairing.getAll({
      active: false
    });
    if (!$e2(inactivePairings)) return;
    inactivePairings.forEach((pairing) => {
      if (this.connector) {
        this.connector.pairing.delete(pairing.topic, de2("USER_DISCONNECTED"));
      }
    });
  }
  async checkForPersistedSession() {
    if (!this.connector) throw WalletInitializationError.notReady("Wallet adapter is not ready yet");
    if (this.connector.session.length) {
      const lastKeyIndex = this.connector.session.keys.length - 1;
      this.activeSession = this.connector.session.get(this.connector.session.keys[lastKeyIndex]);
    }
    return this.activeSession;
  }
  async createNewSession(opts = {
    forceNewSession: false
  }) {
    try {
      var _this$activeSession3, _this$adapterOptions3;
      if (!this.connector) throw WalletInitializationError.notReady("Wallet adapter is not ready yet");
      if (!this.adapterOptions.loginSettings || Object.keys(this.adapterOptions.loginSettings).length === 0) throw WalletInitializationError.notReady("login settings are not set yet");
      this.status = ADAPTER_STATUS.CONNECTING;
      this.emit(ADAPTER_EVENTS.CONNECTING, {
        adapter: WALLET_ADAPTERS.WALLET_CONNECT_V2
      });
      if (opts.forceNewSession && (_this$activeSession3 = this.activeSession) !== null && _this$activeSession3 !== void 0 && _this$activeSession3.topic) {
        var _this$activeSession4;
        await this.connector.disconnect({
          topic: (_this$activeSession4 = this.activeSession) === null || _this$activeSession4 === void 0 ? void 0 : _this$activeSession4.topic,
          reason: de2("USER_DISCONNECTED")
        });
      }
      const {
        uri,
        approval
      } = await this.connector.connect(this.adapterOptions.loginSettings);
      const qrcodeModal = (_this$adapterOptions3 = this.adapterOptions) === null || _this$adapterOptions3 === void 0 || (_this$adapterOptions3 = _this$adapterOptions3.adapterSettings) === null || _this$adapterOptions3 === void 0 ? void 0 : _this$adapterOptions3.qrcodeModal;
      if (uri) {
        if (qrcodeModal) {
          try {
            await qrcodeModal.openModal({
              uri
            });
            loglevel.debug("EVENT", "QR Code Modal closed");
            this.status = ADAPTER_STATUS.READY;
            this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V2);
          } catch (error) {
            loglevel.error("unable to open qr code modal");
          }
        } else {
          this.updateAdapterData({
            uri
          });
        }
      }
      loglevel.info("awaiting session approval from wallet");
      const session = await approval();
      this.activeSession = session;
      await this.onConnectHandler();
      if (qrcodeModal) {
        qrcodeModal.closeModal();
      }
    } catch (error) {
      var _message;
      if ((_message = error.message) !== null && _message !== void 0 && _message.toLowerCase().includes("proposal expired")) {
        loglevel.info("current adapter status: ", this.status);
        if (this.status === ADAPTER_STATUS.CONNECTING) {
          loglevel.info("retrying to create new wallet connect session since proposal expired");
          return this.createNewSession({
            forceNewSession: true
          });
        }
        if (this.status === ADAPTER_STATUS.READY) {
          loglevel.info("ignoring proposal expired error since some other adapter is connected");
          return;
        }
      }
      loglevel.error("error while creating new wallet connect session", error);
      this.emit(ADAPTER_EVENTS.ERRORED, error);
      throw error;
    }
  }
  async onConnectHandler() {
    var _this$adapterOptions$5;
    if (!this.connector || !this.wcProvider) throw WalletInitializationError.notReady("Wallet adapter is not ready yet");
    if (!this.chainConfig) throw WalletInitializationError.invalidParams("Chain config is not set");
    this.subscribeEvents();
    if ((_this$adapterOptions$5 = this.adapterOptions.adapterSettings) !== null && _this$adapterOptions$5 !== void 0 && _this$adapterOptions$5.qrcodeModal) {
      this.wcProvider = new WalletConnectV2Provider({
        clientId: this.clientId,
        config: {
          chainConfig: this.chainConfig,
          skipLookupNetwork: true
        },
        connector: this.connector
      });
    }
    await this.wcProvider.setupProvider(this.connector);
    this.cleanupPendingPairings();
    this.status = ADAPTER_STATUS.CONNECTED;
    this.emit(ADAPTER_EVENTS.CONNECTED, {
      adapter: WALLET_ADAPTERS.WALLET_CONNECT_V2,
      reconnected: this.rehydrated,
      provider: this.provider
    });
  }
  subscribeEvents() {
    if (!this.connector) throw WalletInitializationError.notReady("Wallet adapter is not ready yet");
    this.connector.events.on("session_update", ({
      topic,
      params
    }) => {
      if (!this.connector) return;
      const {
        namespaces
      } = params;
      const _session = this.connector.session.get(topic);
      const updatedSession = _objectSpread2(_objectSpread2({}, _session), {}, {
        namespaces
      });
      this.activeSession = updatedSession;
    });
    this.connector.events.on("session_delete", () => {
      this.disconnect({
        sessionRemovedByWallet: true
      });
    });
  }
  async _getSignedMessage(challenge, accounts, chainNamespace) {
    const signedMessage = await this.provider.request({
      method: chainNamespace === CHAIN_NAMESPACES.EIP155 ? "personal_sign" : "signMessage",
      params: chainNamespace === CHAIN_NAMESPACES.EIP155 ? [challenge, accounts[0]] : {
        message: Buffer.from(challenge)
      }
    });
    if (chainNamespace === CHAIN_NAMESPACES.SOLANA) return import_bs584.default.encode(signedMessage);
    return signedMessage;
  }
};

// node_modules/mipd/dist/esm/utils.js
function requestProviders(listener) {
  if (typeof window === "undefined")
    return;
  const handler = (event) => listener(event.detail);
  window.addEventListener("eip6963:announceProvider", handler);
  window.dispatchEvent(new CustomEvent("eip6963:requestProvider"));
  return () => window.removeEventListener("eip6963:announceProvider", handler);
}

// node_modules/mipd/dist/esm/store.js
function createStore2() {
  const listeners = /* @__PURE__ */ new Set();
  let providerDetails = [];
  const request = () => requestProviders((providerDetail) => {
    if (providerDetails.some(({ info }) => info.uuid === providerDetail.info.uuid))
      return;
    providerDetails = [...providerDetails, providerDetail];
    listeners.forEach((listener) => listener(providerDetails, { added: [providerDetail] }));
  });
  let unwatch = request();
  return {
    _listeners() {
      return listeners;
    },
    clear() {
      listeners.forEach((listener) => listener([], { removed: [...providerDetails] }));
      providerDetails = [];
    },
    destroy() {
      this.clear();
      listeners.clear();
      unwatch == null ? void 0 : unwatch();
    },
    findProvider({ rdns }) {
      return providerDetails.find((providerDetail) => providerDetail.info.rdns === rdns);
    },
    getProviders() {
      return providerDetails;
    },
    reset() {
      this.clear();
      unwatch == null ? void 0 : unwatch();
      unwatch = request();
    },
    subscribe(listener, { emitImmediately } = {}) {
      listeners.add(listener);
      if (emitImmediately)
        listener(providerDetails, { added: providerDetails });
      return () => listeners.delete(listener);
    }
  };
}

// node_modules/@web3auth/base-evm-adapter/dist/lib.esm/baseEvmAdapter.js
var BaseEvmAdapter = class extends BaseAdapter {
  async init(_5) {
    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1, this.clientId);
  }
  async authenticateUser() {
    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();
    const {
      chainNamespace,
      chainId
    } = this.chainConfig;
    const accounts = await this.provider.request({
      method: "eth_accounts"
    });
    if (accounts && accounts.length > 0) {
      const existingToken = getSavedToken(accounts[0], this.name);
      if (existingToken) {
        const isExpired = checkIfTokenIsExpired(existingToken);
        if (!isExpired) {
          return {
            idToken: existingToken
          };
        }
      }
      const payload = {
        domain: window.location.origin,
        uri: window.location.href,
        address: accounts[0],
        chainId: parseInt(chainId, 16),
        version: "1",
        nonce: Math.random().toString(36).slice(2),
        issuedAt: (/* @__PURE__ */ new Date()).toISOString()
      };
      const challenge = await signChallenge(payload, chainNamespace);
      const hexChallenge = `0x${Buffer.from(challenge, "utf8").toString("hex")}`;
      const signedMessage = await this.provider.request({
        method: "personal_sign",
        params: [hexChallenge, accounts[0]]
      });
      const idToken = await verifySignedChallenge(chainNamespace, signedMessage, challenge, this.name, this.sessionTime, this.clientId, this.web3AuthNetwork);
      saveToken(accounts[0], this.name, idToken);
      return {
        idToken
      };
    }
    throw WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
  }
  async disconnectSession() {
    super.checkDisconnectionRequirements();
    const accounts = await this.provider.request({
      method: "eth_accounts"
    });
    if (accounts && accounts.length > 0) {
      clearToken(accounts[0], this.name);
    }
  }
  async disconnect() {
    this.rehydrated = false;
    this.emit(ADAPTER_EVENTS.DISCONNECTED);
  }
};

// node_modules/@web3auth/default-evm-adapter/dist/lib.esm/injectedEvmAdapter.js
var InjectedEvmAdapter = class extends BaseEvmAdapter {
  constructor(options) {
    super(options);
    _defineProperty(this, "adapterNamespace", ADAPTER_NAMESPACES.EIP155);
    _defineProperty(this, "currentChainNamespace", CHAIN_NAMESPACES.EIP155);
    _defineProperty(this, "type", ADAPTER_CATEGORY.EXTERNAL);
    _defineProperty(this, "name", void 0);
    _defineProperty(this, "isInjected", true);
    _defineProperty(this, "status", ADAPTER_STATUS.NOT_READY);
    _defineProperty(this, "injectedProvider", null);
    this.name = options.name;
    this.injectedProvider = options.provider;
  }
  get provider() {
    if (this.status !== ADAPTER_STATUS.NOT_READY && this.injectedProvider) {
      return this.injectedProvider;
    }
    return null;
  }
  set provider(_5) {
    throw new Error("Not implemented");
  }
  async init(options = {}) {
    await super.init(options);
    super.checkInitializationRequirements();
    this.status = ADAPTER_STATUS.READY;
    this.emit(ADAPTER_EVENTS.READY, this.name);
    try {
      loglevel.debug(`initializing ${this.name} injected adapter`);
      if (options.autoConnect) {
        this.rehydrated = true;
        await this.connect();
      }
    } catch (error) {
      this.emit(ADAPTER_EVENTS.ERRORED, error);
    }
  }
  async connect() {
    super.checkConnectionRequirements();
    if (!this.injectedProvider) throw WalletLoginError.connectionError("Injected provider is not available");
    if (!this.chainConfig) throw WalletLoginError.connectionError("Chain config is not available");
    this.status = ADAPTER_STATUS.CONNECTING;
    this.emit(ADAPTER_EVENTS.CONNECTING, {
      adapter: this.name
    });
    try {
      await this.injectedProvider.request({
        method: "eth_requestAccounts"
      });
      if (this.injectedProvider.chainId !== this.chainConfig.chainId) {
        try {
          await this.switchChain(this.chainConfig, true);
        } catch (error) {
          await this.addChain(this.chainConfig, true);
          await this.switchChain(this.chainConfig, true);
        }
      }
      this.status = ADAPTER_STATUS.CONNECTED;
      const accountDisconnectHandler = (accounts) => {
        if (accounts.length === 0) {
          var _this$injectedProvide;
          this.disconnect();
          if ((_this$injectedProvide = this.injectedProvider) !== null && _this$injectedProvide !== void 0 && _this$injectedProvide.removeListener) this.injectedProvider.removeListener("accountsChanged", accountDisconnectHandler);
        }
      };
      this.injectedProvider.on("accountsChanged", accountDisconnectHandler);
      this.emit(ADAPTER_EVENTS.CONNECTED, {
        adapter: this.name,
        reconnected: this.rehydrated,
        provider: this.injectedProvider
      });
      return this.injectedProvider;
    } catch (error) {
      this.status = ADAPTER_STATUS.READY;
      this.rehydrated = false;
      this.emit(ADAPTER_EVENTS.ERRORED, error);
      if (error instanceof Web3AuthError) throw error;
      throw WalletLoginError.connectionError(`Failed to login with ${this.name} injected wallet`);
    }
  }
  async disconnect(options = {
    cleanup: false
  }) {
    if (!this.injectedProvider) throw WalletLoginError.connectionError("Injected provider is not available");
    await super.disconnectSession();
    if (typeof this.injectedProvider.removeAllListeners !== "undefined") this.injectedProvider.removeAllListeners();
    try {
      await this.injectedProvider.request({
        method: "wallet_revokePermissions",
        params: [{
          eth_accounts: {}
        }]
      });
    } catch (error) {
    }
    if (options.cleanup) {
      this.status = ADAPTER_STATUS.NOT_READY;
      this.injectedProvider = null;
    } else {
      this.status = ADAPTER_STATUS.READY;
    }
    await super.disconnect();
  }
  async getUserInfo() {
    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");
    return {};
  }
  async addChain(chainConfig, init = false) {
    if (!this.injectedProvider) throw WalletLoginError.connectionError("Injected provider is not available");
    super.checkAddChainRequirements(chainConfig, init);
    await this.injectedProvider.request({
      method: "wallet_addEthereumChain",
      params: [{
        chainId: chainConfig.chainId,
        chainName: chainConfig.displayName,
        rpcUrls: [chainConfig.rpcTarget],
        blockExplorerUrls: [chainConfig.blockExplorerUrl],
        nativeCurrency: {
          name: chainConfig.tickerName,
          symbol: chainConfig.ticker,
          decimals: chainConfig.decimals || 18
        },
        iconUrls: [chainConfig.logo]
      }]
    });
    this.addChainConfig(chainConfig);
  }
  async switchChain(params, init = false) {
    if (!this.injectedProvider) throw WalletLoginError.connectionError("Injected provider is not available");
    super.checkSwitchChainRequirements(params, init);
    await this.injectedProvider.request({
      method: "wallet_switchEthereumChain",
      params: [{
        chainId: params.chainId
      }]
    });
    this.setAdapterSettings({
      chainConfig: this.getChainConfig(params.chainId)
    });
  }
  async enableMFA() {
    throw new Error("Method Not implemented");
  }
  async manageMFA() {
    throw new Error("Method Not implemented");
  }
};

// node_modules/@web3auth/default-evm-adapter/dist/lib.esm/injectedAdapters.js
var getInjectedAdapters = (params) => {
  const {
    options
  } = params;
  const {
    clientId,
    chainConfig,
    sessionTime,
    web3AuthNetwork,
    useCoreKitKey
  } = options;
  if (!Object.values(CHAIN_NAMESPACES).includes(chainConfig.chainNamespace)) throw WalletInitializationError.invalidParams(`Invalid chainNamespace: ${chainConfig.chainNamespace}`);
  const finalChainConfig = _objectSpread2(_objectSpread2({}, getChainConfig(chainConfig.chainNamespace, chainConfig === null || chainConfig === void 0 ? void 0 : chainConfig.chainId, clientId)), chainConfig || {});
  const mipd = createStore2();
  const injectedProviders = mipd.getProviders().map((providerDetail) => {
    return new InjectedEvmAdapter({
      name: normalizeWalletName(providerDetail.info.name),
      provider: providerDetail.provider,
      chainConfig: finalChainConfig,
      clientId,
      sessionTime,
      web3AuthNetwork,
      useCoreKitKey
    });
  });
  return injectedProviders;
};

// node_modules/@web3auth/default-evm-adapter/dist/lib.esm/index.js
var getDefaultExternalAdapters = (params) => {
  const {
    options
  } = params;
  const {
    clientId,
    chainConfig,
    sessionTime,
    web3AuthNetwork,
    useCoreKitKey
  } = options;
  if (!Object.values(CHAIN_NAMESPACES).includes(chainConfig.chainNamespace)) throw WalletInitializationError.invalidParams(`Invalid chainNamespace: ${chainConfig.chainNamespace}`);
  const finalChainConfig = _objectSpread2(_objectSpread2({}, getChainConfig(chainConfig.chainNamespace, chainConfig === null || chainConfig === void 0 ? void 0 : chainConfig.chainId, clientId)), chainConfig || {});
  const wcv2Adapter = new WalletConnectV2Adapter({
    chainConfig: finalChainConfig,
    clientId,
    sessionTime,
    web3AuthNetwork,
    useCoreKitKey,
    adapterSettings: {
      walletConnectInitOptions: {}
    }
  });
  const injectedProviders = getInjectedAdapters({
    options
  });
  return [...injectedProviders, wcv2Adapter];
};
export {
  getDefaultExternalAdapters,
  getInjectedAdapters
};
/*! Bundled license information:

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

@walletconnect/relay-auth/dist/index.es.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@walletconnect/utils/dist/index.es.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=@web3auth_default-evm-adapter.js.map
