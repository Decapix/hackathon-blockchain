{
  "version": 3,
  "sources": ["../../@web3auth/auth-adapter/dist/lib.esm/authAdapter.js", "../../@web3auth/auth-adapter/dist/lib.esm/config.js"],
  "sourcesContent": ["import _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { UX_MODE, Auth, WEB3AUTH_NETWORK, SUPPORTED_KEY_CURVES } from '@web3auth/auth';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, CHAIN_NAMESPACES, WalletInitializationError, log, ADAPTER_EVENTS, WalletLoginError, Web3AuthError } from '@web3auth/base';\nimport deepmerge from 'deepmerge';\nimport { getAuthDefaultOptions } from './config.js';\n\nclass AuthAdapter extends BaseAdapter {\n  constructor(params = {}) {\n    super(params);\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.AUTH);\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.MULTICHAIN);\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.IN_APP);\n    _defineProperty(this, \"authInstance\", null);\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n    _defineProperty(this, \"privateKeyProvider\", null);\n    _defineProperty(this, \"authOptions\", void 0);\n    _defineProperty(this, \"loginSettings\", {\n      loginProvider: \"\"\n    });\n    this.setAdapterSettings(_objectSpread(_objectSpread({}, params.adapterSettings), {}, {\n      chainConfig: params.chainConfig,\n      clientId: params.clientId || \"\",\n      sessionTime: params.sessionTime,\n      web3AuthNetwork: params.web3AuthNetwork,\n      useCoreKitKey: params.useCoreKitKey,\n      privateKeyProvider: params.privateKeyProvider\n    }));\n    this.loginSettings = params.loginSettings || {\n      loginProvider: \"\"\n    };\n    this.privateKeyProvider = params.privateKeyProvider || null;\n  }\n  get chainConfigProxy() {\n    return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;\n  }\n  get provider() {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.privateKeyProvider) {\n      return this.privateKeyProvider;\n    }\n    return null;\n  }\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n  async init(options) {\n    super.checkInitializationRequirements();\n    if (!this.clientId) throw WalletInitializationError.invalidParams(\"clientId is required before auth's initialization\");\n    if (!this.authOptions) throw WalletInitializationError.invalidParams(\"authOptions is required before auth's initialization\");\n    const isRedirectResult = this.authOptions.uxMode === UX_MODE.REDIRECT;\n    this.authOptions = _objectSpread(_objectSpread({}, this.authOptions), {}, {\n      replaceUrlOnRedirect: isRedirectResult,\n      useCoreKitKey: this.useCoreKitKey\n    });\n    this.authInstance = new Auth(_objectSpread(_objectSpread({}, this.authOptions), {}, {\n      clientId: this.clientId,\n      network: this.authOptions.network || this.web3AuthNetwork || WEB3AUTH_NETWORK.SAPPHIRE_MAINNET\n    }));\n    log.debug(\"initializing auth adapter init\");\n    await this.authInstance.init();\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.AUTH);\n    try {\n      log.debug(\"initializing auth adapter\");\n      const finalPrivKey = this._getFinalPrivKey();\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (finalPrivKey && (options.autoConnect || isRedirectResult)) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached auth provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n  async connect(params = {\n    loginProvider: \"\"\n  }) {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, _objectSpread(_objectSpread({}, params), {}, {\n      adapter: WALLET_ADAPTERS.AUTH\n    }));\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error) {\n      log.error(\"Failed to connect with auth provider\", error);\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if (error !== null && error !== void 0 && error.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      } else if (error instanceof Web3AuthError) {\n        throw error;\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with auth\", error);\n    }\n  }\n  async enableMFA(params = {\n    loginProvider: \"\"\n  }) {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.authInstance) throw WalletInitializationError.notReady(\"authInstance is not ready\");\n    try {\n      await this.authInstance.enableMFA(params);\n    } catch (error) {\n      log.error(\"Failed to enable MFA with auth provider\", error);\n      if (error instanceof Web3AuthError) {\n        throw error;\n      }\n      throw WalletLoginError.connectionError(\"Failed to enable MFA with auth\", error);\n    }\n  }\n  async manageMFA(params = {\n    loginProvider: \"\"\n  }) {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.authInstance) throw WalletInitializationError.notReady(\"authInstance is not ready\");\n    try {\n      await this.authInstance.manageMFA(params);\n    } catch (error) {\n      log.error(\"Failed to manage MFA with auth provider\", error);\n      if (error instanceof Web3AuthError) {\n        throw error;\n      }\n      throw WalletLoginError.connectionError(\"Failed to manage MFA with auth\", error);\n    }\n  }\n  async disconnect(options = {\n    cleanup: false\n  }) {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.authInstance) throw WalletInitializationError.notReady(\"authInstance is not ready\");\n    await this.authInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.authInstance = null;\n      this.privateKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n  async authenticateUser() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const userInfo = await this.getUserInfo();\n    return {\n      idToken: userInfo.idToken\n    };\n  }\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.authInstance) throw WalletInitializationError.notReady(\"authInstance is not ready\");\n    const userInfo = this.authInstance.getUserInfo();\n    return userInfo;\n  }\n\n  // should be called only before initialization.\n  setAdapterSettings(adapterSettings) {\n    super.setAdapterSettings(adapterSettings);\n    const defaultOptions = getAuthDefaultOptions();\n    log.info(\"setting adapter settings\", adapterSettings);\n    this.authOptions = deepmerge.all([defaultOptions.adapterSettings, this.authOptions || {}, adapterSettings || {}]);\n    if (adapterSettings.web3AuthNetwork) {\n      this.authOptions.network = adapterSettings.web3AuthNetwork;\n    }\n    if (adapterSettings.privateKeyProvider) {\n      this.privateKeyProvider = adapterSettings.privateKeyProvider;\n    }\n  }\n  async addChain(chainConfig, init = false) {\n    var _this$privateKeyProvi;\n    super.checkAddChainRequirements(chainConfig, init);\n    (_this$privateKeyProvi = this.privateKeyProvider) === null || _this$privateKeyProvi === void 0 || _this$privateKeyProvi.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n  async switchChain(params, init = false) {\n    var _this$privateKeyProvi2;\n    super.checkSwitchChainRequirements(params, init);\n    await ((_this$privateKeyProvi2 = this.privateKeyProvider) === null || _this$privateKeyProvi2 === void 0 ? void 0 : _this$privateKeyProvi2.switchChain(params));\n    this.setAdapterSettings({\n      chainConfig: this.getChainConfig(params.chainId)\n    });\n  }\n  _getFinalPrivKey() {\n    if (!this.authInstance) return \"\";\n    let finalPrivKey = this.authInstance.privKey;\n    // coreKitKey is available only for custom verifiers by default\n    if (this.useCoreKitKey) {\n      // this is to check if the user has already logged in but coreKitKey is not available.\n      // when useCoreKitKey is set to true.\n      // This is to ensure that when there is no user session active, we don't throw an exception.\n      if (this.authInstance.privKey && !this.authInstance.coreKitKey) {\n        throw WalletLoginError.coreKitKeyNotFound();\n      }\n      finalPrivKey = this.authInstance.coreKitKey;\n    }\n    return finalPrivKey;\n  }\n  _getFinalEd25519PrivKey() {\n    if (!this.authInstance) return \"\";\n    let finalPrivKey = this.authInstance.ed25519PrivKey;\n    // coreKitKey is available only for custom verifiers by default\n    if (this.useCoreKitKey) {\n      // this is to check if the user has already logged in but coreKitKey is not available.\n      // when useCoreKitKey is set to true.\n      // This is to ensure that when there is no user session active, we don't throw an exception.\n      if (this.authInstance.ed25519PrivKey && !this.authInstance.coreKitEd25519Key) {\n        throw WalletLoginError.coreKitKeyNotFound();\n      }\n      finalPrivKey = this.authInstance.coreKitEd25519Key;\n    }\n    return finalPrivKey;\n  }\n  async connectWithProvider(params = {\n    loginProvider: \"\"\n  }) {\n    var _params$extraLoginOpt;\n    if (!this.privateKeyProvider) throw WalletInitializationError.invalidParams(\"PrivateKey Provider is required before initialization\");\n    if (!this.authInstance) throw WalletInitializationError.notReady(\"authInstance is not ready\");\n    const keyAvailable = this._getFinalPrivKey();\n    // if not logged in then login\n    if (!keyAvailable || (_params$extraLoginOpt = params.extraLoginOptions) !== null && _params$extraLoginOpt !== void 0 && _params$extraLoginOpt.id_token) {\n      var _params$extraLoginOpt2;\n      // always use \"other\" curve to return token with all keys encoded so wallet service can switch between evm and solana namespace\n      this.loginSettings.curve = SUPPORTED_KEY_CURVES.OTHER;\n      if (!params.loginProvider && !this.loginSettings.loginProvider) throw WalletInitializationError.invalidParams(\"loginProvider is required for login\");\n      await this.authInstance.login(deepmerge.all([this.loginSettings, params, {\n        extraLoginOptions: _objectSpread(_objectSpread({}, params.extraLoginOptions || {}), {}, {\n          login_hint: params.login_hint || ((_params$extraLoginOpt2 = params.extraLoginOptions) === null || _params$extraLoginOpt2 === void 0 ? void 0 : _params$extraLoginOpt2.login_hint)\n        })\n      }]));\n    }\n    let finalPrivKey = this._getFinalPrivKey();\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        finalPrivKey = this._getFinalEd25519PrivKey();\n      }\n      await this.privateKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.AUTH,\n        reconnected: this.rehydrated,\n        provider: this.provider\n      });\n    }\n  }\n}\n\nexport { AuthAdapter };\n", "import { WEB3AUTH_NETWORK, UX_MODE } from '@web3auth/auth';\n\nconst getAuthDefaultOptions = () => {\n  return {\n    adapterSettings: {\n      network: WEB3AUTH_NETWORK.SAPPHIRE_MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP\n    },\n    loginSettings: {},\n    privateKeyProvider: undefined\n  };\n};\n\nexport { getAuthDefaultOptions };\n"],
  "mappings": "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",
  "names": ["deepmerge"]
}
