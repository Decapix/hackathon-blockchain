import { ethers } from "ethers";
import TestEvaluatorABI from "../config/TestEvaluatorABI.json";
import type { IProvider } from "@web3auth/base";

// Contract address will be dynamically set after deployment
let CONTRACT_ADDRESS = "";

// Bytecode from the compiled contract
const CONTRACT_BYTECODE = "6080604052348015600e575f80fd5b506117208061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c8063119b3fbb1461005957806330063e8f1461008d578063703050db146100a9578063e9625451146100c5578063fb050e56146100e1575b5f80fd5b610073600480360381019061006e9190610d15565b610117565b604051610084959493929190610e16565b60405180910390f35b6100a760048036038101906100a29190610f28565b61027f565b005b6100c360048036038101906100be9190610f99565b610553565b005b6100df60048036038101906100da9190610ff7565b610715565b005b6100fb60048036038101906100f69190610d15565b610a81565b60405161010e97969594939291906110f7565b60405180910390f35b5f805f805f8060015f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020015f820160149054906101000a900461ffff1661ffff1661ffff1681526020015f820160169054906101000a900460ff161515151581526020015f820160179054906101000a900460ff16600381111561021657610215610d85565b5b600381111561022857610227610d85565b5b81526020015f820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050805f01518160200151826040015183606001518460800151955095509550955095505091939590929450565b5f805f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090505f60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090506002600381111561031257610311610d85565b5b815f0160179054906101000a900460ff16600381111561033557610334610d85565b5b14610375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036c906111b5565b60405180910390fd5b428260030160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550858260030160126101000a81548161ffff021916908361ffff160217905550848260030160146101000a81548160ff021916908360ff16021790555083838360040191826103ef92919061140d565b50816003015f9054906101000a900467ffffffffffffffff168260030160089054906101000a900467ffffffffffffffff1661042b9190611507565b815f0160186101000a81548163ffffffff021916908363ffffffff160217905550610468868360030160109054906101000a900461ffff16610c7f565b815f0160146101000a81548161ffff021916908361ffff160217905550611d4c815f0160149054906101000a900461ffff1661ffff161015815f0160166101000a81548160ff0219169083151502179055506003815f0160176101000a81548160ff021916908360038111156104e1576104e0610d85565b5b02179055503373ffffffffffffffffffffffffffffffffffffffff167fbc97f8ca1b9f216557e9d8089e18dcf559bce651301d95ca492b23ba2237871e8360010154835f0160149054906101000a900461ffff16604051610543929190611542565b60405180910390a2505050505050565b5f805f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090505f60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f209050600160038111156105e6576105e5610d85565b5b815f0160179054906101000a900460ff16600381111561060957610608610d85565b5b14610649576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610640906111b5565b60405180910390fd5b42826003015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550828260030160106101000a81548161ffff021916908361ffff1602179055506002815f0160176101000a81548160ff021916908360038111156106b9576106b8610d85565b5b02179055503373ffffffffffffffffffffffffffffffffffffffff167f5a2781ec6356cdbb5defe2824f529a0a2bac115bc6cfde7d966649b5d4ca899183600101546040516107089190611569565b60405180910390a2505050565b6040518061012001604052808481526020018381526020018281526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f61ffff1681526020015f61ffff1681526020015f60ff16815260200160405180602001604052805f8152508152505f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015560208201518160010155604082015181600201556060820151816003015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160030160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a08201518160030160106101000a81548161ffff021916908361ffff16021790555060c08201518160030160126101000a81548161ffff021916908361ffff16021790555060e08201518160030160146101000a81548160ff021916908360ff1602179055506101008201518160040190816108b49190611582565b509050506040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020015f61ffff1681526020015f151581526020016001600381111561090557610904610d85565b5b81526020015f63ffffffff1681525060015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151815f0160146101000a81548161ffff021916908361ffff1602179055506040820151815f0160166101000a81548160ff0219169083151502179055506060820151815f0160176101000a81548160ff02191690836003811115610a00576109ff610d85565b5b02179055506080820151815f0160186101000a81548163ffffffff021916908363ffffffff1602179055509050503373ffffffffffffffffffffffffffffffffffffffff167f5c3f61dbf5756ae332958fdb150763c5636f38f6ba7f975b83af99653b9faf7683604051610a749190611569565b60405180910390a2505050565b5f805f805f8060605f805f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20604051806101200160405290815f82015481526020016001820154815260200160028201548152602001600382015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016003820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016003820160109054906101000a900461ffff1661ffff1661ffff1681526020016003820160129054906101000a900461ffff1661ffff1661ffff1681526020016003820160149054906101000a900460ff1660ff1660ff168152602001600482018054610bbf90611237565b80601f0160208091040260200160405190810160405280929190818152602001828054610beb90611237565b8015610c365780601f10610c0d57610100808354040283529160200191610c36565b820191905f5260205f20905b815481529060010190602001808311610c1957829003601f168201915b50505050508152505090508060200151816060015182608001518360a001518460c001518560e00151866101000151975097509750975097509750975050919395979092949650565b5f808261ffff1611610c91575f610cab565b8161271084610ca09190611651565b610caa91906116ba565b5b905092915050565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610ce482610cbb565b9050919050565b610cf481610cda565b8114610cfe575f80fd5b50565b5f81359050610d0f81610ceb565b92915050565b5f60208284031215610d2a57610d29610cb3565b5b5f610d3784828501610d01565b91505092915050565b610d4981610cda565b82525050565b5f61ffff82169050919050565b610d6581610d4f565b82525050565b5f8115159050919050565b610d7f81610d6b565b82525050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60048110610dc357610dc2610d85565b5b50565b5f819050610dd382610db2565b919050565b5f610de282610dc6565b9050919050565b610df281610dd8565b82525050565b5f63ffffffff82169050919050565b610e1081610df8565b82525050565b5f60a082019050610e295f830188610d40565b610e366020830187610d5c565b610e436040830186610d76565b610e506060830185610de9565b610e5d6080830184610e07565b9695505050505050565b610e7081610d4f565b8114610e7a575f80fd5b50565b5f81359050610e8b81610e67565b92915050565b5f60ff82169050919050565b610ea681610e91565b8114610eb0575f80fd5b50565b5f81359050610ec181610e9d565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112610ee857610ee7610ec7565b5b8235905067ffffffffffffffff811115610f0557610f04610ecb565b5b602083019150836001820283011115610f2157610f20610ecf565b5b9250929050565b5f805f8060608587031215610f4057610f3f610cb3565b5b5f610f4d87828801610e7d565b9450506020610f5e87828801610eb3565b935050604085013567ffffffffffffffff811115610f7f57610f7e610cb7565b5b610f8b87828801610ed3565b925092505092959194509250565b5f60208284031215610fae57610fad610cb3565b5b5f610fbb84828501610e7d565b91505092915050565b5f819050919050565b610fd681610fc4565b8114610fe0575f80fd5b50565b5f81359050610ff181610fcd565b92915050565b5f805f6060848603121561100e5761100d610cb3565b5b5f61101b86828701610fe3565b935050602061102c86828701610fe3565b925050604061103d86828701610fe3565b9150509250925092565b61105081610fc4565b82525050565b5f67ffffffffffffffff82169050919050565b61107281611056565b82525050565b61108181610e91565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6110c982611087565b6110d38185611091565b93506110e38185602086016110a1565b6110ec816110af565b840191505092915050565b5f60e08201905061110a5f83018a611047565b6111176020830189611069565b6111246040830188611069565b6111316060830187610d5c565b61113e6080830186610d5c565b61114b60a0830185611078565b81810360c083015261115d81846110bf565b905098975050505050505050565b7f496e76616c6964207374617475730000000000000000000000000000000000005f82015250565b5f61119f600e83611091565b91506111aa8261116b565b602082019050919050565b5f6020820190508181035f8301526111cc81611193565b9050919050565b5f82905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061124e57607f821691505b6020821081036112615761126061120a565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026112c37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611288565b6112cd8683611288565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61131161130c611307846112e5565b6112ee565b6112e5565b9050919050565b5f819050919050565b61132a836112f7565b61133e61133682611318565b848454611294565b825550505050565b5f90565b611352611346565b61135d818484611321565b505050565b5b81811015611380576113755f8261134a565b600181019050611363565b5050565b601f8211156113c55761139681611267565b61139f84611279565b810160208510156113ae578190505b6113c26113ba85611279565b830182611362565b50505b505050565b5f82821c905092915050565b5f6113e55f19846008026113ca565b1980831691505092915050565b5f6113fd83836113d6565b9150826002028217905092915050565b61141783836111d3565b67ffffffffffffffff8111156114305761142f6111dd565b5b61143a8254611237565b611445828285611384565b5f601f831160018114611472575f8415611460578287013590505b61146a85826113f2565b8655506114d1565b601f19841661148086611267565b5f5b828110156114a757848901358255600182019150602085019450602081019050611482565b868310156114c457848901356114c0601f8916826113d6565b8355505b6001600288020188555050505b50505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61151182611056565b915061151c83611056565b9250828203905067ffffffffffffffff81111561153c5761153b6114da565b5b92915050565b5f6040820190506115555f830185611047565b6115626020830184610d5c565b9392505050565b5f60208201905061157c5f830184611047565b92915050565b61158b82611087565b67ffffffffffffffff8111156115a4576115a36111dd565b5b6115ae8254611237565b6115b9828285611384565b5f60209050601f8311600181146115ea575f84156115d8578287015190505b6115e285826113f2565b865550611649565b601f1984166115f886611267565b5f5b8281101561161f578489015182556001820191506020850194506020810190506115fa565b8683101561163c5784890151611638601f8916826113d6565b8355505b6001600288020188555050505b505050505050565b5f61165b82610d4f565b915061166683610d4f565b925082820261167481610d4f565b9150808214611686576116856114da565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6116c482610d4f565b91506116cf83610d4f565b9250826116df576116de61168d565b5b82820490509291505056fea26469706673582212200026ba54a0a9284814bb3515f148f0be626e20fb2c4efca8f0c6a1233b7b49a464736f6c634300081a0033";

// Helper function to get an ethers contract instance
const getContract = async (
  provider: IProvider,
  uiConsole: (...args: unknown[]) => void
) => {
  try {
    // If no contract is deployed yet, deploy it first
    if (!CONTRACT_ADDRESS) {
      CONTRACT_ADDRESS = await deployTestEvaluator(provider, uiConsole);
    }
    
    const ethersProvider = new ethers.BrowserProvider(provider as any);
    const signer = await ethersProvider.getSigner();
    return new ethers.Contract(CONTRACT_ADDRESS, TestEvaluatorABI, signer);
  } catch (error: any) {
    uiConsole("Error creating contract instance:", error);
    throw error;
  }
};

// Deploy the contract if it doesn't exist yet
export const deployTestEvaluator = async (
  provider: IProvider, 
  uiConsole: (...args: unknown[]) => void
): Promise<string> => {
  try {
    uiConsole("Deploying TestEvaluator contract...");
    const ethersProvider = new ethers.BrowserProvider(provider as any);
    const signer = await ethersProvider.getSigner();
    
    // Prefix the bytecode with 0x
    const prefixedBytecode = CONTRACT_BYTECODE.startsWith("0x") 
      ? CONTRACT_BYTECODE 
      : "0x" + CONTRACT_BYTECODE;
    
    // Create a contract factory with the ABI and bytecode
    const factory = new ethers.ContractFactory(
      TestEvaluatorABI,
      prefixedBytecode,
      signer
    );
    
    // Deploy the contract with higher gas limit
    const contract = await factory.deploy({
      gasLimit: 6000000 // Higher gas limit for contract deployment
    });
    
    // Wait for the contract to be mined and deployed
    await contract.waitForDeployment();
    
    // Get the contract's address
    const contractAddress = await contract.getAddress();
    
    uiConsole("✅ TestEvaluator contract deployed at:", contractAddress);
    return contractAddress;
  } catch (error: any) {
    uiConsole("Error deploying contract:", error);
    console.error("Deployment error:", error);
    throw error;
  }
};

// Initialize a test on the blockchain
export const initializeTest = async (
  provider: IProvider,
  uiConsole: (...args: unknown[]) => void,
  email: string,
  testId: string,
  consentText: string
): Promise<string> => {
  try {
    const contract = await getContract(provider, uiConsole);
    
    // Create hashes to store securely on the blockchain
    const emailHash = ethers.keccak256(ethers.toUtf8Bytes(email));
    const testIdHash = ethers.keccak256(ethers.toUtf8Bytes(testId));
    const consentHash = ethers.keccak256(ethers.toUtf8Bytes(consentText));
    
    uiConsole("Initializing test with hashed values");
    
    // Call the initializeTest function
    const tx = await contract.initializeTest(emailHash, testIdHash, consentHash, {
      gasLimit: 300000
    });
    
    // Wait for the transaction to be mined
    await tx.wait();
    
    uiConsole("Test initialized successfully");
    return "Test initialized successfully";
  } catch (error: any) {
    uiConsole("Error initializing test:", error);
    throw error;
  }
};

// Start a test on the blockchain
export const startTest = async (
  provider: IProvider, 
  uiConsole: (...args: unknown[]) => void,
  totalQuestions: number
): Promise<string> => {
  try {
    const contract = await getContract(provider, uiConsole);
    
    uiConsole("Starting test with", totalQuestions, "questions");
    
    // Call the startTest function
    const tx = await contract.startTest(totalQuestions, {
      gasLimit: 200000
    });
    
    // Wait for the transaction to be mined
    await tx.wait();
    
    uiConsole("Test started successfully");
    return "Test started successfully";
  } catch (error: any) {
    uiConsole("Error starting test:", error);
    throw error;
  }
};

// Complete a test on the blockchain
export const completeTest = async (
  provider: IProvider,
  uiConsole: (...args: unknown[]) => void,
  correctAnswers: number,
  fraudScore: number,
  metadataURI: string
): Promise<string> => {
  try {
    const contract = await getContract(provider, uiConsole);
    
    uiConsole("Completing test with", correctAnswers, "correct answers");
    
    // Call the completeTest function
    const tx = await contract.completeTest(correctAnswers, fraudScore, metadataURI, {
      gasLimit: 300000
    });
    
    // Wait for the transaction to be mined
    await tx.wait();
    
    uiConsole("Test completed successfully");
    return "Test completed successfully";
  } catch (error: any) {
    uiConsole("Error completing test:", error);
    throw error;
  }
};

// Get test status from the blockchain
export const getTestStatus = async (
  provider: IProvider,
  uiConsole: (...args: unknown[]) => void,
  address?: string
): Promise<any> => {
  try {
    const contract = await getContract(provider, uiConsole);
    const ethersProvider = new ethers.BrowserProvider(provider as any);
    const signer = await ethersProvider.getSigner();
    
    // If no address is provided, use the current user's address
    const userAddress = address || await signer.getAddress();
    
    // Call the getTestStatus function
    const result = await contract.getTestStatus(userAddress);
    
    // Format the result
    const status = {
      wallet: result[0],
      score: Number(result[1]),
      passed: result[2],
      status: Number(result[3]),
      durationSeconds: Number(result[4])
    };
    
    uiConsole("Test status:", status);
    return status;
  } catch (error: any) {
    uiConsole("Error getting test status:", error);
    throw error;
  }
};

// Get test data from the blockchain
export const getTestData = async (
  provider: IProvider,
  uiConsole: (...args: unknown[]) => void,
  address?: string
): Promise<any> => {
  try {
    const contract = await getContract(provider, uiConsole);
    const ethersProvider = new ethers.BrowserProvider(provider as any);
    const signer = await ethersProvider.getSigner();
    
    // If no address is provided, use the current user's address
    const userAddress = address || await signer.getAddress();
    
    // Call the getTestData function
    const result = await contract.getTestData(userAddress);
    
    // Format the result
    const data = {
      testId: result[0],
      startTime: Number(result[1]),
      endTime: Number(result[2]),
      totalQuestions: Number(result[3]),
      correctAnswers: Number(result[4]),
      fraudScore: Number(result[5]),
      metadataURI: result[6]
    };
    
    uiConsole("Test data:", data);
    return data;
  } catch (error: any) {
    uiConsole("Error getting test data:", error);
    throw error;
  }
};